gg.clearResults()
gg.clearList()
-- [0] メインメニュー
function Main()
	gg.setVisible(false)
	Mainmenu = gg.choice({
		(Selected[1] and "\n[1]   Lv2\n" or "\n[ON]   Lv2\n"),		
		(Selected[2] and "\n[2]   Lv2\n" or "\n[ON]   Lv2\n"),	
		(Selected[3] and "\n[3]   Lv2\n" or "\n[ON]   Lv2\n"),			
		"\n[X]   おわる"
	}, nil, "メインメニュー\n\n\n全ての武器の強化レベルを変更するコードです\nどの項目が適用されたかを報告してください")	
	if Mainmenu == nil then
		temporarilyhide()	
	elseif Mainmenu >= 1 and Mainmenu<= 3 then
	    for i = 1, 3 do
		    Selected[i] = false
		end
		Selected[Mainmenu] = true				
	    LoadNameAddress("_Qapplyfix_UserHunterWeapon")
		applyoffset(0x2C, gg.TYPE_DWORD)	
		gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
	    revert = gg.getResults(9999, nil, nil, nil, nil, nil, nil, nil, nil)
    	if Mainmenu == 1 then
    		gg.editAll("2", gg.TYPE_DWORD)
    	elseif Mainmenu == 2 then		
    		LoadNameAddress("_Abasevalue1_UserHunterWeapon")
    		applyoffset(0x2C, gg.TYPE_DWORD)	
    		gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    		gg.getResults(9999)
    		gg.editAll("3", gg.TYPE_DWORD)
    	elseif Mainmenu == 3 then
    	    LoadNameAddress("_Abaseaccuracy_UserHunterWeapon")
    		applyoffset(0x2C, gg.TYPE_DWORD)	
    		gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    		gg.getResults(9999)
    		gg.editAll("4", gg.TYPE_DWORD)
    	end
    	while true do
    		temporarilyhide()
    		gg.setVisible(false)
    		local choice = gg.alert("確認しましたか？\n\n(未だの場合は画面外をタップ)","はい")
    		if choice == 1 then
    		    gg.setValues(revert) 
    			break
    		end
    	end	
	    /Main()
	elseif Mainmenu == 4 then
		os.exit()
	end
end

------------------------------------------[ 定義 ]------------------------------------------
offst = 0
A = true
B = true
C = true
D = true
E = true
-----------------------------------------[ コマンド ]-----------------------------------------
-- 一時的に非表示にする
function temporarilyhide()
	gg.setVisible(false)
	while true do
		if gg.isVisible() then
			break 
		end
	end 
end
-- 保存リストに指定した名前を"含む"アドレスがあれば項目の表示を切り替える
function IncludeCheckAndTrueFalseA(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		A = true
	else
		A = false
	end
end
function IncludeCheckAndTrueFalseB(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		B = true
	else
		B = false
	end
end
function IncludeCheckAndTrueFalseC(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		C = true
	else
		C = false
	end
end
function IncludeCheckAndTrueFalseD(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		D = true
	else
		D = false
	end
end
function IncludeCheckAndTrueFalseE(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		E = true
	else
		E = false
	end
end	
------------------------------------------[ 処理 ]------------------------------------------	
-- 型とオフセットの適用
function applyoffset(selectedOffset, selectedType)
	local results = gg.getResults(9999)
	gg.clearResults()
	for i, v in ipairs(results) do
		v.address = v.address + selectedOffset
		v.flags = selectedType
	end
	gg.loadResults(results)
	gg.getResults(9999)
end	
-- 名前を付けて保存リストに追加
function AddNameAddress(AddName)
	local results = gg.getResults(9999)
	for i, v in ipairs(results) do
		v.name = AddName
	end
	gg.addListItems(results)
	gg.getResults(9999)
end
-- 保存リストから指定した名前のアドレスを読み込む
function LoadNameAddress(LoadName)
	local results = gg.getListItems()
	local filteredResults = {}
	for _, v in ipairs(results) do
		if v.name == LoadName then
			table.insert(filteredResults, v)
		end
	end
	gg.loadResults(filteredResults)
	gg.getResults(9999)
end
-- 保存リストから指定した名前のアドレスを削除する
function DeleteNameAddress(DeleteName)
	local results = gg.getListItems()
	local filteredResults = {}
	for _, v in ipairs(results) do
		if v.name == DeleteName then
			table.insert(filteredResults, v)
		end
	end
	gg.removeListItems(filteredResults)	
	gg.getResults(9999)
end		
-- ポインタ移動
function MoveThePointer()
	local results = gg.getResults(9999)
	gg.clearResults()
	local newAddresses = {}
	for i, result in ipairs(results) do
		local values = gg.getValues({{address=result.address, flags=gg.TYPE_QWORD}})
		if values ~= nil and #values > 0 and result.address ~= nil then
			local qwordValue = values[1].value
			local hexQwordValue = string.format("%X", qwordValue)
			local newAddress = tonumber(hexQwordValue, 16)
			if newAddress ~= nil then
				table.insert(newAddresses, {address=newAddress, flags=gg.TYPE_QWORD, value=qwordValue})
			else
				--print("Warning: Skipping address due to nil newAddress for result.address", result.address)
			end
		else
			--print("Warning: Skipping address due to nil values or address", result.address)
		end
	end
	if #newAddresses > 0 then
		gg.loadResults(newAddresses)
	else
		print("Error: No valid addresses to load.")
	end
	gg.getListItems() 
	gg.getResults(9999) 
end		
-- ポインタ検索 (base)
function SearchPointerbase()
	AddNameAddress("_SearchPointer(base)")
	LoadNameAddress("_SearchPointer(base)")
	DeleteNameAddress("_SearchPointer(base)")
	gg.searchPointer(offst)
	gg.getListItems() 
	gg.getResults(9999)
end
-- libunity.so Xaからポインタ検索
function PointerSearch_libunityXa(offset, region)
	gg.clearResults()
    local libName = "libunity.so"
    local libRanges = gg.getRangesList(libName)
    if #libRanges == 0 then
        print("Error: Unable to find library range.")
        return
    end
    local libAddress = libRanges[2].start
    local address = libAddress + offset
    gg.setRanges(region)
    --gg.setVisible(false)
    gg.searchNumber(address, gg.TYPE_QWORD)
end
-- Xaの書き換え
function Patch(lib, offset,hex)
	gg.setVisible(false)
	local targetAddr = 0
	local hexStrCount = #hex:gsub(" ", "")
	if hexStrCount%2~=0 then return print("Check your hex again. Something wrong there") end 
	local hexCount = hexStrCount/2
	for i, v in ipairs(gg.getRangesList(lib)) do
		if v.type:sub(3,3) == "x" then targetAddr=v.start+offset break end 
	end
	local editHex = {}
	for i=1, hexCount do
		editHex[i] = {address=targetAddr+(i-1), flags=gg.TYPE_BYTE}
	end
	gg.loadResults(editHex)
	gg.getResults(hexCount)
	local edit = "h"..hex
	gg.editAll(edit,1)
	gg.clearResults()
end
-------------------------------------[ オフセットファインダー ]-------------------------------------
--[[ 
(全て名前を付けて保存・読み込みする処理に変更)
保存リストにある名前のついたアドレスを読み込み、条件分岐
・最終アドレスがある場合、読み込んで終了
・最初のクラスデータがある場合、以降の処理だけを実行
・いずれもない場合、通常通り全て実行
]]--
function valueFromClass(class)
	Get_user_input = {}
	Get_user_input[1] = class
	user_input = ":"..Get_user_input[1] 
	error = 0
	gg.setVisible(false)
	start()
	LoadNameAddress("_Qapplyfix2_"..Get_user_input[1])
	AddNameAddress("_Qapplyfix_"..Get_user_input[1])
	LoadNameAddress("_Abasevalue2_"..Get_user_input[1])
	AddNameAddress("_Abasevalue1_"..Get_user_input[1])
end
function loopCheck()
	if error == 3 then
		stopClose()
	end
end
function found_(message)
	if error == 1 then
		found2(message)
	elseif error == 2 then
		found3(message)
	elseif error == 3 then
		found4(message)
	else
		found(message)
	end
end
function found(message)
   if count == 0 then
		gg.clearResults()
		first_error = message
		error = 1
	   second_start()
   end
end
function found2(message)
	if count == 0 then
		gg.clearResults()
		second_error = message
		error = 2
		third_start()
	end
end
function found3(message)
	if count == 0 then
		gg.clearResults()
		third_error = message
		error = 3
		fourth_start()
	end
end
function found4(message)
	if count == 0 then
		gg.clearResults()
		gg.alert("❌Value NOT FOUND❌\nError Log:\nTry 1: "..first_error.."\nTry 2: "..second_error.."\nTry 3: "..third_error.."\nTry 4: ".. message.."\n\nℹ️エラーの原因ℹ️\n\n🟢O_dinitial_search,: \nクラス名検索\n⇒ クラスデータの誤り\n・スクリプトのシーケンス,クラスデータの誤り\n・バージョン修正\n\n🟡CA_pointer_search, Q_apply_fix: \nポインタ検索1\n⇒ クラスデータが複製されていない\n・変数を生成させてからコードを実行する(変数が生成される条件:該当の装備をするなど))\n\nnaruse1122(Discord)")
		gg.setVisible(true)
		loopCheck()
	end
end   
function O_dinitial_search()
	if error > 1 then
		gg.setRanges(gg.REGION_C_ALLOC)
	else
		gg.setRanges(gg.REGION_OTHER)
	end
	gg.setVisible(false)
	gg.searchNumber(user_input, gg.TYPE_BYTE)
	count = gg.getResultsCount()
	if count == 0 then
		found_("O_dinitial_search")
		return 0
	end
	Refiner = gg.getResults(1)
	gg.refineNumber(Refiner[1].value, gg.TYPE_BYTE)
	count = gg.getResultsCount()
	if count == 0 then
		found_("O_dinitial_search")
		return 0
	end
	AddNameAddress("_Odinitialsearch_"..Get_user_input[1])	 
end
function CA_pointer_search()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	LoadNameAddress("_Odinitialsearch_"..Get_user_input[1])
	gg.setVisible(false)
	gg.searchPointer(offst)
	gg.getListItems() 
	gg.getResults(9999) 
	count = gg.getResultsCount()
	if count == 0 then
		found_("CA_pointer_search")
		return 0
	end
end   
function CA_apply_offset1()
	applyoffset(0xfffffffffffffff0, gg.TYPE_QWORD)
	gg.refineNumber("0", gg.TYPE_QWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)	
	AddNameAddress("_CAapplyoffset1_"..Get_user_input[1])	   
end  
function CA_apply_offset2()
	applyoffset(0xfffffffffffffff8, gg.TYPE_QWORD)
	gg.refineNumber("0", gg.TYPE_QWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)	
	AddNameAddress("_CAapplyoffset2_"..Get_user_input[1])	   
end 
function A_base_value1()
	gg.setRanges(gg.REGION_ANONYMOUS)
	LoadNameAddress("_CAapplyoffset1_"..Get_user_input[1])
	gg.setVisible(false)	
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_value1")
		return 0
	end
	AddNameAddress("_Abasevalue1_"..Get_user_input[1])	   
end
function A_base_value2()
	gg.setRanges(gg.REGION_ANONYMOUS)
	LoadNameAddress("_CAapplyoffset2_"..Get_user_input[1])
	gg.setVisible(false)	
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_value2")
		return 0
	end
	AddNameAddress("_Abasevalue2_"..Get_user_input[1])	   
end
function Q_apply_fix1()
	gg.setRanges(gg.REGION_ANONYMOUS)
	LoadNameAddress("_CAapplyoffset1_"..Get_user_input[1])
	count = gg.getResultsCount()
	if count == 0 then
		found_("Q_apply_fix1")
		return 0
	end
	yy = gg.getResults(9999)
	gg.clearResults()
	i = 1
	c = 1
	s = {}
	while (i-1) < count do
		yy[i].address = yy[i].address + 0xB400000000000000
		gg.setVisible(false)
		gg.searchNumber(yy[i].address, gg.TYPE_QWORD)
		local cnt = gg.getResultsCount()
		if 0 < cnt then
			bytr = gg.getResults(cnt)
			n = 1
			while (n-1) < cnt do
				s[c] = {}
				s[c].address = bytr[n].address
				s[c].flags = 32
				n = n + 1
				c = c + 1
			end
		end
		gg.clearResults()
		i = i + 1
	end
	for i, v in ipairs(s) do
		v.name = "_Qapplyfix_"..Get_user_input[1]
	end
	gg.addListItems(s)
end   
function Q_apply_fix2()
	gg.setRanges(gg.REGION_ANONYMOUS)
	LoadNameAddress("_CAapplyoffset2_"..Get_user_input[1])
	count = gg.getResultsCount()
	if count == 0 then
		found_("Q_apply_fix2")
		return 0
	end
	yy = gg.getResults(9999)
	gg.clearResults()
	i = 1
	c = 1
	s = {}
	while (i-1) < count do
		yy[i].address = yy[i].address + 0xB400000000000000
		gg.setVisible(false)
		gg.searchNumber(yy[i].address, gg.TYPE_QWORD)
		local cnt = gg.getResultsCount()
		if 0 < cnt then
			bytr = gg.getResults(cnt)
			n = 1
			while (n-1) < cnt do
				s[c] = {}
				s[c].address = bytr[n].address
				s[c].flags = 32
				n = n + 1
				c = c + 1
			end
		end
		gg.clearResults()
		i = i + 1
	end
	for i, v in ipairs(s) do
		v.name = "_Qapplyfix2_"..Get_user_input[1]
	end
	gg.addListItems(s)
end   
function A_base_accuracy1()
	gg.setRanges(gg.REGION_ANONYMOUS | gg.REGION_C_ALLOC)
	LoadNameAddress("_Abasevalue1_"..Get_user_input[1])
	gg.setVisible(false)
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_accuracy1")
		return 0
	end
	kol = gg.getResults(count)
	i = 1
	h = {}
	while (i-1) < count do
		h[i] = {}
		h[i].address = kol[i].value
		h[i].flags = 32
		i = i + 1
	end
	AddNameAddress("_Abaseaccuracy_"..Get_user_input[1])	   
end
function A_base_accuracy2()
	gg.setRanges(gg.REGION_ANONYMOUS | gg.REGION_C_ALLOC)
	LoadNameAddress("_Qapplyfix_"..Get_user_input[1])
	gg.setVisible(false)
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_accuracy2")
		return 0
	end
	kol = gg.getResults(count)
	i = 1
	h = {}
	while (i-1) < count do
		h[i] = {}
		h[i].address = kol[i].value
		h[i].flags = 32
		i = i + 1
	end
	AddNameAddress("_Abaseaccuracy_"..Get_user_input[1])	   
end
function A_base_accuracy3()
	gg.setRanges(gg.REGION_ANONYMOUS | gg.REGION_C_ALLOC)
	LoadNameAddress("_Abasevalue2_"..Get_user_input[1])
	gg.setVisible(false)
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_accuracy3")
		return 0
	end
	kol = gg.getResults(count)
	i = 1
	h = {}
	while (i-1) < count do
		h[i] = {}
		h[i].address = kol[i].value
		h[i].flags = 32
		i = i + 1
	end
	AddNameAddress("_Abaseaccuracy_"..Get_user_input[1])	   
end
function A_base_accuracy4()
	gg.setRanges(gg.REGION_ANONYMOUS | gg.REGION_C_ALLOC)
	LoadNameAddress("_Qapplyfix2_"..Get_user_input[1])
	gg.setVisible(false)
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_accuracy4")
		return 0
	end
	kol = gg.getResults(count)
	i = 1
	h = {}
	while (i-1) < count do
		h[i] = {}
		h[i].address = kol[i].value
		h[i].flags = 32
		i = i + 1
	end
	AddNameAddress("_Abaseaccuracy_"..Get_user_input[1])	   
end
function start()
	O_dinitial_search()
	if error > 0 then
		return 0
	end
	CA_pointer_search()
	if error > 0 then
		return 0
	end
	CA_apply_offset1()
	if error > 0 then
		return 0
	end
	A_base_value1()
	if error > 0 then
		return 0
	end
	A_base_accuracy1()
	if error > 0 then
		return 0
	end
	loopCheck()
	if error > 0 then
		return 0
	end
end
function second_start()
	gg.toast("🟡Second Try")
	O_dinitial_search()
	if error > 1 then
		return 0
	end
	CA_pointer_search()
	if error > 1 then
		return 0
	end
	CA_apply_offset1()
	if error > 1 then
		return 0
	end
	Q_apply_fix1()
	if error > 1 then
		return 0
	end
	A_base_accuracy2()
	if error > 1 then
		return 0
	end
	loopCheck()
	if error > 1 then
		return 0
	end
end
function third_start()
	gg.toast("🔴Third Try")
	O_dinitial_search()
	if error > 2 then
		return 0
	end
	CA_pointer_search()
	if error > 2 then
		return 0
	end
	CA_apply_offset2()
	if error > 2 then
		return 0
	end
	A_base_value2()
	if error > 2 then
		return 0
	end
	A_base_accuracy3()
	if error > 2 then
		return 0
	end
	loopCheck()
	if error > 2 then
		return 0
	end
end
function fourth_start()
	gg.toast("☢Fourth Try")
	O_dinitial_search()
	CA_pointer_search()
	CA_apply_offset2()
	Q_apply_fix2()
	A_base_accuracy4()
	loopCheck()
end
function stopClose()
	while true do
		Main()
		gg.setVisible(false)
		while gg.isVisible() == false do
		end
	end
end
-- スタートは"Main"
gg.toast("アドレスを取得中")
valueFromClass("UserHunterWeapon")	
stopClose()			
