-- [0] メインメニュー
function Main()
	gg.setVisible(false)
	Mainmenu = gg.choice({
		"\n[1]   装備\n",
		"\n[2]   ハンター\n",		
		"\n[3]   モンスター\n",			
		"\n[4]   マップ\n",		
		"\n[5]   全般\n",	
		"\n[6]   クイック設定\n",   
		"\n[~]   DeveloperMode\n",		
		"\n[X]   おわる"
	}, nil, "メインメニュー\n\nMonster - 69.1 (2024/2/6)\n\n*がつく項目は実行後にそのステータスの変数が変わるような操作をしないで下さい\nクラッシュの原因になります")	
	if Mainmenu == nil then
		temporarilyhide()	
	elseif Mainmenu == 1 then		
		Equipment()
	elseif Mainmenu == 2 then
		Hunter()
	elseif Mainmenu == 3 then
		Monster()
	elseif Mainmenu == 4 then
		Map()
   elseif Mainmenu == 5 then
		Settings()
   elseif Mainmenu == 6 then
		QuickOption()
	elseif Mainmenu == 7 then
		DeveloperMode()
	elseif Mainmenu == 8 then
		os.exit()
	end
	Main()
end
	-- [1] 装備
	function Equipment()
		gg.setVisible(false)	
		EquipmentMenu = gg.choice({
			"\n[1]   生産・強化\n",
			"\n[2]   武器毎の性質\n",	
			"\n[3]   全武器の性能\n",					
			"\n[4]   全防具の性能\n",	
			"\n[5]   全装飾品の性能\n",
			"\n[6]   スキル\n",				
			"\n[←]   もどる"	
		}, nil, "メインメニュー/\n\n装備")		
		if EquipmentMenu == nil then
			temporarilyhide()	
		elseif EquipmentMenu == 1 then		
			Craft()
		elseif EquipmentMenu == 2 then		
			WeaponProperty()			
		elseif EquipmentMenu == 3 then		
			WeaponSpec()
		elseif EquipmentMenu == 4 then	
			ArmorSpec()
		elseif EquipmentMenu == 5 then	
			gg.alert("実装後追加")
			Equipment()
			DecorationSpec()
		elseif EquipmentMenu == 6 then
			Skill()
		elseif EquipmentMenu == 7 then		
			Main()
		end
		Equipment()
	end
		-- [1-1] 生産・強化
		Craft_currentA = 1
		Craft_currentB = 1		
		Craft_currentC = 1	
		Craft_currentD = 1
		Craft_SelectedA = {"\n[1]   武器の強化レベル\n", "\n[ON]   武器の強化レベル  =  Lv5\n", "\n[ON]   武器の強化レベル  =  Lv4\n"}		
		Craft_SelectedB = {"\n[2]   防具の強化レベル\n", "\n[ON]   防具の強化レベル  =  Lv5\n", "\n[ON]   防具の強化レベル  =  Lv4\n"}	
		Craft_SelectedC = {"\n[5]   装備の解放\n", "\n[ON]   装備の解放  =  全て解放\n"}
		Craft_SelectedD = {"\n[6]   防具の生産数の制限\n", "\n[ON]   防具の生産数の制限  =  解除\n"}
		function Craft()
			IncludeCheckAndTrueFalseA("_WeaponCraftSharedSettingsProto")
			IncludeCheckAndTrueFalseB("_ArmorCraftSharedSettingsProto")			
			Craft_Selected = {A, B}		
			gg.setVisible(false)	
			CraftMenu = gg.choice({
				Craft_SelectedA[Craft_currentA],
				Craft_SelectedB[Craft_currentB],
				(Craft_Selected[1] and "\n-> [3]   武器の強化に必要な素材の確認\n" or "\n[3]   武器の強化に必要な素材の確認\n"),
				(Craft_Selected[2] and "\n-> [4]   防具の強化に必要な素材の確認\n" or "\n[4]   防具の強化に必要な素材の確認\n"),
				Craft_SelectedC[Craft_currentC],
				Craft_SelectedD[Craft_currentD],
				"\n[←]   もどる"
			}, nil, "メインメニュー/装備/\n\n生産・強化")	
			if CraftMenu == nil then
				temporarilyhide()
			elseif CraftMenu == 1 then	
				local Value = {"5","4"}
				valueFromClass("UserHunterWeapon")	
				applyoffset(0x2C, gg.TYPE_DWORD)	
				gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
				gg.getResults(9999)
				if Craft_currentA == 1 or Craft_currentA == 3 then
					gg.editAll(Value[1], gg.TYPE_DWORD)
					Craft_currentA = 2
				elseif Craft_currentA == 2 then
					gg.editAll(Value[2], gg.TYPE_DWORD)
					Craft_currentA = 3
				end
			elseif CraftMenu == 2 then
				local Value = {"5", "4"}
				valueFromClass("UserHunterArmor")	
				applyoffset(0x2C, gg.TYPE_DWORD)	
				gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
				gg.getResults(9999)
				if Craft_currentB == 1 or Craft_currentB == 3 then
					gg.editAll(Value[1], gg.TYPE_DWORD)
					Craft_currentB = 2
				elseif Craft_currentB == 2 then
					gg.editAll(Value[2], gg.TYPE_DWORD)
					Craft_currentB = 3
				end							
			elseif CraftMenu == 3 then
				valueFromClass("WeaponCraftSharedSettingsProto")
				applyoffset(0x18, gg.TYPE_DWORD)	
				gg.refineNumber("1~10,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
				WeaponCraftSharedSettingsProto_CraftWeaponMaterial()	
			elseif CraftMenu == 4 then
				valueFromClass("ArmorCraftSharedSettingsProto")
				applyoffset(0x18, gg.TYPE_DWORD)
				gg.refineNumber("1~10,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
				ArmorCraftSharedSettingsProto_CraftArmorMaterial()	
			elseif CraftMenu == 5 then
				if Craft_currentC == 1 then
					Patch("libil2cpp.so",0x193DB08,"20 00 80 52")
					Craft_currentC = 2
				elseif Craft_currentC == 2 then
					Patch("libil2cpp.so",0x193DB08,"E0 03 1F 2A")
					Craft_currentC = 1
				end			
			elseif CraftMenu == 6 then
				local Value = {"0"}
			    valueFromClass("SeriesSpecSettingsProto")
				applyoffset(0x18, gg.TYPE_DWORD)
				gg.refineNumber("0~1,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)	
				gg.getResults(9999)
				gg.editAll(Value[1], gg.TYPE_DWORD)
				Craft_currentD = 2
			elseif CraftMenu == 7 then
				Equipment()
			end	
			Craft()
		end	
			-- [1-1-3] 武器の強化に必要な素材の確認
			function WeaponCraftSharedSettingsProto_CraftWeaponMaterial()
				local function error1()
					gg.setVisible(false)
   				local choice = gg.alert("エラー\n\n(「シリーズ番号」が範囲外です", "[→]   変更し直す", "[←]   もどる")
   				if choice == 1 then
   			      WeaponCraftSharedSettingsProto_CraftWeaponMaterial()
   				elseif choice == 2 then
   					Craft()	
   				end
				end			
				local function error2()
					gg.setVisible(false)
   				local choice = gg.alert("エラー\n\n「グレード番号」が範囲外です", "[→]   変更し直す", "[←]   もどる")
   				if choice == 1 then
   			      WeaponCraftSharedSettingsProto_CraftWeaponMaterial()
   				elseif choice == 2 then
   					Craft()	
   				end
				end
				local function error3()
					gg.setVisible(false)
   				local choice = gg.alert("エラー\n\n「強化レベル番号」が範囲外です", "[→]   変更し直す", "[←]   もどる")
   				if choice == 1 then
   			      WeaponCraftSharedSettingsProto_CraftWeaponMaterial()
   				elseif choice == 2 then
   					Craft()	
   				end
				end				
				while true do
					gg.setVisible(false)
					prompt = {
						"武器の強化に必要な素材の確認\n武器の「シリーズ」, 「グレード」, 「強化レベル」の番号を参照し入力して下さい\n(指定した武器の強化に必要な素材情報を上書きし表示します)\n\n例: 21,8,5 \n⇒ ジンオウガの武器8.4~8.5に必要な素材情報が表示\n\n\nシリーズ:\n[   1: 鉱石,　                         13: レイギエナ,\n    2: ドスジャグラス,             14: ディアブロス, \n    3: クルルヤック,                15: ディアブロス亜種,\n    4: プケプケ,                      16: リオレウス, \n    5: ボルボロス,                   17: リオレウス亜種,\n    6: ドスギルオス,                18: ラドバルキン,\n    7: トビカガチ,                   19: バフバロ,\n    8: パオウルムー,                20: ベリオロス,\n    9: ジュラトドス,                21: ジンオウガ,\n   10: アンジャナフ,                22: 竜骨,\n   11: リオレイア,                   23: 新年2024\n   12: リオレイア亜種,                                                 ]",
						"グレード:\n[  (初期G) ~ 10  ]",
						"強化レベル:\n[  1 ~ 5  ]"}
					userInput = gg.prompt(prompt, {[1] = "", [2] = "", [3] = ""})
					if userInput ~= nil then
						break
					else
						gg.setVisible(false)
						local choice = gg.alert("メインメニュー/装備/生産・強化\n\n武器の強化に必要な素材の確認\n", "[→]   変更し直す", "[←]   もどる")
						if choice == 1 then
							WeaponCraftSharedSettingsProto_CraftWeaponMaterial()
						elseif choice == 2 then
							Craft()	
						end
						temporarilyhide()
					end
				end
				if not userInput then
					while true do
						gg.setVisible(false)
						local choice = gg.alert("エラー\n\n空欄があります", "[→]   変更し直す", "[←]   もどる")
						if choice == 1 then
							WeaponCraftSharedSettingsProto_CraftWeaponMaterial()
						elseif choice == 2 then
							Craft()	
						end
						temporarilyhide()
					end		
				end
				local SeriesId = tonumber(userInput[1])
				local gradeId = tonumber(userInput[2])
				local LevelId = tonumber(userInput[3])
				if SeriesId == 1 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 1 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 420) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end
				elseif SeriesId == 2 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 1 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 420) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 450) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 3 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 1 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 40) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 480) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end		
				elseif SeriesId == 4 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 1 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 60) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 510) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end		
				elseif SeriesId == 5 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId == 1 then
								CraftId = 565 - (5 - LevelId)
							elseif gradeId >= 2 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 75) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 545) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end			
				elseif SeriesId == 6 then
					if gradeId >= 2 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 2 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 90) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 580) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end		
				elseif SeriesId == 7 then
					if gradeId >= 2 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 2 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 135) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 685) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 8 then
					if gradeId >= 3 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 3 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 120) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 650) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 9 then
					if gradeId >= 3 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 3 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 890) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 10 then
					if gradeId >= 4 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId == 4 then
								CraftId = 125 - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 615) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 11 then
					if gradeId >= 4 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId == 4 then
								CraftId = 170 - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 720) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end
				elseif SeriesId == 12 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1440) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 13 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 760) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end		
				elseif SeriesId == 14 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 840) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 15 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1540) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 16 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 800) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 17 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1490) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 18 then
					if gradeId >= 2 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 2 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1780) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 19 then
					if gradeId >= 3 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 3 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1820) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 20 then
					if gradeId >= 4 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 4 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1855) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 21 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1885) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 22 then
					if gradeId >= 3 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 3 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 2075) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 23 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 2140) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end			
				else   
				   error1()
				end
            local revert = gg.getResults(9999, nil, nil, nil, nil, nil, nil, nil, nil)
            gg.editAll(CraftId, gg.TYPE_DWORD)
				::restart::
            gg.setVisible(false)
            local choice = gg.alert("メインメニュー/装備/生産・強化\n\n武器の強化に必要な素材の確認\n", "[→] 変更し直す", "[←] もどる")
            if choice == 1 then
               if revert ~= nil then 
						gg.setValues(revert) 
					end
               WeaponCraftSharedSettingsProto_CraftWeaponMaterial()
            elseif choice == 2 then
               if revert ~= nil then 
						gg.setValues(revert) 
					end
               Craft()	
            else
					temporarilyhide()
               goto restart
            end
         end			
			-- [1-1-4] 防具の強化に必要な素材の確認
			function ArmorCraftSharedSettingsProto_CraftArmorMaterial()
				local function error1()
					gg.setVisible(false)
   				local choice = gg.alert("エラー\n\n「シリーズ番号」が範囲外です", "[→]   変更し直す", "[←]   もどる")
   				if choice == 1 then
   			      ArmorCraftSharedSettingsProto_CraftArmorMaterial()
   				elseif choice == 2 then
   					Craft()	
   				end
				end			
				local function error2()
					gg.setVisible(false)
   				local choice = gg.alert("エラー\n\n「グレード番号」が範囲外です", "[→]   変更し直す", "[←]   もどる")
   				if choice == 1 then
   			      ArmorCraftSharedSettingsProto_CraftArmorMaterial()
   				elseif choice == 2 then
   					Craft()	
   				end
				end
				local function error3()
					gg.setVisible(false)
   				local choice = gg.alert("エラー\n\n「強化レベル番号」が範囲外です", "[→]   変更し直す", "[←]   もどる")
   				if choice == 1 then
   			      ArmorCraftSharedSettingsProto_CraftArmorMaterial()
   				elseif choice == 2 then
   					Craft()	
   				end
				end				
				while true do
					gg.setVisible(false)
					prompt = {
						"防具の強化に必要な素材の確認\n武器の「シリーズ」, 「グレード」, 「強化レベル」の番号を参照し入力して下さい\n(指定した武器の強化に必要な素材情報を上書きし表示します)\n\n例: 21,8,5 \n⇒ ジンオウガの武器8.4~8.5に必要な素材情報が表示\n\n\nシリーズ:\n[   1: 鉱石,　                         13: レイギエナ,\n    2: ドスジャグラス,             14: ディアブロス, \n    3: クルルヤック,                15: ディアブロス亜種,\n    4: プケプケ,                      16: リオレウス, \n    5: ボルボロス,                   17: リオレウス亜種,\n    6: ドスギルオス,                18: ラドバルキン,\n    7: トビカガチ,                   19: バフバロ,\n    8: パオウルムー,                20: ベリオロス,\n    9: ジュラトドス,                21: ジンオウガ,\n   10: アンジャナフ,                22: 竜骨,\n   11: リオレイア,                   23: 新年2024\n   12: リオレイア亜種,                                                 ]",
						"グレード:\n[  (初期G) ~ 10  ]",
						"強化レベル:\n[  1 ~ 5  ]"}
					userInput = gg.prompt(prompt, {[1] = "", [2] = "", [3] = ""})
					if userInput ~= nil then
						break
					else
						gg.setVisible(false)
						local choice = gg.alert("メインメニュー/装備/生産・強化\n\n防具の強化に必要な素材の確認\n", "[→]   変更し直す", "[←]   もどる")
						if choice == 1 then
							ArmorCraftSharedSettingsProto_CraftArmorMaterial()
						elseif choice == 2 then
							Craft()	
						end
						temporarilyhide()
					end
				end
				if not userInput then
					while true do
						gg.setVisible(false)
						local choice = gg.alert("エラー\n\n空欄があります", "[→]   変更し直す", "[←]   もどる")
						if choice == 1 then
							ArmorCraftSharedSettingsProto_CraftArmorMaterial()
						elseif choice == 2 then
							Craft()	
						end
						temporarilyhide()
					end		
				end
				local SeriesId = tonumber(userInput[1])
				local gradeId = tonumber(userInput[2])
				local LevelId = tonumber(userInput[3])
				if SeriesId == 1 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 1 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 200) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 920) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end
				elseif SeriesId == 2 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 1 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 220) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 950) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 3 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 1 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 240) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 980) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end		
				elseif SeriesId == 4 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 1 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 260) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1010) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end		
				elseif SeriesId == 5 then
					if gradeId >= 1 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId == 1 then
								CraftId = 1065 - (5 - LevelId)
							elseif gradeId >= 2 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 275) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1045) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end			
				elseif SeriesId == 6 then
					if gradeId >= 2 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 2 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 290) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1080) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end		
				elseif SeriesId == 7 then
					if gradeId >= 2 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 2 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 335) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1185) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 8 then
					if gradeId >= 3 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 3 and gradeId <= 4 then
								CraftId = tostring(gradeId * 5 + 320) - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1150) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 9 then
					if gradeId >= 3 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 3 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1390) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 10 then
					if gradeId >= 4 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId == 4 then
								CraftId = 325 - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1115) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 11 then
					if gradeId >= 4 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId == 4 then
								CraftId = 370 - (5 - LevelId)
							elseif gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1220) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end
				elseif SeriesId == 12 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1590) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 13 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1260) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end		
				elseif SeriesId == 14 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1340) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 15 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1690) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 16 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1300) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 17 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1640) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 18 then
					if gradeId >= 2 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 2 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1930) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 19 then
					if gradeId >= 3 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 3 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1970) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 20 then
					if gradeId >= 4 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 4 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 2005) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 21 then
					if gradeId >= 5 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 5 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 2035) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 22 then
					if gradeId >= 2 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 2 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 1735) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end	
				elseif SeriesId == 23 then
					if gradeId >= 4 and gradeId <= 10 then
						if LevelId >= 1 and LevelId <= 5 then
							if gradeId >= 4 and gradeId <= 10 then
								CraftId = tostring(gradeId * 5 + 2110) - (5 - LevelId)
							end
						else
							error3()
						end
					else
						error2()
					end			
				else   
				   error1()
				end
            local revert = gg.getResults(9999, nil, nil, nil, nil, nil, nil, nil, nil)
            gg.editAll(CraftId, gg.TYPE_DWORD)
				::restart::
            gg.setVisible(false)
            local choice = gg.alert("メインメニュー/装備/生産・強化\n\n防具の強化に必要な素材の確認\n", "[→] 変更し直す", "[←] もどる")
            if choice == 1 then
               if revert ~= nil then gg.setValues(revert) end
               ArmorCraftSharedSettingsProto_CraftArmorMaterial()
            elseif choice == 2 then
               if revert ~= nil then gg.setValues(revert) end
               Craft()	
            else
					temporarilyhide()				
               goto restart
            end
         end			
		-- [1-2] 武器毎の性質
		function WeaponProperty()
			gg.setVisible(false)	
			WeaponPropertyMenu = gg.choice({
				"\n[1]   大剣\n",
				"\n[2]   片手剣\n",				
				"\n[3]   双剣\n",
				"\n[4]   太刀\n",	
				"\n[5]   ハンマー\n",					
				"\n[6]   弓\n",
				"\n[7]   ボウガン\n",
				"\n[←]   もどる"
			}, nil, "メインメニュー/装備/\n\n武器毎の性質\n\n該当の装備をして実行して下さい")		
			if WeaponPropertyMenu == nil then
				temporarilyhide()	
			elseif WeaponPropertyMenu == 1 then
				GreatSword()	
			elseif WeaponPropertyMenu == 2 then
				while true do
					gg.setVisible(false)
					local choice = gg.alert("「片手剣」を装備して実行して下さい\n\n(準備し直す場合は画面外をタップ)","[→]   すすむ","[←]   もどる")
					if choice == 1 then
						SwordShield()	
					elseif choice == 2 then
						WeaponProperty()			
					end
					temporarilyhide()	
				end	
			elseif WeaponPropertyMenu == 3 then			
				while true do
					gg.setVisible(false)
					local choice = gg.alert("「双剣」を装備して実行して下さい\n\n(準備し直す場合は画面外をタップ)","[→]   すすむ","[←]   もどる")
					if choice == 1 then
						DualBlades()
					elseif choice == 2 then
						WeaponProperty()			
					end
					temporarilyhide()
				end
			elseif WeaponPropertyMenu == 4 then
				while true do
					gg.setVisible(false)
					local choice = gg.alert("「太刀」を装備して実行して下さい\n\n(準備し直す場合は画面外をタップ)", "[→]   すすむ", "[←]   もどる")
					if choice == 1 then
						LongSword()		
					elseif choice == 2 then
						WeaponProperty()	
					end
					temporarilyhide()
				end			
			elseif WeaponPropertyMenu == 5 then
				while true do
					gg.setVisible(false)
					local choice = gg.alert("「ハンマー」を装備して実行して下さい\n\n(準備し直す場合は画面外をタップ)", "[→]   すすむ", "[←]   もどる")
					if choice == 1 then
						Hammer()
					elseif choice == 2 then
						WeaponProperty()				
					end
					temporarilyhide()	
				end			
			elseif WeaponPropertyMenu == 6 then
				while true do
					gg.setVisible(false)
					local choice = gg.alert("「弓」を装備して実行して下さい\n\n(準備し直す場合は画面外をタップ)", "[→]   すすむ", "[←]   もどる")
					if choice == 1 then
						Bow()
					elseif choice == 2 then
						WeaponProperty()				
					end
					temporarilyhide()	
				end			
			elseif WeaponPropertyMenu == 7 then
				while true do
					gg.setVisible(false)
					local choice = gg.alert("「ボウガン」を装備して実行して下さい\n\n(準備し直す場合は画面外をタップ)", "[→]   すすむ", "[←]   もどる")
					if choice == 1 then
						Bowgun()
					elseif choice == 2 then
						WeaponProperty()		
					end
					temporarilyhide()	
				end			
			elseif WeaponPropertyMenu == 8 then
				Equipment()
			end
			WeaponProperty()
		end		
			-- [1-2-1] 大剣
			ChargeSpeed_currentX = 1				
			GreatSword_currentB = 1
			GreatSword_SelectedA = {"\n[1]   チャージ速度\n", "\n[ON]   チャージ速度  =  最速\n"}			
			GreatSword_SelectedB = {"\n[2]   スーパーアーマーの効果\n", "\n[ON]   スーパーアーマーの効果  =  体力超回復\n"}	
			function GreatSword()
				gg.setVisible(false)
				GreatSwordMenu = gg.choice({
					GreatSword_SelectedA[ChargeSpeed_currentX],
					GreatSword_SelectedB[GreatSword_currentB],
					"\n[←]   もどる"
				}, nil, "メインメニュー/装備/武器毎の性質/\n\n大剣")
				if GreatSwordMenu == nil then
					temporarilyhide()
				elseif GreatSwordMenu == 1 then	
					if ChargeSpeed_currentX == 1 then
						Patch("libil2cpp.so",0x1A64488,"00 10 40 BC")
						ChargeSpeed_currentX = 2
					elseif ChargeSpeed_currentX == 2 then
						Patch("libil2cpp.so",0x1A64488,"00 98 41 BD")
						ChargeSpeed_currentX = 1
					end						
				elseif GreatSwordMenu == 2 then	
					local Value = {"100,000", "95"}
					LoadNameAddress("BattleConfig_GreatSword")
					local count = gg.getResultsCount(9999)
					if count >= 1 then
					else
						valueFromClass("BattleConfig")
						applyoffset(0x60, gg.TYPE_QWORD)
						MoveThePointer()
						applyoffset(0x10, gg.TYPE_DWORD)
						gg.refineNumber("95", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
						AddNameAddress("BattleConfig_GreatSword")
				   end
					gg.getResults(9999)
					if GreatSword_currentB == 1 then
						gg.editAll(Value[1], gg.TYPE_DWORD)
						GreatSword_currentB = 2
					elseif GreatSword_currentB == 2 then
						gg.editAll(Value[2], gg.TYPE_DWORD)
						GreatSword_currentB = 1
					end
				elseif GreatSwordMenu == 3 then
					WeaponProperty()
				end
				GreatSword()
			end		
			-- [1-2-2] 片手剣
			SwordShield_currentA = 1
			SwordShield_SelectedA = {"\n[1]   ガードのリアクション種類*\n", "\n[ON]   ガードのリアクション種類*  =  小\n", "\n[ON]   ガードのリアクション種類*  =  中\n", "\n[ON]   ガードのリアクション種類*  =  大\n"}	
			SwordShield_SelectedA_Selected = {false, false, false}
			function SwordShield()	
				gg.setVisible(false)
				SwordShieldMenu = gg.choice({
					SwordShield_SelectedA[SwordShield_currentA],
					"\n[~]   アドレスの再取得\n",					
					"\n[←]   もどる"
				}, nil, "メインメニュー/装備/武器毎の性質/\n\n片手剣")
				if SwordShieldMenu == nil then
					temporarilyhide()
				elseif SwordShieldMenu == 1 then
					local Value1 = {"30,681,128,950,759,523", "30,399,714,103,722,067", "463,863,545,953", "108"}
					local Value2 = {"28,429,303,367,270,499", "29,555,302,057,967,693", "30,681,274,979,516,516", "7,143,541"}
					local Value3 = {"27,303,399,165,460,579", "28,992,412,233,826,380", "433,798,447,218", "101"}
					valueFromClass("GuardSequenceClip")	
					applyoffset(0x1C, gg.TYPE_QWORD)
					gg.refineNumber("4,506,001,550,208,436,360", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					applyoffset(0x14, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x2C, gg.TYPE_QWORD)
					gg.setVisible(false)
					local menu = gg.choice({
						(SwordShield_SelectedA_Selected[1] and "\n[ON]   小\n" or "\n[1]   小\n"),
						(SwordShield_SelectedA_Selected[2] and "\n[ON]   中\n" or "\n[2]   中\n"),
						(SwordShield_SelectedA_Selected[3] and "\n[ON]   大\n" or "\n[3]   大\n"),
					}, nil, "メインメニュー/装備/武器毎の性質/片手剣/\n\nガードのリアクション種類*")
					if menu == nil then	
					elseif menu >= 1 and menu<= 3 then
						for i = 1, 3 do
							SwordShield_SelectedA_Selected[i] = false
						end
						SwordShield_SelectedA_Selected[menu] = true		
						if menu == 1 then
							gg.editAll(Value1[1], gg.TYPE_QWORD)	
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value1[2], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value1[3], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value1[4], gg.TYPE_QWORD)
							valueFromClass("GuardSequenceClip")				
							applyoffset(0x1C, gg.TYPE_QWORD)
							gg.refineNumber("4,506,001,550,208,436,360", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
							applyoffset(0x1C, gg.TYPE_QWORD)
							MoveThePointer()
							applyoffset(0x2C, gg.TYPE_QWORD)
							gg.editAll(Value1[1], gg.TYPE_QWORD)	
							applyoffset(0x4, gg.TYPE_DWORD)					
							gg.editAll(Value1[2], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_DWORD)
							gg.editAll(Value1[3], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value1[4], gg.TYPE_QWORD)									
							valueFromClass("GuardSequenceClip")	
							applyoffset(0x1C, gg.TYPE_QWORD)
							gg.refineNumber("4,506,001,550,208,436,360", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
							applyoffset(0x24, gg.TYPE_QWORD)
							MoveThePointer()
							applyoffset(0x2C, gg.TYPE_QWORD)
							gg.editAll(Value1[1], gg.TYPE_QWORD)	
							applyoffset(0x4, gg.TYPE_QWORD)						
							gg.editAll(Value1[2], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value1[3], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value1[4], gg.TYPE_QWORD)	
							SwordShield_currentA = 2
						elseif menu == 2 then
							gg.editAll(Value2[1], gg.TYPE_QWORD)	
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value2[2], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value2[3], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value2[4], gg.TYPE_QWORD)
							valueFromClass("GuardSequenceClip")				
							applyoffset(0x1C, gg.TYPE_QWORD)
							gg.refineNumber("4,506,001,550,208,436,360", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
							applyoffset(0x1C, gg.TYPE_QWORD)
							MoveThePointer()
							applyoffset(0x2C, gg.TYPE_QWORD)
							gg.editAll(Value2[1], gg.TYPE_QWORD)	
							applyoffset(0x4, gg.TYPE_DWORD)					
							gg.editAll(Value2[2], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_DWORD)
							gg.editAll(Value2[3], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value2[4], gg.TYPE_QWORD)									
							valueFromClass("GuardSequenceClip")	
							applyoffset(0x1C, gg.TYPE_QWORD)
							gg.refineNumber("4,506,001,550,208,436,360", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
							applyoffset(0x24, gg.TYPE_QWORD)
							MoveThePointer()
							applyoffset(0x2C, gg.TYPE_QWORD)
							gg.editAll(Value2[1], gg.TYPE_QWORD)	
							applyoffset(0x4, gg.TYPE_QWORD)						
							gg.editAll(Value2[2], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value2[3], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value2[4], gg.TYPE_QWORD)
							SwordShield_currentA = 3
						elseif menu == 3 then
							gg.editAll(Value3[1], gg.TYPE_QWORD)	
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value3[2], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value3[3], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value4[1], gg.TYPE_QWORD)
							valueFromClass("GuardSequenceClip")				
							applyoffset(0x1C, gg.TYPE_QWORD)
							gg.refineNumber("4,506,001,550,208,436,360", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
							applyoffset(0x1C, gg.TYPE_QWORD)
							MoveThePointer()
							applyoffset(0x2C, gg.TYPE_QWORD)
							gg.editAll(Value3[1], gg.TYPE_QWORD)	
							applyoffset(0x4, gg.TYPE_DWORD)					
							gg.editAll(Value3[2], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_DWORD)
							gg.editAll(Value3[3], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value3[4], gg.TYPE_QWORD)									
							valueFromClass("GuardSequenceClip")	
							applyoffset(0x1C, gg.TYPE_QWORD)
							gg.refineNumber("4,506,001,550,208,436,360", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
							applyoffset(0x24, gg.TYPE_QWORD)
							MoveThePointer()
							applyoffset(0x2C, gg.TYPE_QWORD)
							gg.editAll(Value3[1], gg.TYPE_QWORD)	
							applyoffset(0x4, gg.TYPE_QWORD)						
							gg.editAll(Value3[2], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value3[3], gg.TYPE_QWORD)
							applyoffset(0x4, gg.TYPE_QWORD)
							gg.editAll(Value3[4], gg.TYPE_QWORD)				
							SwordShield_currentA = 4
						end
					end
				elseif SwordShieldMenu == 2 then
					Refresh_SwordShield()
				elseif SwordShieldMenu == 3 then
					WeaponProperty()
				end
				SwordShield()
			end		
				-- [1-2-2-2] アドレスの再取得
				function Refresh_SwordShield()
					local name1 = {"_Qapplyfix_GuardSequenceClip", "_Abaseaccuracy_GuardSequenceClip\n"}
					local Prompt = gg.prompt({
						"\n[1]   ガードのリアクション種類*"
					}, {false}, {"checkbox"})
					if Prompt == nil then
						temporarilyhide()
					end
					if Prompt[1] == true then
						DeleteNameAddress(name1[1])
						DeleteNameAddress(name1[2])
						valueFromClass("GuardSequenceClip")	
						SwordShield_currentA = 1
					end
					SwordShield()
				end							
			-- [1-2-3] 双剣
			DualBlades_currentA = 1
			DualBlades_currentB = 1
			DualBlades_currentC = 1
			DualBlades_SelectedA = {"\n[1]   鬼人化の継続時間*\n", "\n[ON]   鬼人化の継続時間*  =  300秒\n"}				
			DualBlades_SelectedB = {"\n[2]   スタミナの回復時間*\n", "\n[ON]   スタミナの回復時間*  =  0秒\n"}	
			DualBlades_SelectedC = {"\n[3]   鬼人化に消費するSPゲージ量*\n", "\n[ON]   鬼人化に消費するSPゲージ量*  =  なし\n"}	
			function DualBlades()
				gg.setVisible(false)
				DualBladesMenu = gg.choice({
					DualBlades_SelectedA[DualBlades_currentA],
					DualBlades_SelectedB[DualBlades_currentB],
					DualBlades_SelectedC[DualBlades_currentC],
					"\n[~]   アドレスの再取得\n",					
					"\n[←]   もどる"
				}, nil, "メインメニュー/装備/武器毎の性質/\n\n双剣")
				if DualBladesMenu == nil then
					temporarilyhide()
				elseif DualBladesMenu >= 1 and DualBladesMenu <= 3 then
					LoadNameAddress("BattleDualBladesLogicSetup_DualBlades")
					local count = gg.getResultsCount(9999)
					if count >= 1 then
					else
						valueFromClass("BattleDualBladesLogicSetup")		
						applyoffset(0x38, gg.TYPE_FLOAT)
						gg.refineNumber("15", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
						AddNameAddress("BattleDualBladesLogicSetup_DualBlades")
					end
					gg.getResults(9999)
					if DualBladesMenu == 1 then
						local Value = {"300", "15"}
						if DualBlades_currentA == 1 then
							gg.editAll(Value[1], gg.TYPE_FLOAT)	
							DualBlades_currentA = 2
						elseif DualBlades_currentA == 2 then
							gg.editAll(Value[2], gg.TYPE_FLOAT)	
							DualBlades_currentA = 1
						end		
					elseif DualBladesMenu == 2 then	
						local Value = {"0", "15"}
						applyoffset(0x4, gg.TYPE_FLOAT)
						if DualBlades_currentB == 1 then
							gg.editAll(Value[1], gg.TYPE_FLOAT)	
							DualBlades_currentB = 2
						elseif DualBlades_currentB == 2 then
							gg.editAll(Value[2], gg.TYPE_FLOAT)	
							DualBlades_currentB = 1
						end		
					elseif DualBladesMenu == 3 then	
						local Value = {"0"}
						applyoffset(0xC, gg.TYPE_FLOAT)
						gg.editAll(Value[1], gg.TYPE_FLOAT)	
						DualBlades_currentC = 2
					end
				elseif DualBladesMenu == 4 then
					Refresh_DualBlades()
				elseif DualBladesMenu == 5 then
					WeaponProperty()
				end
				DualBlades()				
			end					
				-- [1-2-3-4] アドレスの再取得
				function Refresh_DualBlades()
					local name1 = {"_Qapplyfix_BattleDualBladesLogicSetup", "_Abaseaccuracy_BattleDualBladesLogicSetup", "BattleDualBladesLogicSetup_DualBlades"}
					local Prompt = gg.prompt({
						"\n[1]   鬼人化の継続時間*\n[2]   スタミナの回復時間*\n[3]   鬼人化に消費するSPゲージ量*\n"
					}, {false}, {"checkbox"})
					if Prompt == nil then
						temporarilyhide()
					end
					if Prompt[1] == true then
						DeleteNameAddress(name1[1])
						DeleteNameAddress(name1[2])
						DeleteNameAddress(name1[3])
						valueFromClass("BattleDualBladesLogicSetup")	
						DualBlades_currentA = 1
						DualBlades_currentB = 1
						DualBlades_currentC = 1
					end
					DualBlades()
				end					
			-- [1-2-4] 太刀
			LongSword_currentA = 1			
			LongSword_SelectedA = {"\n[1]   兜割が出せる閾値*\n", "\n[ON]   兜割が出せる閾値*  =  最小\n"}
			function LongSword()
				gg.setVisible(false)
				LongSwordMenu = gg.choice({
					LongSword_SelectedA[LongSword_currentA],
					"\n[~]   アドレスの再取得\n",					
					"\n[←]   もどる"
				}, nil, "メインメニュー/装備/武器毎の性質/\n\n太刀")
				if LongSwordMenu == nil then
					temporarilyhide()
					LongSword()
				elseif LongSwordMenu == 1 then
					local Value = {"1", "140"}
					LoadNameAddress("BattleLongSwordLogicSetup_LongSword")
					local count = gg.getResultsCount(9999)
					if count >= 1 then
					else
						valueFromClass("BattleLongSwordLogicSetup")		
						applyoffset(0x1C, gg.TYPE_DWORD)
						gg.refineNumber("140", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)	
						AddNameAddress("BattleLongSwordLogicSetup_LongSword")
					end
					gg.getResults(9999)
					if LongSword_currentA == 1 then
						gg.editAll(Value[1], gg.TYPE_DWORD)	
						LongSword_currentA = 2
					elseif LongSword_currentA == 2 then
						gg.editAll(Value[2], gg.TYPE_DWORD)	
						LongSword_currentA = 1
					end
				elseif LongSwordMenu == 2 then
					Refresh_LongSword()
				elseif LongSwordMenu == 3 then
					WeaponProperty()
				end
				LongSword()
			end					
				-- [1-2-4-5] アドレスの再取得		
				function Refresh_LongSword()
					local name1 = {"_Qapplyfix_BattleLongSwordLogicSetup", "_Abaseaccuracy_BattleLongSwordLogicSetup", "BattleLongSwordLogicSetup_LongSword"}
					local Prompt = gg.prompt({
						"\n[1]   兜割が出せる閾値*"
					}, {false}, {"checkbox"})
					if Prompt == nil then
						temporarilyhide()
					end
					if Prompt[1] == true then
						DeleteNameAddress(name1[1])
						DeleteNameAddress(name1[2])
						DeleteNameAddress(name1[3])
						valueFromClass("BattleLongSwordLogicSetup")	
						LongSword_currentA = 1			
					end
					LongSword()
				end						
			Hammer_SelectedA = {"\n[1]   チャージ速度\n", "\n[ON]   チャージ速度  =  最速\n"}
			-- [1-2-5] ハンマー
			function Hammer()
				gg.setVisible(false)
				HammerMenu = gg.choice({
					Hammer_SelectedA[ChargeSpeed_currentX],			
					"\n[←]   もどる"
				}, nil, "メインメニュー/装備/武器毎の性質/\n\nハンマー")
				if HammerMenu == nil then
					temporarilyhide()	
				elseif HammerMenu == 1 then
					if ChargeSpeed_currentX == 1 then
						Patch("libil2cpp.so",0x1A64488,"00 10 40 BC")
						ChargeSpeed_currentX = 2
					elseif ChargeSpeed_currentX == 2 then
						Patch("libil2cpp.so",0x1A64488,"00 98 41 BD")
						ChargeSpeed_currentX = 1
					end
				elseif HammerMenu == 2 then		
					WeaponProperty()
				end
				Hammer()
			end				
			-- [1-2-6] 弓		
			Bow_currentB = 1
			Bow_currentC = 1
			Bow_SelectedA = {"\n[1]   チャージ速度\n", "\n[ON]   チャージ速度  =  最速\n"}			
			Bow_SelectedB = {"\n[2]   矢の種類*\n", "\n[ON]   矢の種類*  =  連射\n", "\n[ON]   矢の種類*  =  拡散\n", "\n[ON]   矢の種類*  =  貫通\n"}
			Bow_SelectedC = {"\n[3]   矢のレベル*\n", "\n[ON]   矢のレベル*  =  Lv1\n", "\n[ON]   矢のレベル*  =  Lv2\n", "\n[ON]   矢のレベル*  =  Lv3\n", "\n[ON]   矢のレベル*  =  Lv4\n"}	
			Bow_SelectedB_Selected = {false, false, false}
			Bow_SelectedC_Selected = {false, false, false, false}			
			function Bow()
				gg.setVisible(false)
				BowMenu = gg.choice({
					Bow_SelectedA[ChargeSpeed_currentX],
					Bow_SelectedB[Bow_currentB],
					Bow_SelectedC[Bow_currentC],
					"\n[~]   アドレスの再取得\n",					
					"\n[←]   もどる"
				}, nil, "メインメニュー/装備/武器毎の性質/\n\n弓")
				if BowMenu == nil then
					temporarilyhide()
				elseif BowMenu == 1 then
					if ChargeSpeed_currentX == 1 then
						Patch("libil2cpp.so",0x1A64488,"00 10 40 BC")
						ChargeSpeed_currentX = 2
					elseif ChargeSpeed_currentX == 2 then
						Patch("libil2cpp.so",0x1A64488,"00 98 41 BD")
						ChargeSpeed_currentX = 1
					end				
				elseif BowMenu >= 2 and BowMenu <= 3 then
					LoadNameAddress("ArrowSpec_Bow")
					local count = gg.getResultsCount(9999)
					if count >= 1 then
					else
						valueFromClass("ArrowSpec")		
						applyoffset(0x18, gg.TYPE_DWORD)
						gg.refineNumber("1~3", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)	
						AddNameAddress("ArrowSpec_Bow")
					end
					gg.getResults(9999)
					if BowMenu == 2 then
						gg.setVisible(false)
						local menu = gg.choice({
							(Bow_currentB_Selected[1] and "\n[ON]   連射\n" or "\n[1]   連射\n"),
							(Bow_currentB_Selected[1] and "\n[ON]   拡散\n" or "\n[2]   拡散\n"),
							(Bow_currentB_Selected[1] and "\n[ON]   貫通\n" or "\n[3]   貫通\n"),
						}, nil, "メインメニュー/装備/武器毎の性質/弓/\n\n矢の種類*")
						if menu == nil then	
						elseif menu >= 1 and menu<= 3 then
							for i = 1, 3 do
								Bow_currentB_Selected[i] = false
							end
							Bow_currentB_Selected[menu] = true							
							local chosenValue = tostring(menu)
							gg.editAll(chosenValue, gg.TYPE_DWORD)		
							Bow_currentB = chosenValue + 1
						end
					elseif BowMenu == 3 then		
						applyoffset(0x4, gg.TYPE_DWORD)
						gg.setVisible(false)
						local menu = gg.choice({
							(Bow_SelectedC_Selected[1] and "\n[ON]   Lv1\n" or "\n[1]   Lv1\n"),
							(Bow_SelectedC_Selected[2] and "\n[ON]   Lv2\n" or "\n[2]   Lv2\n")
							(Bow_SelectedC_Selected[3] and "\n[ON]   Lv3\n" or "\n[3]   Lv3\n")
							(Bow_SelectedC_Selected[4] and "\n[ON]   Lv4\n" or "\n[4]   Lv4\n")						
						}, nil, "メインメニュー/装備/武器毎の性質/弓/\n\n矢のレベル*")
						if menu == nil then	
						elseif menu >= 1 and menu<= 4 then
							for i = 1, 4 do
								Bow_SelectedC_Selected[i] = false
							end	
							Bow_SelectedC_Selected[menu] = true	
							local chosenValue = tostring(menu)
							gg.editAll(chosenValue, gg.TYPE_DWORD)		
							Bow_currentC = chosenValue + 1
						end
					end
				elseif BowMenu == 4 then			
					Refresh_Bow()
				elseif BowMenu == 5 then		
					WeaponProperty()
				end
				Bow()
			end	
				-- [1-2-6-3] アドレスの再取得
				function Refresh_Bow()		
					local name1 = {"_Qapplyfix_ArrowSpec", "_Abaseaccuracy_ArrowSpec", "ArrowSpec_Bow"}
					local Prompt = gg.prompt({
						"\n[2]   矢の種類*\n[3]   矢のレベル*\n"
					}, {false}, {"checkbox"})
					if Prompt == nil then
						temporarilyhide()
					end
					if Prompt[1] == true then
						DeleteNameAddress(name1[1])
						DeleteNameAddress(name1[2])
						DeleteNameAddress(name1[3])
						valueFromClass("ArrowSpec")	
						Bow_currentA = 1			
						Bow_currentB = 1	
						Bow_SelectedA_Selected = {false, false, false}
						Bow_SelectedB_Selected = {false, false, false, false}
					end
					Bow()
				end		
			-- [1-2-7] ボウガン
			Bowgun_currentA = 1		
			Bowgun_currentB = 1	
			Bowgun_currentC = 1		
			Bowgun_currentD = 1	
			Bowgun_currentE = 1		
			Bowgun_currentF = 1	
			Bowgun_SelectedA = {"\n[1]   反動パターン*\n", "\n[ON]   反動パターン*  =  小\n", "\n[ON]   反動パターン*  =  中\n", "\n[ON]   反動パターン*  =  大\n", "\n[ON]   反動パターン*  =  特大\n"}
			Bowgun_SelectedB = {"\n[2]   装填パターン*\n", "\n[ON]   装填パターン*  =  小\n", "\n[ON]   装填パターン*  =  中\n", "\n[ON]   装填パターン*  =  大\n", "\n[ON]   装填パターン*  =  特大\n"}					
			Bowgun_SelectedC = {"\n[3]   装填数*\n", "\n[ON]   装填数*  =  5発\n", "\n[ON]   装填数*  =  50発\n", "\n[ON]   装填数*  =  100発\n"}
			Bowgun_SelectedD = {"\n[4]   弾の種類*\n", "\n[ON]   弾の種類*  =  通常弾\n", "\n[ON]   弾の種類*  =  貫通弾\n", "\n[ON]   弾の種類*  =  散弾\n", "\n[ON]   弾の種類*  =  徹甲榴弾\n", "\n[ON]   弾の種類*  =  炸裂弾\n"}		
			Bowgun_SelectedE = {"\n[5]   弾の属性種類*\n", "\n[ON]   弾の属性種類*  =  無属性\n", "\n[ON]   弾の属性種類*  =  火属性\n", "\n[ON]   弾の属性種類*  =  水属性\n", "\n[ON]   弾の属性種類*  =  雷属性\n", "\n[ON]   弾の属性種類*  =  氷属性\n", "\n[ON]   弾の属性種類*  =  龍属性\n", "\n[ON]   弾の属性種類*  =  毒属性\n", "\n[ON]   弾の属性種類*  =  麻痺属性\n", "\n[ON]   弾の属性種類*  =  睡眠属性\n", "\n[ON]   弾の属性種類*  =  爆破属性\n"}
			Bowgun_SelectedF = {"\n[6]   弾のレベル*\n", "\n[ON]   弾のレベル*  =  Lv1\n", "\n[ON]   弾のレベル*  =  Lv2\n", "\n[ON]   弾のレベル*  =  Lv3\n"}		
			Bowgun_SelectedA_Selected = {false, false, false, false}
			Bowgun_SelectedB_Selected = {false, false, false, false} 
			Bowgun_SelectedC_Selected = {false, false, false}
			Bowgun_SelectedD_Selected = {false, false, false, false, false} 
			Bowgun_SelectedE_Selected = {false, false, false, false, false, false, false, false, false, false} 
			Bowgun_SelectedF_Selected = {false, false, false}			
			function Bowgun()
				gg.setVisible(false)
				BowgunMenu = gg.choice({
					Bowgun_SelectedA[Bowgun_currentA],
					Bowgun_SelectedB[Bowgun_currentB],
					Bowgun_SelectedC[Bowgun_currentC],
					Bowgun_SelectedD[Bowgun_currentD],
					Bowgun_SelectedE[Bowgun_currentE],
					Bowgun_SelectedF[Bowgun_currentF],
					"\n[~]   アドレスの再取得\n",					
					"\n[←]   もどる"
				}, nil, "メインメニュー/装備/武器毎の性質/\n\nボウガン")
				if BowgunMenu == nil then
					temporarilyhide()
					Bowgun()
				elseif BowgunMenu >= 1 and BowgunMenu <= 6 then
					LoadNameAddress("BowgunAmmoSpec_Bowgun")
					local count = gg.getResultsCount(9999)
					if count >= 1 then
					else
						valueFromClass("BowgunAmmoSpec")		
						applyoffset(0x18, gg.TYPE_DWORD)
						gg.refineNumber("1~4", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)	
						AddNameAddress("BowgunAmmoSpec_Bowgun")
					end
					gg.getResults(9999)
					if BowgunMenu == 1 then
						gg.setVisible(false)
						local menu = gg.choice({
							(Bowgun_SelectedA_Selected[1] and "\n[ON]   小\n" or "\n[1]   小\n"),
							(Bowgun_SelectedA_Selected[2] and "\n[ON]   中\n" or "\n[2]   中\n"),
							(Bowgun_SelectedA_Selected[3] and "\n[ON]   大\n" or "\n[3]   大\n"),
							(Bowgun_SelectedA_Selected[4] and "\n[ON]   特大\n" or "\n[4]   特大\n"),						
						}, nil, "メインメニュー/装備/武器毎の性質/ボウガン/\n\n反動パターン*")
						if menu == nil then	
						elseif menu >= 1 and menu<= 4 then
							for i = 1, 4 do
								Bowgun_SelectedA_Selected[i] = false
							end		
							Bowgun_SelectedA_Selected[menu] = true	
							local chosenValue = tostring(menu)
							gg.editAll(chosenValue, gg.TYPE_DWORD)		
							Bowgun_currentA = chosenValue + 1
						end
					elseif BowgunMenu == 2 then		
						applyoffset(0x4, gg.TYPE_DWORD)
						gg.setVisible(false)
						local menu = gg.choice({
							(Bowgun_SelectedB_Selected[1] and "\n[ON]   小\n" or "\n[1]   小\n"),
							(Bowgun_SelectedB_Selected[2] and "\n[ON]   中\n" or "\n[2]   中\n"),
							(Bowgun_SelectedB_Selected[3] and "\n[ON]   大\n" or "\n[3]   大\n"),
							(Bowgun_SelectedB_Selected[4] and "\n[ON]   特大\n" or "\n[4]   特大\n"),						
						}, nil, "メインメニュー/装備/武器毎の性質/ボウガン/\n\n装填パターン*")
						if menu == nil then	
						elseif menu >= 1 and menu<= 4 then
							for i = 1, 4 do
								Bowgun_SelectedB_Selected[i] = false
							end		
							Bowgun_SelectedB_Selected[menu] = true							
							local chosenValue = tostring(menu)
							gg.editAll(chosenValue, gg.TYPE_DWORD)		
							Bowgun_currentB = chosenValue + 1
						end
					elseif BowgunMenu == 3 then							
						applyoffset(0x8, gg.TYPE_DWORD)
						gg.setVisible(false)
						local Value = {"5", "50", "100"}
						local menu = gg.choice({
							(Bowgun_SelectedC_Selected[1] and "\n[ON]   5発\n" or "\n[1]   5発\n"),
							(Bowgun_SelectedC_Selected[2] and "\n[ON]   50発\n" or "\n[2]   50発\n"),
							(Bowgun_SelectedC_Selected[3] and "\n[ON]   100発\n" or "\n[3]   100発\n"),					
						}, nil, "メインメニュー/装備/武器毎の性質/ボウガン/\n\n装填数*")
						if menu == nil then	
						elseif menu >= 1 and menu<= 3 then
							for i = 1, 3 do
								Bowgun_SelectedC_Selected[i] = false
							end		
							Bowgun_SelectedC_Selected[menu] = true							
							local chosenValue = tostring(menu)
							gg.editAll(Value[menu], gg.TYPE_DWORD)		
							Bowgun_currentC = chosenValue + 1
						end
					elseif BowgunMenu >= 4 and BowgunMenu <= 6 then
						applyoffset(-0x8, gg.TYPE_DWORD)
						MoveThePointer()			
						if BowgunMenu == 4 then	
							applyoffset(0x14, gg.TYPE_DWORD)
							gg.setVisible(false)
							local menu = gg.choice({
								(Bowgun_SelectedD_Selected[1] and "\n[ON]   通常弾\n" or "\n[1]   通常弾\n"),
								(Bowgun_SelectedD_Selected[2] and "\n[ON]   貫通弾\n" or "\n[2]   貫通弾\n"),
								(Bowgun_SelectedD_Selected[3] and "\n[ON]   散弾\n" or "\n[3]   散弾\n"),		
								(Bowgun_SelectedD_Selected[4] and "\n[ON]   徹甲榴弾\n" or "\n[4]   徹甲榴弾\n"),
								(Bowgun_SelectedD_Selected[5] and "\n[ON]   炸裂弾\n" or "\n[5]   炸裂弾\n"),										
							}, nil, "メインメニュー/装備/武器毎の性質/ボウガン/\n\n弾の種類*")
							if menu == nil then	
							elseif menu >= 1 and menu<= 5 then
								for i = 1, 5 do
									Bowgun_SelectedD_Selected[i] = false
								end		
								Bowgun_SelectedD_Selected[menu] = true	
								local chosenValue = tostring(menu)
								gg.editAll(chosenValue, gg.TYPE_DWORD)		
								Bowgun_currentD = chosenValue + 1							
							end
						elseif BowgunMenu == 5 then
							applyoffset(0x18, gg.TYPE_DWORD)
							gg.setVisible(false)
							local menu = gg.choice({
								(Bowgun_SelectedE_Selected[1] and "\n[ON]   無属性\n" or "\n[1]   無属性\n"),
								(Bowgun_SelectedE_Selected[2] and "\n[ON]   火属性\n" or "\n[2]   火属性\n"),
								(Bowgun_SelectedE_Selected[3] and "\n[ON]   水属性\n" or "\n[3]   水属性\n"),		
								(Bowgun_SelectedE_Selected[4] and "\n[ON]   雷属性\n" or "\n[4]   雷属性\n"),
								(Bowgun_SelectedE_Selected[5] and "\n[ON]   氷属性\n" or "\n[5]   氷属性\n"),			
								(Bowgun_SelectedE_Selected[6] and "\n[ON]   龍属性\n" or "\n[6]   龍属性\n"),
								(Bowgun_SelectedE_Selected[7] and "\n[ON]   毒属性\n" or "\n[7]   毒属性\n"),		
								(Bowgun_SelectedE_Selected[8] and "\n[ON]   麻痺属性\n" or "\n[8]   麻痺属性\n"),
								(Bowgun_SelectedE_Selected[9] and "\n[ON]   睡眠属性\n" or "\n[9]   睡眠属性\n"),	
								(Bowgun_SelectedE_Selected[10] and "\n[ON]   爆破属性\n" or "\n[10]   爆破属性\n"),									
							}, nil, "メインメニュー/装備/武器毎の性質/ボウガン/\n\n弾の属性種類*")
							if menu == nil then	
							elseif menu >= 1 and menu<= 10 then
								for i = 1, 10 do
									Bowgun_SelectedE_Selected[i] = false
								end									
								Bowgun_SelectedE_Selected[menu] = true	
								local chosenValue = tostring(menu)
								gg.editAll(chosenValue, gg.TYPE_DWORD)		
								Bowgun_currentE = chosenValue + 1	
							end
						elseif BowgunMenu == 6 then	
							applyoffset(0x1C, gg.TYPE_DWORD)
							gg.setVisible(false)
							local menu = gg.choice({
								(Bowgun_SelectedF_Selected[1] and "\n[ON]   Lv1\n" or "\n[1]   Lv1\n"),
								(Bowgun_SelectedF_Selected[2] and "\n[ON]   Lv2\n" or "\n[2]   Lv2\n"),
								(Bowgun_SelectedF_Selected[3] and "\n[ON]   Lv3\n" or "\n[3]   Lv3\n"),					
							}, nil, "メインメニュー/装備/武器毎の性質/ボウガン/\n\n弾のレベル*")
							if menu == nil then	
							elseif menu >= 1 and menu<= 3 then
								for i = 1, 3 do
									Bowgun_SelectedF_Selected[i] = false
								end									
								Bowgun_SelectedF_Selected[menu] = true								
								local chosenValue = tostring(menu)
								gg.editAll(chosenValue, gg.TYPE_DWORD)		
								Bowgun_currentF = chosenValue + 1					
							end
						end
					end
				elseif BowgunMenu == 7 then			
					Refresh_Bowgun()
				elseif BowgunMenu == 8 then		
					WeaponProperty()
				end
				Bowgun()
			end		
				-- [1-2-7-7] アドレスの再取得
				function Refresh_Bowgun()
					local name1 = {"_Qapplyfix_BowgunAmmoSpec", "_Abaseaccuracy_BowgunAmmoSpec", "BowgunAmmoSpec_Bowgun"}
					local Prompt = gg.prompt({
						"\n[1]   反動パターン*\n[2]   装填パターン*\n[3]   装填数*\n[4]   弾の種類*\n[5]   弾の属性種類*\n[6]   弾のレベル*\n"
					}, {false}, {"checkbox"})
					if Prompt == nil then
						temporarilyhide()
					end
					if Prompt[1] == true then
						DeleteNameAddress(name1[1])
						DeleteNameAddress(name1[2])
						DeleteNameAddress(name1[3])
						valueFromClass("BowgunAmmoSpec")	
						Bowgun_currentA = 1		
						Bowgun_currentB = 1	
						Bowgun_currentC = 1		
						Bowgun_currentD = 1	
						Bowgun_currentE = 1		
						Bowgun_currentF = 1	
						Bowgun_SelectedA_Selected = {false, false, false, false}
						Bowgun_SelectedB_Selected = {false, false, false, false} 
						Bowgun_SelectedC_Selected = {false, false, false}
						Bowgun_SelectedD_Selected = {false, false, false, false, false} 
						Bowgun_SelectedE_Selected = {false, false, false, false, false, false, false, false, false, false} 
						Bowgun_SelectedF_Selected = {false, false, false}
					end
					Bowgun()
				end	
		-- [1-3] 全武器の性能
		WeaponSpec_currentD = 1	
		WeaponSpec_SelectedA = {"\n[1]   攻撃力\n"}	
		WeaponSpec_SelectedB = {"\n[2]   属性攻撃力\n"}		
		WeaponSpec_SelectedC = {"\n[3]   会心率\n"}		
		WeaponSpec_SelectedD = {"\n[4]   属性種類\n", "\n[ON]   属性種類  =  無属性\n", "\n[ON]   属性種類  =  火属性\n", "\n[ON]   属性種類  =  水属性\n", "\n[ON]   属性種類  =  雷属性\n", "\n[ON]   属性種類  =  氷属性\n", "\n[ON]   属性種類  =  龍属性\n", "\n[ON]   属性種類  =  毒属性\n", "\n[ON]   属性種類  =  麻痺属性\n", "\n[ON]   属性種類  =  睡眠属性\n", "\n[ON]   属性種類  =  爆破属性\n"}
		WeaponSpec_SelectedA_Selected = {false, false, false, false}
		WeaponSpec_SelectedB_Selected = {false, false, false, false}
		WeaponSpec_SelectedC_Selected = {false, false, false, false}
		WeaponSpec_SelectedD_Selected = {false, false, false, false, false, false, false, false, false, false} 		
		function WeaponSpec()
			gg.setVisible(false)	
			WeaponSpecMenu = gg.choice({
				WeaponSpec_SelectedA[1],
				WeaponSpec_SelectedB[1],
				WeaponSpec_SelectedC[1],
				WeaponSpec_SelectedD[WeaponSpec_currentD],
				"\n[←]   もどる"
			}, nil, "メインメニュー/装備/\n\n全武器の性能")	
			if WeaponSpecMenu == nil then
				temporarilyhide()
				WeaponSpec()
			elseif WeaponSpecMenu >= 1 and WeaponSpecMenu <= 3 then
				LoadNameAddress("WeaponLevelSpecSettingsProto_Weapon")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else			
					valueFromClass("WeaponLevelSpecSettingsProto")	
					applyoffset(0x14, gg.TYPE_DWORD)
					gg.refineNumber("1~10,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					AddNameAddress("WeaponLevelSpecSettingsProto_Weapon")
				end
				if WeaponSpecMenu == 1 then
					applyoffset(0x8, gg.TYPE_DWORD)	
					gg.setVisible(false)
					local Value = {"3,000", "12,000", "3,000,000"}
					local menu = gg.choice({
						(WeaponSpec_SelectedA_Selected[1] and "\n[ON]   "..Value[1].."\n" or "\n[1]   "..Value[1].."\n"),
						(WeaponSpec_SelectedA_Selected[2] and "\n[ON]   "..Value[2].."\n" or "\n[2]   "..Value[2].."\n"),
						(WeaponSpec_SelectedA_Selected[3] and "\n[ON]   "..Value[3].."\n" or "\n[3]   "..Value[3].."\n"),
						(WeaponSpec_SelectedA_Selected[4] and "\n[ON]   任意の値\n" or "\n[4]   任意の値\n"),						
					}, nil, "メインメニュー/装備/全武器の性能/\n\n攻撃力")
					if menu == nil then	
					elseif menu >= 1 and menu<= 4 then
						for i = 1, 4 do
							WeaponSpec_SelectedA_Selected[i] = false
						end		
						WeaponSpec_SelectedA_Selected[menu] = true						
						if menu >= 1 and menu<= 3 then
							local chosenValue = tostring(menu)
							gg.editAll(Value[menu], gg.TYPE_DWORD)		
							WeaponSpec_SelectedA[1] = "\n[ON]   攻撃力  =  "..Value[menu].."\n"					
						elseif menu == 4 then
							while true do
								gg.setVisible(false)
								local val = gg.prompt({[1] = "全武器の攻撃力を変更 #Dword型\n\n[  0 ~   ]"}, {[1] = ""}, {"number"})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_DWORD)	
									WeaponSpec_SelectedA[1] = "\n[ON]   攻撃力  =  "..val[1].."\n"
									break
								else
									temporarilyhide()
								end
							end					
						end
					end
				elseif WeaponSpecMenu == 2 then
					applyoffset(0xC, gg.TYPE_DWORD)	
					gg.setVisible(false)
					local Value = {"1,500", "6,000", "1,500,000"}
					local menu = gg.choice({
						(WeaponSpec_SelectedB_Selected[1] and "\n[ON]   "..Value[1].."\n" or "\n[1]   "..Value[1].."\n"),
						(WeaponSpec_SelectedB_Selected[2] and "\n[ON]   "..Value[2].."\n" or "\n[2]   "..Value[2].."\n"),
						(WeaponSpec_SelectedB_Selected[3] and "\n[ON]   "..Value[3].."\n" or "\n[3]   "..Value[3].."\n"),
						(WeaponSpec_SelectedB_Selected[4] and "\n[ON]   任意の値\n" or "\n[4]   任意の値\n"),						
					}, nil, "メインメニュー/装備/全武器の性能/\n\n属性攻撃力")
					if menu == nil then	
					elseif menu >= 1 and menu<= 4 then
						for i = 1, 4 do
							WeaponSpec_SelectedB_Selected[i] = false
						end		
						WeaponSpec_SelectedB_Selected[menu] = true						
						if menu >= 1 and menu<= 3 then
							local chosenValue = tostring(menu)
							gg.editAll(Value[menu], gg.TYPE_DWORD)			
							WeaponSpec_SelectedB[1] = "\n[ON]   属性攻撃力  =  "..Value[menu].."\n"					
						elseif menu == 4 then
							while true do
								gg.setVisible(false)
								local val = gg.prompt({[1] = "全武器の属性攻撃力を変更 #Dword型\n\n[  0 ~   ]"}, {[1] = ""}, {"number"})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_DWORD)	
									WeaponSpec_SelectedB[1] = "\n[ON]   属性攻撃力  =  "..val[1].."\n"
									break
								else
									temporarilyhide()
								end
							end					
						end
					end
				elseif WeaponSpecMenu == 3 then
					applyoffset(0x10, gg.TYPE_DWORD)	
					gg.setVisible(false)
					local Value = {"0", "30", "100"}
					local menu = gg.choice({
						(WeaponSpec_SelectedC_Selected[1] and "\n[ON]   "..Value[1].."%\n" or "\n[1]   "..Value[1].."%\n"),
						(WeaponSpec_SelectedC_Selected[2] and "\n[ON]   "..Value[2].."\n" or "\n[2]   "..Value[2].."%\n"),
						(WeaponSpec_SelectedC_Selected[3] and "\n[ON]   "..Value[3].."\n" or "\n[3]   "..Value[3].."%\n"),
						(WeaponSpec_SelectedC_Selected[4] and "\n[ON]   任意の値\n" or "\n[4]   任意の値\n"),						
					}, nil, "メインメニュー/装備/全武器の性能/\n\n会心率")
					if menu == nil then	
					elseif menu >= 1 and menu<= 4 then
						for i = 1, 4 do
							WeaponSpec_SelectedC_Selected[i] = false
						end		
						WeaponSpec_SelectedC_Selected[menu] = true						
						if menu >= 1 and menu<= 3 then
							local chosenValue = tostring(menu)
							gg.editAll(Value[menu], gg.TYPE_DWORD)			
							WeaponSpec_SelectedC[1] = "\n[ON]   会心率  =  "..Value[menu].."%\n"				
						elseif menu == 4 then
							while true do
								gg.setVisible(false)
								local val = gg.prompt({[1] = "全武器の会心率を変更 #Dword型\n\n割合%\n[  -100 ~ 100  ]"}, {[1] = ""}, {"number"})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_DWORD)	
									WeaponSpec_SelectedC[1] = "\n[ON]   会心率  =  "..val[1].."%\n"
									break
								else
									temporarilyhide()
								end
							end					
						end
					end				
				end
			elseif WeaponSpecMenu == 4 then
				LoadNameAddress("WeaponSpecSettingsProto_Weapon")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else			
					valueFromClass("WeaponSpecSettingsProto")
					applyoffset(0x14, gg.TYPE_DWORD)
					gg.refineNumber("1~10,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					AddNameAddress("WeaponSpecSettingsProto_Weapon")
				end
				if WeaponSpecMenu == 4 then
					applyoffset(0x8, gg.TYPE_DWORD)	
					gg.setVisible(false)
					local menu = gg.choice({
						(WeaponSpec_SelectedD_Selected[1] and "\n[ON]   無属性\n" or "\n[1]   無属性\n"),
						(WeaponSpec_SelectedD_Selected[2] and "\n[ON]   火属性\n" or "\n[2]   火属性\n"),
						(WeaponSpec_SelectedD_Selected[3] and "\n[ON]   水属性\n" or "\n[3]   水属性\n"),		
						(WeaponSpec_SelectedD_Selected[4] and "\n[ON]   雷属性\n" or "\n[4]   雷属性\n"),
						(WeaponSpec_SelectedD_Selected[5] and "\n[ON]   氷属性\n" or "\n[5]   氷属性\n"),			
						(WeaponSpec_SelectedD_Selected[6] and "\n[ON]   龍属性\n" or "\n[6]   龍属性\n"),
						(WeaponSpec_SelectedD_Selected[7] and "\n[ON]   毒属性\n" or "\n[7]   毒属性\n"),		
						(WeaponSpec_SelectedD_Selected[8] and "\n[ON]   麻痺属性\n" or "\n[8]   麻痺属性\n"),
						(WeaponSpec_SelectedD_Selected[9] and "\n[ON]   睡眠属性\n" or "\n[9]   睡眠属性\n"),	
						(WeaponSpec_SelectedD_Selected[10] and "\n[ON]   爆破属性\n" or "\n[10]   爆破属性\n"),							
					}, nil, "メインメニュー/装備/全武器の性能/\n\n属性種類")
					if menu == nil then	
					elseif menu >= 1 and menu<= 10 then
						for i = 1, 10 do
							WeaponSpec_SelectedD_Selected[i] = false
						end		
						WeaponSpec_SelectedD_Selected[menu] = true						
						local chosenValue = tostring(menu)
						gg.editAll(chosenValue, gg.TYPE_DWORD)		
						WeaponSpec_currentD = chosenValue + 1					
					end								
				end
			elseif WeaponSpecMenu == 5 then
				Equipment()
			end
			WeaponSpec()
		end	
		-- [1-4] 全防具の性能
		ArmorSpec_currentC = 1	
		ArmorSpec_SelectedA = {"\n[1]   防御力\n"}	
		ArmorSpec_SelectedB = {"\n[2]   属性防御力\n"}		
		ArmorSpec_SelectedC = {"\n[3]   属性種類\n", "\n[ON]   属性種類  =  無属性\n", "\n[ON]   属性種類  =  火属性\n", "\n[ON]   属性種類  =  水属性\n", "\n[ON]   属性種類  =  雷属性\n", "\n[ON]   属性種類  =  氷属性\n", "\n[ON]   属性種類  =  龍属性\n", "\n[ON]   属性種類  =  毒属性\n", "\n[ON]   属性種類  =  麻痺属性\n", "\n[ON]   属性種類  =  睡眠属性\n", "\n[ON]   属性種類  =  爆破属性\n"}
		ArmorSpec_SelectedA_Selected = {false, false, false, false}
		ArmorSpec_SelectedB_Selected = {false, false, false, false}
		ArmorSpec_SelectedC_Selected = {false, false, false, false, false, false, false, false, false, false} 		
		function ArmorSpec()
			gg.setVisible(false)	
			ArmorSpecMenu = gg.choice({
				ArmorSpec_SelectedA[1],
				ArmorSpec_SelectedB[1],
				ArmorSpec_SelectedC[ArmorSpec_currentC],
				"\n[←]   もどる"
			}, nil, "メインメニュー/装備/\n\n全防具の性能")	
			if ArmorSpecMenu == nil then
				temporarilyhide()
			elseif ArmorSpecMenu >= 1 and ArmorSpecMenu <= 2 then
				LoadNameAddress("ArmorLevelSpecSettingsProto_Armor")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else			
					valueFromClass("ArmorLevelSpecSettingsProto")	
					applyoffset(0x14, gg.TYPE_DWORD)
					gg.refineNumber("1~10,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					AddNameAddress("ArmorLevelSpecSettingsProto_Armor")
				end
				if ArmorSpecMenu == 1 then
					applyoffset(0x8, gg.TYPE_DWORD)	
					gg.setVisible(false)
					local Value = {"200", "800", "200,000"}
					local menu = gg.choice({
						(ArmorSpec_SelectedA_Selected[1] and "\n[ON]   "..Value[1].."\n" or "\n[1]   "..Value[1].."\n"),
						(ArmorSpec_SelectedA_Selected[2] and "\n[ON]   "..Value[2].."\n" or "\n[2]   "..Value[2].."\n"),
						(ArmorSpec_SelectedA_Selected[3] and "\n[ON]   "..Value[3].."\n" or "\n[3]   "..Value[3].."\n"),
						(ArmorSpec_SelectedA_Selected[4] and "\n[ON]   任意の値\n" or "\n[4]   任意の値\n"),						
					}, nil, "メインメニュー/装備/全防具の性能/\n\n防御力")
					if menu == nil then	
					elseif menu >= 1 and menu<= 4 then
						for i = 1, 4 do
							ArmorSpec_SelectedA_Selected[i] = false
						end		
						ArmorSpec_SelectedA_Selected[menu] = true						
						if menu >= 1 and menu<= 3 then
							local chosenValue = tostring(menu)
							gg.editAll(Value[menu], gg.TYPE_DWORD)		
							ArmorSpec_SelectedA[1] = "\n[ON]   防御力  =  "..Value[menu].."\n"					
						elseif menu == 4 then
							while true do
								gg.setVisible(false)
								local val = gg.prompt({[1] = "全防具の防御力を変更 #Dword型\n\n[  0 ~   ]"}, {[1] = ""}, {"number"})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_DWORD)	
									ArmorSpec_SelectedA[1] = "\n[ON]   防御力  =  "..val[1].."\n"
									break
								else
									temporarilyhide()
								end
							end					
						end
					end
				elseif ArmorSpecMenu == 2 then
					applyoffset(0xC, gg.TYPE_DWORD)	
					gg.setVisible(false)
					local Value = {"100", "400", "100,000"}
					local menu = gg.choice({
						(ArmorSpec_SelectedB_Selected[1] and "\n[ON]   "..Value[1].."\n" or "\n[1]   "..Value[1].."\n"),
						(ArmorSpec_SelectedB_Selected[2] and "\n[ON]   "..Value[2].."\n" or "\n[2]   "..Value[2].."\n"),
						(ArmorSpec_SelectedB_Selected[3] and "\n[ON]   "..Value[3].."\n" or "\n[3]   "..Value[3].."\n"),
						(ArmorSpec_SelectedB_Selected[4] and "\n[ON]   任意の値\n" or "\n[4]   任意の値\n"),						
					}, nil, "メインメニュー/装備/全防具の性能/\n\n属性防御力")
					if menu == nil then	
					elseif menu >= 1 and menu<= 4 then
						for i = 1, 4 do
							ArmorSpec_SelectedB_Selected[i] = false
						end		
						ArmorSpec_SelectedB_Selected[menu] = true						
						if menu >= 1 and menu<= 3 then
							local chosenValue = tostring(menu)
							gg.editAll(Value[menu], gg.TYPE_DWORD)			
							ArmorSpec_SelectedB[1] = "\n[ON]   属性防御力  =  "..Value[menu].."\n"					
						elseif menu == 4 then
							while true do
								gg.setVisible(false)
								local val = gg.prompt({[1] = "全防具の属性防御力を変更 #Dword型\n\n[  0 ~   ]"}, {[1] = ""}, {"number"})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_DWORD)	
									ArmorSpec_SelectedB[1] = "\n[ON]   属性防御力  =  "..val[1].."\n"
									break
								else
									temporarilyhide()
								end
							end					
						end
					end
				end
			elseif ArmorSpecMenu == 3 then
				LoadNameAddress("ArmorSpecSettingsProto_Armor")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else			
					valueFromClass("ArmorSpecSettingsProto")
					applyoffset(0x14, gg.TYPE_DWORD)
					gg.refineNumber("1~10,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					AddNameAddress("ArmorSpecSettingsProto_Armor")
				end
				if ArmorSpecMenu == 3 then
					applyoffset(0x8, gg.TYPE_DWORD)	
					gg.setVisible(false)
					local menu = gg.choice({
						(ArmorSpec_SelectedC_Selected[1] and "\n[ON]   無属性\n" or "\n[1]   無属性\n"),
						(ArmorSpec_SelectedC_Selected[2] and "\n[ON]   火属性\n" or "\n[2]   火属性\n"),
						(ArmorSpec_SelectedC_Selected[3] and "\n[ON]   水属性\n" or "\n[3]   水属性\n"),		
						(ArmorSpec_SelectedC_Selected[4] and "\n[ON]   雷属性\n" or "\n[4]   雷属性\n"),
						(ArmorSpec_SelectedC_Selected[5] and "\n[ON]   氷属性\n" or "\n[5]   氷属性\n"),			
						(ArmorSpec_SelectedC_Selected[6] and "\n[ON]   龍属性\n" or "\n[6]   龍属性\n"),
						(ArmorSpec_SelectedC_Selected[7] and "\n[ON]   毒属性\n" or "\n[7]   毒属性\n"),		
						(ArmorSpec_SelectedC_Selected[8] and "\n[ON]   麻痺属性\n" or "\n[8]   麻痺属性\n"),
						(ArmorSpec_SelectedC_Selected[9] and "\n[ON]   睡眠属性\n" or "\n[9]   睡眠属性\n"),	
						(ArmorSpec_SelectedC_Selected[10] and "\n[ON]   爆破属性\n" or "\n[10]   爆破属性\n"),							
					}, nil, "メインメニュー/装備/全防具の性能/\n\n属性種類")
					if menu == nil then	
					elseif menu >= 1 and menu<= 10 then
						for i = 1, 10 do
							ArmorSpec_SelectedC_Selected[i] = false
						end		
						ArmorSpec_SelectedC_Selected[menu] = true						
						local chosenValue = tostring(menu)
						gg.editAll(chosenValue, gg.TYPE_DWORD)		
						ArmorSpec_currentC = chosenValue + 1					
					end							
				end
			elseif ArmorSpecMenu == 4 then
				Equipment()
			end
			ArmorSpec()
		end	
		-- [1-6] スキル
		Skill_currentA = 1
		Skill_currentB = 1	
		Skill_currentC = 1				
		Skill_SelectedA = {"\n[1]   スペシャルスキルレベル\n", "\n[ON]   スペシャルスキルレベル  =  Lv1\n", "\n[ON]   スペシャルスキルレベル  =  Lv2\n", "\n[ON]   スペシャルスキルレベル  =  Lv3\n"}		
		Skill_SelectedB = {"\n[3]   ロックオン\n", "\n[ON]   ロックオン  =  有効\n"}
		Skill_SelectedC = {"\n[4]   効果\n", "\n[ON]   効果  =  無効\n"}		
		Skill_currentB_Selected = {false, false, false}
		function Skill()	
		    gg.setVisible(false)	
			SkillMenu = gg.choice({
				"\n[1]   ノーマルスキルの書き換え\n",
				Skill_SelectedA[Skill_currentA],
				Skill_SelectedB[Skill_currentB],
				Skill_SelectedC[Skill_currentC],				
				"\n[←]   もどる"
			}, nil, "メインメニュー/装備/\n\nスキル")	
			if SkillMenu == nil then
				temporarilyhide()
			elseif SkillMenu == 1 then	
				NormalSkillChange()
			elseif SkillMenu == 2 then
				gg.setVisible(false)
				local menu = gg.choice({
					(Skill_SelectedA_Selected[1] and "\n[ON]   Lv1\n" or "\n[1]   Lv1\n"),
					(Skill_SelectedA_Selected[2] and "\n[ON]   Lv2\n" or "\n[2]   Lv2\n"),
					(Skill_SelectedA_Selected[3] and "\n[ON]   Lv3\n" or "\n[3]   Lv3\n"),		
				}, nil, "メインメニュー/装備/スキル/\n\nスペシャルスキルレベル")
				if menu == nil then	
				elseif menu >= 1 and menu<= 3 then
					for i = 1, 3 do
						Skill_SelectedA_Selected[i] = false
					end		
					Skill_SelectedA_Selected[menu] = true						
					local function processNumber(number, resultValue)	
						LoadNameAddress("WeaponSpecSettingsProto_Weapon")
						applyoffset(0x4, gg.TYPE_DWORD)	
						gg.refineNumber(tostring(number), gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
						applyoffset(0x28, gg.TYPE_DWORD)
						MoveThePointer()
						applyoffset(0x10, gg.TYPE_DWORD)
						gg.editAll(tostring(resultValue), gg.TYPE_DWORD)
					end					
					if menu == 1 then
						processNumber(1, 5001)
						processNumber(2, 5101)
						processNumber(3, 7001)
						processNumber(4, 5201)
						processNumber(5, 5301)
						processNumber(7, 7101)
						processNumber(12, 5501)
						processNumber(14, 5401)
					elseif menu == 2 then
						processNumber(1, 5002)
						processNumber(2, 5102)
						processNumber(3, 7002)
						processNumber(4, 5202)
						processNumber(5, 5302)
						processNumber(7, 7102)
						processNumber(12, 5502)
						processNumber(14, 5402)	
					elseif menu == 3 then	
						processNumber(1, 5003)
						processNumber(2, 5103)
						processNumber(3, 7003)
						processNumber(4, 5203)
						processNumber(5, 5303)
						processNumber(7, 7103)
						processNumber(12, 5503)
						processNumber(14, 5403)
					end
					Skill_currentA = chosenValue + 1					
				end													
			elseif SkillMenu == 3 then
				if Skill_currentB == 1 then
					Patch("libil2cpp.so",0x193E9E4,"20 00 80 52")
					Skill_currentB = 2
				elseif Skill_currentB== 2 then
					Patch("libil2cpp.so",0x193E9E4,"E0 03 1F 2A")
					Skill_currentB = 1
				end				
			elseif SkillMenu == 4 then
				if Skill_currentC == 1 then
					Patch("libil2cpp.so",0x193DE5C,"20 00 80 52")
					Skill_currentC = 2
				elseif Skill_currentC== 2 then
					Patch("libil2cpp.so",0x193DE5C,"E0 03 1F 2A")
					Skill_currentC = 1
				end					
			elseif SkillMenu == 5 then
				Equipment()
			end	
			Skill()
		end	
			-- [1-6-1] ノーマルスキル
			NormalSkill_SelectedA = {"\n[1]   武器\n"}
			NormalSkill_SelectedB = {"\n[2]   頭1\n"}
			NormalSkill_SelectedC = {"\n[3]   頭2\n"}
			NormalSkill_SelectedD = {"\n[4]   胴1\n"}
			NormalSkill_SelectedE = {"\n[5]   胴2\n"}
			NormalSkill_SelectedF = {"\n[6]   腕1\n"}
			NormalSkill_SelectedG = {"\n[7]   腕2\n"}
			NormalSkill_SelectedH = {"\n[8]   腰1\n"}
			NormalSkill_SelectedI = {"\n[9]   腰2\n"}
			NormalSkill_SelectedJ = {"\n[10]   脚1\n"}			
			NormalSkill_SelectedK = {"\n[11]   脚2\n"}
			function NormalSkillChange()
				local function movefine1()
    				applyoffset(0x20, gg.TYPE_DWORD)
    				MoveThePointer()
    				applyoffset(0x10, gg.TYPE_DWORD)
    				MoveThePointer()
    				applyoffset(0x20, gg.TYPE_DWORD)
    				MoveThePointer()
    				applyoffset(0x10, gg.TYPE_DWORD)
				end
				local function movefine2()
					applyoffset(0x20, gg.TYPE_DWORD)
    				MoveThePointer()
    				applyoffset(0x10, gg.TYPE_DWORD)
    				MoveThePointer()
    				applyoffset(0x28, gg.TYPE_DWORD)
    				MoveThePointer()
    				applyoffset(0x10, gg.TYPE_DWORD)
				end					
				local function editall()
					local ranges = {{"5000~5503"},{"7000~7103"}} -- (多分不要,SPスキル以外になるようリファインする)
					gg.getResults(9999)
					for _, rangeList in ipairs(ranges) do
						for _, range in ipairs(rangeList) do
							gg.getResults(9999)
							gg.refineNumber(range, gg.TYPE_DWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)
						end
					end
					gg.getResults(9999)
					while true do
						gg.setVisible(false)
						local val = gg.prompt({[1] = "ノーマルスキルを一括変更\n以下を参照しノーマルスキルIDを1つ入力して下さい \n#Dword型\n\nノーマルスキルID:\n*語尾はスキルレベルを表す\n[  105: 体力増強(5),                   205: 攻撃(5), \n   305: 防御(5),                           405: SPゲージ加速(5), \n   505: 毒耐性(5),                       605: 麻痺耐性(5), \n   705: 火耐性(5),                       805: 水耐性(5), \n   905: 氷耐性(5),                     1005: 雷耐性(5), \n 1105: 毒属性強化(5),             1205: 麻痺属性強化, \n 1305: 炎属性強化(5),            1405: 水属性強化(5), \n 1505: 氷属性強化(5),            1605: 雷属性強化(5), \n 1705: 見切り(5),                    1805: 回避距離UP(5), \n 1905: 弱点特攻(5),                2005: 破壊王(5), \n 2205: 精霊の加護(5),            2305: 集中(5),  \n 2403: 体幹強化(3),                 2503: 反動軽減(3), \n 2605: 根性(5),                         2805: 攻めの守勢(5), \n 3005: 連撃(5),                        3105: ガード性能(5), \n 3205: 背水防御(5),                3305: 火事場力(5), \n 3405: 耳栓(5),                        3503: 装填速度(3), \n 3605: ジャスト回避強化(5), \n 3705: 尻上がり(5),                3803: 貫通弾強化(3), \n 3903: 徹甲榴弾強化(3),        4003: 斬裂弾強化(3), \n 4103: 散弾強化(3):4103,      4205: 闇討ち(5), \n 4305: フルチャージ(5),        4505: 超会心(5),   \n 4605: 不屈(5),                        4705: SPスキル威力アップ(5), \n 4805: 風圧耐性(5):4805,     4905: KO術(5), \n 5605: 逆恨み(5),                    5705: ジャスト回避強化[仮](5), \n 5801: ロックオン(1),            5905: 龍属性攻撃強化(5), \n 6001: 団結力【秋のかぼちゃ狩り, \n 6105: ジャスト巧攻(5),        6205: 睡眠攻撃強化(5), \n 6305: 睡眠耐性(5), \n 6405: SPゲージ加速【ジャスト回避】(5), \n 6505: SPゲージ加速【ガード】(5), \n 6605: 軽巧(5),                         6705: 進撃(5), \n 6803: 耐震(3), \n 7201: ハッピーニューイヤー【2024】(1), \n 範囲外の値: なし                                                                          ]"}, {[1] = ""}, {"number"})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							if val[1] == "105" then
								AllNormalSkill = "体力増強 (5)"
							elseif val[1] == "205" then
								AllNormalSkill = "攻撃 (5)"
							elseif val[1] == "305" then
								AllNormalSkill = "防御 (5)"									
							elseif val[1] == "405" then
								AllNormalSkill = "SPゲージ加速 (5)"										
							elseif val[1] == "505" then
								AllNormalSkill = "毒耐性 (5)"										
							elseif val[1] == "605" then
								AllNormalSkill = "麻痺耐性 (5)"
							elseif val[1] == "705" then
								AllNormalSkill = "火耐性 (5)"
							elseif val[1] == "805" then
								AllNormalSkill = "水耐性 (5)"									
							elseif val[1] == "905" then
								AllNormalSkill = "氷耐性 (5)"										
							elseif val[1] == "1005" then
								AllNormalSkill = "雷耐性 (5)"									
							elseif val[1] == "1105" then
								AllNormalSkill = "毒属性強化 (5)"
							elseif val[1] == "1205" then
								AllNormalSkill = "麻痺属性強化 (5)"
							elseif val[1] == "1305" then
								AllNormalSkill = "炎属性強化 (5)"									
							elseif val[1] == "1405" then
								AllNormalSkill = "水属性強化 (5)"										
							elseif val[1] == "1505" then
								AllNormalSkill = "氷属性強化 (5)"										
							elseif val[1] == "1605" then
								AllNormalSkill = "雷属性強化 (5)"
							elseif val[1] == "1705" then
								AllNormalSkill = "見切り (5)"
							elseif val[1] == "1805" then
								AllNormalSkill = "回避距離UP (5)"									
							elseif val[1] == "1905" then
								AllNormalSkill = "弱点特攻 (5)"										
							elseif val[1] == "2005" then
								AllNormalSkill = "破壊王 (5)"									
							elseif val[1] == "2205" then
								AllNormalSkill = "精霊の加護 (5)"
							elseif val[1] == "2305" then
								AllNormalSkill = "集中 (5)"
							elseif val[1] == "2403" then
								AllNormalSkill = "体幹強化 (3)"									
							elseif val[1] == "2503" then
								AllNormalSkill = "反動軽減 (3)"										
							elseif val[1] == "2605" then
								AllNormalSkill = "根性 (5)"										
							elseif val[1] == "2805" then
								AllNormalSkill = "攻めの守勢 (5)"
							elseif val[1] == "3005" then
								AllNormalSkill = "連撃 (5)"
							elseif val[1] == "3105" then
								AllNormalSkill = "ガード性能 (5)"									
							elseif val[1] == "3205" then
								AllNormalSkill = "背水防御 (5)"										
							elseif val[1] == "3305" then
								AllNormalSkill = "火事場力 (5)"									
							elseif val[1] == "3405" then
								AllNormalSkill = "耳栓 (5)"
							elseif val[1] == "3503" then
								AllNormalSkill = "装填速度 (3)"
							elseif val[1] == "3605" then
								AllNormalSkill = "ジャスト回避強化 (5)"									
							elseif val[1] == "3705" then
								AllNormalSkill = "尻上がり (5)"										
							elseif val[1] == "3803" then
								AllNormalSkill = "貫通弾強化 (3)"										
							elseif val[1] == "3903" then
								AllNormalSkill = "徹甲榴弾強化 (3)"
							elseif val[1] == "4003" then
								AllNormalSkill = "斬裂弾強化 (3)"
							elseif val[1] == "4103" then
								AllNormalSkill = "散弾強化 (3)"									
							elseif val[1] == "4205" then
								AllNormalSkill = "闇討ち (5)"										
							elseif val[1] == "4305" then
								AllNormalSkill = "フルチャージ (5)"										
							elseif val[1] == "4505" then
								AllNormalSkill = "超会心 (5)"
							elseif val[1] == "4605" then
								AllNormalSkill = "不屈 (5)"									
							elseif val[1] == "4705" then
								AllNormalSkill = "SPスキル威力アップ (5)"										
							elseif val[1] == "4805" then
								AllNormalSkill = "風圧耐性 (5)"									
							elseif val[1] == "4905" then
								AllNormalSkill = "耳栓 (5)"
							elseif val[1] == "5605" then
								AllNormalSkill = "逆恨み (5)"
							elseif val[1] == "5705" then
								AllNormalSkill = "ジャスト回避強化[仮] (5)"									
							elseif val[1] == "5801" then
								AllNormalSkill = "ロックオン (1)"										
							elseif val[1] == "5905" then
								AllNormalSkill = "龍属性攻撃強化 (5)"										
							elseif val[1] == "6001" then
								AllNormalSkill = "団結力【秋のかぼちゃ狩り】 (1)"
							elseif val[1] == "6105" then
								AllNormalSkill = "ジャスト巧攻 (5)"
							elseif val[1] == "6205" then
								AllNormalSkill = "睡眠攻撃強化 (5)"									
							elseif val[1] == "6305" then
								AllNormalSkill = "睡眠耐性 (5)"										
							elseif val[1] == "6405" then
								AllNormalSkill = "SPゲージ加速【ジャスト回避】 (5)"	
							elseif val[1] == "6505" then
								AllNormalSkill = "SPゲージ加速【ガード】 (5)"										
							elseif val[1] == "6605" then
								AllNormalSkill = "軽巧 (5)"
							elseif val[1] == "6705" then
								AllNormalSkill = "進撃 (5)"
							elseif val[1] == "6803" then
								AllNormalSkill = "耐震 (3)"									
							elseif val[1] == "7201" then
								AllNormalSkill = "ハッピーニューイヤー【2024】 (1)"																			
							else
								AllNormalSkill = "nil"
							end
							break
						else
							temporarilyhide()
						end
					end	
				end	
				gg.setVisible(false)	
				NormalSkillChangeMenu = gg.choice({
					NormalSkill_SelectedA[1],
					NormalSkill_SelectedB[1],
					NormalSkill_SelectedC[1],
					NormalSkill_SelectedD[1],
					NormalSkill_SelectedE[1],
					NormalSkill_SelectedF[1],
					NormalSkill_SelectedG[1],
					NormalSkill_SelectedH[1],
					NormalSkill_SelectedI[1],
					NormalSkill_SelectedJ[1],
					NormalSkill_SelectedK[1],
					"\n[←]    もどる"
				}, nil, "メインメニュー/装備/全武器の性能/\n\nノーマルスキル (防具の指定)")
				if NormalSkillChangeMenu == nil then
					temporarilyhide()
				elseif NormalSkillChangeMenu == 1 then
    				LoadNameAddress("WeaponSpecSettingsProto_Weapon")
    				local count = gg.getResultsCount(9999)
    				if count >= 1 then
    				else			
    					valueFromClass("WeaponSpecSettingsProto")
    					applyoffset(0x14, gg.TYPE_DWORD)
    					gg.refineNumber("1~10,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					AddNameAddress("WeaponSpecSettingsProto_Weapon")
    				end
					applyoffset(0x4, gg.TYPE_DWORD)	
					movefine1()
					editall()
					NormalSkill_SelectedA[1] = "\n[ON]   全武器  =  "..AllNormalSkill.."\n"
				elseif NormalSkillChangeMenu >= 2 and NormalSkillChangeMenu <= 11 then	
					LoadNameAddress("ArmorSpecSettingsProto_Armor")
					local count = gg.getResultsCount(9999)
					if count >= 1 then
					else			
						valueFromClass("ArmorSpecSettingsProto")
						applyoffset(0x14, gg.TYPE_DWORD)
						gg.refineNumber("1~10,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
						AddNameAddress("ArmorSpecSettingsProto_Armor")
					end
					applyoffset(0x4, gg.TYPE_DWORD)	
					if NormalSkillChangeMenu == 2 then
						gg.refineNumber("1", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine1()
    					editall()
						NormalSkill_SelectedB[1] = "\n[ON]   頭1  =  "..AllNormalSkill.."\n"
    				elseif NormalSkillChangeMenu == 3 then
  						gg.refineNumber("1", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine2()
    					editall()	
						NormalSkill_SelectedC[1] = "\n[ON]   頭2  =  "..AllNormalSkill.."\n"
    				elseif NormalSkillChangeMenu == 4 then
    					gg.refineNumber("2", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine1()
    					editall()
						NormalSkill_SelectedD[1] = "\n[ON]   胴1  =  "..AllNormalSkill.."\n"
    				elseif NormalSkillChangeMenu == 5 then
    					gg.refineNumber("2", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine2()
    					editall()
						NormalSkill_SelectedE[1] = "\n[ON]   胴2  =  "..AllNormalSkill.."\n"
    				elseif NormalSkillChangeMenu == 6 then
    					gg.refineNumber("3", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine1()
						editall()
						NormalSkill_SelectedF[1] = "\n[ON]   腕1  =  "..AllNormalSkill.."\n"
    				elseif NormalSkillChangeMenu == 7 then	
    					gg.refineNumber("3", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine2()
    					editall()
						NormalSkill_SelectedG[1] = "\n[ON]   腕2  =  "..AllNormalSkill.."\n"
    				elseif NormalSkillChangeMenu == 8 then
    					gg.refineNumber("4", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine1()
    					editall()
						NormalSkill_SelectedH[1] = "\n[ON]   腰1  =  "..AllNormalSkill.."\n"
    				elseif NormalSkillChangeMenu == 9 then
    					gg.refineNumber("4", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine2()
    					editall()
						NormalSkill_SelectedI[1] = "\n[ON]   腰2  =  "..AllNormalSkill.."\n"
    				elseif NormalSkillChangeMenu == 10 then
						gg.refineNumber("5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine1()
    					editall()
						NormalSkill_SelectedJ[1] = "\n[ON]   脚1  =  "..AllNormalSkill.."\n"
    				elseif NormalSkillChangeMenu == 11 then
    					gg.refineNumber("5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    					movefine2()
    					editall()
						NormalSkill_SelectedK[1] = "\n[ON]   脚2  =  "..AllNormalSkill.."\n"
    				end					
			    elseif NormalSkillChangeMenu == 12 then
					Skill()	
				end
				NormalSkillChange()
			end					
	-- [2] ハンター
	function Hunter()
		gg.setVisible(false)	
		HunterMenu = gg.choice({
			"\n[1]   動作\n",	
			"\n[2]   体力\n",
			"\n[3]   ダメージ\n",			
			"\n[4]   戦闘時\n",		
			"\n[5]   耐性\n",		
			"\n[6]   攻撃変数の書き換え\n",					
			"\n[←]    もどる"
		}, nil, "メインメニュー/\n\nハンター")
		if HunterMenu == nil then
			temporarilyhide()	
		elseif HunterMenu == 1 then		
			HunterMotion()
		elseif HunterMenu == 2 then		
			HunterHealth()
		elseif HunterMenu == 3 then	
			HunterDamage()
		elseif HunterMenu == 4 then	
			HunterBattle()		
		elseif HunterMenu == 5 then		
			HunterResistance()
		elseif HunterMenu == 6 then	
			HunterAttackParam()			
		elseif HunterMenu == 7 then		
			Main()
		end
		Hunter()
	end
		-- [2-1] 動作
		HunterMotion_currentC = 1
		HunterMotion_SelectedA = {"\n[1]   速度\n"}
		HunterMotion_SelectedB = {"\n[2]   攻撃の挙動 (武器)*\n"}
		HunterMotion_SelectedC = {"\n[3]   ダメージリアクション\n", "\n[ON]   ダメージリアクション  =  無効\n"}
		HunterMotion_SelectedA_Selected = {false, false, false, false}
		HunterMotion_SelectedB_Selected = {false}
		function HunterMotion()
			gg.setVisible(false)
			HunterMotionMenu = gg.choice({
				HunterMotion_SelectedA[1],
				HunterMotion_SelectedB[1],				
				HunterMotion_SelectedC[HunterMotion_currentC],
				"\n[~]   アドレスの再取得\n",
				"\n[←]    もどる"
			}, nil, "メインメニュー/ハンター\n\n動作")
			if HunterMotionMenu == nil then
				temporarilyhide()
				HunterMotion()
			elseif HunterMotionMenu == 1 then	
				LoadNameAddress("MotionController_HunterSpeedSpeed")
				local count = gg.getResultsCount()
				if count >= 1 then
					MotionController_HunterSpeed()
				else
					LoadNameAddress("MotionController_MonsterSpeedSpeed")
					local count = gg.getResultsCount()
					if count >= 1 then
					else
						valueFromClass("MotionController")
						applyoffset(0x28, gg.TYPE_FLOAT)
						gg.refineNumber("0~100", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
						AddNameAddress("MotionController_MonsterSpeedSpeed")
					end
					gg.refineNumber("0.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
					local count = gg.getResultsCount()
					if count == 1 then
						AddNameAddress("MotionController_HunterSpeedSpeed")
					else
						LoadNameAddress("MotionController_MonsterSpeedSpeed")
						gg.refineNumber("0.5~1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
						local choice = gg.alert("メインメニュー/ハンター/動作\n\n速度\n\nアドレスが特定出来ない為,手動操作が必要\n\n以下の手順に従って下さい\n[STEP1] モンスター動作速度の設定\n[STEP2] 戦闘画面への出入り\n\n(続行する場合は画面外をタップ)", "[←]    もどる")
						if choice == 1 then
							HunterMotion()
						end
						while true do
							gg.setVisible(false)
							local MonsterSpeedValues = {"1.0001","0","5"}	
							MonsterMotionSpeedMenuHunter = gg.choice({
								"\n[1]   デフォルト",
								"\n[2]   凍結",
								"\n[3]   5倍"
							},nil,"メインメニュー/ハンター/動作/\n\n速度\n\n->[STEP1] モンスター,オトモ動作速度の設定")        				
							if MonsterMotionSpeedMenuHunter == nil then
							else
								if MonsterMotionSpeedMenuHunter >= 1 and MonsterMotionSpeedMenuHunter <= 3 then
									local chosenValue = MonsterSpeedValues[MonsterMotionSpeedMenuHunter]
									gg.getResults(9999)
									gg.editAll(chosenValue, gg.TYPE_FLOAT)
									break
								end
							end
						end
						gg.alert("メインメニュー/ハンター/動作/\n\n速度\n\n->[STEP2] 戦闘画面への出入り","")
						while true do
							temporarilyhide()
							gg.setVisible(false)
							local choice = gg.alert("戦闘画面への出入りを済ませましたか？\n\n(準備し直す場合は画面外をタップ)","はい")
							if choice == 1 then
								break
							end
						end
						gg.refineNumber("0.5~1", gg.TYPE_FLOAT, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)	
						AddNameAddress("MotionController_HunterSpeedSpeed")
					end
				end
				gg.getResults(9999)
				local Value = {"1", "5", "50"}
				gg.setVisible(false)
				local menu = gg.choice({
					(HunterMotion_SelectedA_Selected[1] and "\n[ON]   デフォルト\n" or "\n[1]   デフォルト\n"),
					(HunterMotion_SelectedA_Selected[2] and "\n[ON]   5倍\n" or "\n[2]   5倍\n"),
					(HunterMotion_SelectedA_Selected[3] and "\n[ON]   50倍\n" or "\n[3]   50倍\n"),
					(HunterMotion_SelectedA_Selected[4] and "\n[ON]   任意の値\n" or "\n[4]   任意の値\n"),
					"\n[←]    もどる"
				}, nil, "メインメニュー/ハンター/動作/\n\n速度")
				if menu == nil then
				elseif menu >= 1 and menu <= 4 then
					for i = 1, 4 do
						HunterMotion_SelectedA_Selected[i] = false
					end
					HunterMotion_SelectedA_Selected[menu] = true				
					if menu >= 1 and menu <= 3 then
						for _, result in ipairs(results) do
							gg.addListItems({{
							address = result.address,
							flags = gg.TYPE_FLOAT,
							value = Value[menu],
							freeze = true,
							name = "MotionController_HunterSpeedSpeed"
							}})
						end
						HunterMotion_SelectedA[1] = "\n[ON]   速度  =  "..Value[menu].."倍\n"
					elseif menu == 4 then
						while true do
							gg.setVisible(false)
							local val = gg.prompt({[1] = "ハンターの動作速度を変更 #Float型\n\n倍率, デフォ: 1\n[  0 ~ 1000  ]"}, {[1] = ""})
							if val and val[1] ~= nil then
								for _, result in ipairs(results) do
									gg.addListItems({{
									address = result.address,
									flags = gg.TYPE_FLOAT,
									value = tonumber(val[1]),
									freeze = true,
									name = "MotionController_HunterSpeedSpeed"
									}})
								end
								HunterMotion_SelectedA[1] = "\n[ON]   速度  =  "..val[1].."倍\n"
								break
							else
								temporarilyhide()
							end
						end
					end
				end
			elseif HunterMotionMenu == 2 then
    			LoadNameAddress("_Abaseaccuracy_HunterWeapon")
    			local count = gg.getResultsCount()
    			if count == 0 then
    			    valueFromClass("HunterWeapon")
    			else
    			    MoveThePointer()
    			end
				applyoffset(0x14, gg.TYPE_DWORD)
				gg.refineNumber("119~121", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
				applyoffset(0x4, gg.TYPE_DWORD)
					while true do
						gg.setVisible(false)
						local val = gg.prompt({[1] = "現在装備している武器の番号を入力して下さい\n#Dword型\n\n   0: 大剣,       1: 片手剣,       2: 双剣,       3: 太刀, \n   4: ハンマー,       5: 狩猟笛,       6: ランス,       \n   7: ガンランス,       8: スラッシュアックス, \n   9: チャージアックス,       10: 昆虫棍,       11: 弓, \n 12: ヘビーボウガン,       13: ライトボウガン\n[  0 ~  13  ]"}, {[1] = ""}, {"number"})
						if val and val[1] ~= nil then
							gg.refineNumber(val[1], gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)									
							break
						else
							temporarilyhide()
						end
					end						
				local count = gg.getResultsCount()
				if count == 0 then
				    gg.alert("エラー\n\n武器の番号が間違っています")
				    HunterMotion()
				end
				gg.getResults(9999)
				gg.setVisible(false)
				local menu = gg.choice({
					(HunterMotion_SelectedB_Selected[1] and "\n[ON]   任意の値\n" or "\n[1]   任意の値\n"),
					"\n[←]    もどる"
				}, nil, "メインメニュー/ハンター/動作\n\n攻撃の挙動 (武器)*")
				if menu == nil then
				elseif menu == 1 then
					while true do
						gg.setVisible(false)
						local val = gg.prompt({[1] = "ハンターの攻撃の挙動(武器)を変更 #Dword型\n\n   0: 大剣,       1: 片手剣,       2: 双剣,       3: 太刀, \n   4: ハンマー,       5: 狩猟笛,       6: ランス,       \n   7: ガンランス,       8: スラッシュアックス, \n   9: チャージアックス,       10: 昆虫棍,       11: 弓, \n 12: ヘビーボウガン,       13: ライトボウガン\n[  0 ~  13  ]"}, {[1] = ""}, {"number"})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							if val == "0" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  大剣\n"
							elseif val == "1" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  片手剣\n"
							elseif val == "2" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  双剣\n"
							elseif val == "3" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  太刀\n"
							elseif val == "4" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  ハンマー\n"
							elseif val == "5" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  狩猟笛\n"
							elseif val == "6" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  ランス\n"
							elseif val == "7" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  ガンランス\n"
							elseif val == "8" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  スラッシュアックス\n"
							elseif val == "9" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  チャージアックス\n"
							elseif val == "10" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  昆虫棍\n"
							elseif val == "11" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  弓\n"
							elseif val == "12" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  ヘビーボウガン\n"
							elseif val == "13" then
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  ライトボウガン\n"
							else
								HunterMotion_SelectedA = "\n[ON]   攻撃の挙動*  =  nil\n"
							end
							break
						else
							temporarilyhide()
						end
					end						
				end
			elseif HunterMotionMenu == 3 then
				if HunterMotion_currentC == 1 then
					Patch("libil2cpp.so",0x193D86C,"20 00 80 52")
					HunterMotion_currentC = 2
				elseif HunterMotion_currentC == 2 then
					Patch("libil2cpp.so",0x193D86C,"E0 03 1F 2A")
					HunterMotion_currentC = 1
				end				
			elseif HunterMotionMenu == 4 then
				Refresh_HunterMotion()
			elseif HunterMotionMenu == 5 then
				Hunter()
			end
			HunterMotion()
		end		
			-- [2-1-4] アドレスの再取得
			function Refresh_HunterMotion()		
				local name1 = {"_Qapplyfix_MotionController"," _Abaseaccuracy_MotionController", "MotionController_HunterSpeedSpeed", "MotionController_MonsterSpeedSpeed"}
				local name2 = {"_Qapplyfix_HunterWeapon", "_Abaseaccuracy_HunterWeapon"}
				local Prompt = gg.prompt({
					"\n[1]   速度\n",
					"\n[2]   攻撃の挙動 (武器)*\n"
				}, {false, false}, {"checkbox", "checkbox"})
				if Prompt == nil then
					temporarilyhide()
					HunterMotion()
				end
				if Prompt[1] == true then
					DeleteNameAddress(name1[1])
					DeleteNameAddress(name1[2])
					DeleteNameAddress(name1[3])
					DeleteNameAddress(name1[4])
					valueFromClass("MotionController")	
					HunterMotion_SelectedA[1] = "\n[1]   速度 \n"
					HunterMotion_SelectedA_Selected = {false, false, false, false}
				end
				if Prompt[2] == true then
					DeleteNameAddress(name2[1])
					DeleteNameAddress(name2[2])
					valueFromClass("HunterWeapon")	
					HunterMotion_SelectedB = "\n[2]   攻撃の挙動 (武器)*\n"
					HunterMotion_SelectedB_Selected = {false}
				end
				HunterMotion()
			end		
		-- [2-2] 体力
		HunterHealth_currentA = 1
		HunterHealth_currentB = 1
		HunterHealth_currentC = 1
		HunterHealth_SelectedA = {"\n[1]   最大値\n", "\n[ON]   最大値  =  1,500,000\n", "\n[ON]   最大値  =  150\n"}			
		HunterHealth_SelectedB = {"\n[2]   回復速度\n", "\n[ON]   回復速度  =  最大\n"}	
		HunterHealth_SelectedC = {"\n[3]   回復薬による回復量\n", "\n[ON]   回復薬による回復量  =  100%\n"}
		function HunterHealth()	
			gg.setVisible(false)	
			HunterHealthMenu = gg.choice({
				HunterHealth_SelectedA[HunterHealth_currentA],
				HunterHealth_SelectedB[HunterHealth_currentB],
				HunterHealth_SelectedC[HunterHealth_currentC],
				"\n[←]   もどる"
			}, nil, "メインメニュー/ハンター/\n\n体力")	
			if HunterHealthMenu == nil then
				temporarilyhide()
			elseif HunterHealthMenu >= 1 and HunterHealthMenu <= 3 then
				LoadNameAddress("FieldManager_HunterHealth")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else
					valueFromClass("FieldManager")					
					applyoffset(0x250, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x20, gg.TYPE_DOUBLE)
					gg.refineNumber("0.00002~0.00003", gg.TYPE_DOUBLE, false, gg.SIGN_EQUAL, 0, -1, 0)
					AddNameAddress("FieldManager_HunterHealth")
				end
				gg.getResults(9999)
				if HunterHealthMenu == 1 then
					local Value = {"1,500,000", "150"}
					applyoffset(-0x8, gg.TYPE_DWORD)
					if HunterHealth_currentA == 1 or HunterHealth_currentA == 3 then
						gg.editAll(Value[1], gg.TYPE_DWORD)
						HunterHealth_currentA = 2
					elseif HunterHealth_currentA == 2 then
						gg.editAll(Value[2], gg.TYPE_DWORD)
						HunterHealth_currentA = 3
					end
				elseif HunterHealthMenu == 2 then
					local Value = {"10,000,000", "0.00002777778"}
					if HunterHealth_currentB == 1 then
						gg.editAll(Value[1], gg.TYPE_DOUBLE)
						HunterHealth_currentB = 2
					elseif HunterHealth_currentB == 2 then
						gg.editAll(Value[2], gg.TYPE_DOUBLE)						
						HunterHealth_currentB = 1
					end
				elseif HunterHealthMenu == 3 then
					local Value = {"100", "50"}
					applyoffset(0x10, gg.TYPE_DWORD)
					if HunterHealth_currentC == 1 then
						gg.editAll(Value[1], gg.TYPE_DWORD)
						HunterHealth_currentC = 2
					elseif HunterHealth_currentC == 2 then
						gg.editAll(Value[2], gg.TYPE_DWORD)						
						HunterHealth_currentC = 1
					end
				end
			elseif HunterHealthMenu == 4 then
				Hunter()
			end
			HunterHealth()	
		end
		-- [2-3] ダメージ
		HunterDamage_currentA = 1
		HunterDamage_currentB = 1
		HunterDamage_SelectedA = {"\n[1]   与えるダメージ\n", "\n[ON]   与えるダメージ  =  最大\n", "\n[ON]   与えるダメージ  =  10倍\n"}
		HunterDamage_SelectedB = {"\n[3]   受けるダメージ\n", "\n[ON]   受けるダメージ  =  最小\n"}	
		HunterDamageSetting_SelectedA_Selected = {false, false, false}
		HunterDamageSetting_SelectedB_Selected = {false, false, false}
		HunterDamageSetting_SelectedC_Selected = {false, false, false}
		HunterDamageSetting_SelectedD_Selected = {false, false, false}
		HunterDamageSetting_SelectedE_Selected = {false, false, false}
		HunterDamageSetting_SelectedF_Selected = {false, false, false}
		HunterDamageSetting_SelectedG_Selected = {false, false, false}
		HunterDamageSetting_SelectedH_Selected = {false, false, false}
		HunterDamageSetting_SelectedI_Selected = {false, false, false}
		HunterDamageSetting_SelectedJ_Selected = {false, false, false}
		HunterDamageSetting_SelectedK_Selected = {false, false, false}
		HunterDamageSetting_SelectedL_Selected = {false, false, false}
		HunterDamageSetting_SelectedM_Selected = {false, false, false}
		function HunterDamage()
			gg.setVisible(false)	
			HunterDamageMenu = gg.choice({
				HunterDamage_SelectedA[HunterDamage_currentA],
				"\n[2]   与えるダメージの詳細設定\n",
				HunterDamage_SelectedB[HunterDamage_currentB],
				"\n[←]   もどる"
			}, nil, "メインメニュー/ハンター/\n\nダメージ")	
			if HunterDamageMenu == nil then
				temporarilyhide()	
			elseif HunterDamageMenu == 1 then
				if HunterDamage_currentA == 1 then
					Patch("libil2cpp.so",0x193DB08,"E0 03 26")
					HunterDamage_currentA = 2
				elseif HunterDamage_currentA == 2 then
					Patch("libil2cpp.so",0x193DB08,"00 90 24")
					HunterDamage_currentA = 3
				elseif HunterDamage_currentA == 3 then
					Patch("libil2cpp.so",0x193DB08,"00 10 2E")
					HunterDamage_currentA = 1
				end						
			elseif HunterDamageMenu == 2 then
				HunterDamageSetting()
			elseif HunterDamageMenu == 3 then
				if HunterDamage_currentB == 1 then
					Patch("libil2cpp.so",0x193DC64,"E0 03 27")
					HunterDamage_currentB = 2
				elseif HunterDamage_currentB == 2 then
					Patch("libil2cpp.so",0x193DC64,"00 10 2E")
					HunterDamage_currentB = 1
				end
			elseif HunterDamageMenu == 4 then
				Hunter()
			end
			HunterDamage()
		end
			-- [2-3-1] 詳細設定
			HunterDamageSetting_SelectedA = {"\n[1]   斬撃\n"}
			HunterDamageSetting_SelectedB = {"\n[2]   打撃\n"} 
			HunterDamageSetting_SelectedC = {"\n[3]   射撃\n"}
			HunterDamageSetting_SelectedD = {"\n[4]   火属性\n"}
			HunterDamageSetting_SelectedE = {"\n[5]   水属性\n"}
			HunterDamageSetting_SelectedF = {"\n[6]   雷属性\n"}
			HunterDamageSetting_SelectedG = {"\n[7]   氷属性\n"}
			HunterDamageSetting_SelectedH = {"\n[8]   龍属性\n"}
			HunterDamageSetting_SelectedI = {"\n[9]   プラス会心\n"}
			HunterDamageSetting_SelectedJ = {"\n[10]   マイナス会心\n"}
			HunterDamageSetting_SelectedK = {"\n[11]   無会心\n"}
			HunterDamageSetting_SelectedL = {"\n[12]   爆破\n"}
			HunterDamageSetting_SelectedM = {"\n[13]   弱点\n"}
			function HunterDamageSetting()	
				gg.setVisible(false)	
				HunterDamageSettingMenu = gg.choice({		
					HunterDamageSetting_SelectedA[1],
					HunterDamageSetting_SelectedB[1],
					HunterDamageSetting_SelectedC[1],
					HunterDamageSetting_SelectedD[1],
					HunterDamageSetting_SelectedE[1],
					HunterDamageSetting_SelectedF[1],
					HunterDamageSetting_SelectedG[1],
					HunterDamageSetting_SelectedH[1],
					HunterDamageSetting_SelectedI[1],
					HunterDamageSetting_SelectedJ[1],
					HunterDamageSetting_SelectedK[1],
					HunterDamageSetting_SelectedL[1],
					HunterDamageSetting_SelectedM[1],
					"\n[←]   もどる"
				}, nil, "メインメニュー/ハンター/\n\n与えるダメージの詳細設定")	
				if HunterDamageSettingMenu == nil then
					temporarilyhide()	
				elseif HunterDamageSettingMenu >= 1 and HunterDamageSettingMenu <= 8 then
					LoadNameAddress("PhysicalDamageData_Damage")
					local count = gg.getResultsCount(9999)
					if count >= 1 then
					else						
						valueFromClass("PhysicalDamageData")	
						applyoffset(0x10, gg.TYPE_DWORD)
						gg.refineNumber("10~1,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
						AddNameAddress("PhysicalDamageData_Damage")
					end		
					gg.getResults(9999)
					if HunterDamageSettingMenu == 1 then
						local Value = {"150", "1,500,000"}
						gg.setVisible(false)
						local menu = gg.choice({
							(HunterDamageSetting_SelectedA_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
							(HunterDamageSetting_SelectedA_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
							(HunterDamageSetting_SelectedA_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
							"\n[←]    もどる"
						}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n斬撃")
						if menu == nil then
						elseif menu >= 1 and menu <= 3 then
							for i = 1, 3 do
								HunterDamageSetting_SelectedA_Selected[i] = false
							end
							HunterDamageSetting_SelectedA_Selected[menu] = true				
							if menu >= 1 and menu <= 2 then		
								local chosenValue = tostring(menu)
								gg.editAll(Value[menu], gg.TYPE_DWORD)	
								HunterDamageSetting_SelectedA[1] = "\n[ON]   斬撃  =  "..Value[menu].."\n"
							elseif menu == 3 then
								while true do
									gg.setVisible(false)
									local val = gg.prompt({[1] = "ハンターの斬撃ダメージを変更 #Dword型\n\nほぼデフォ: 150\n[  0 ~   ]"}, {[1] = ""}, {"number"})
									if val and val[1] ~= nil then
										gg.editAll(val[1], gg.TYPE_DWORD)									
										break
										HunterDamageSetting_SelectedA[1] = "\n[ON]   斬撃  =  "..val[1].."\n"
									else
										temporarilyhide()
									end
								end							
							end								
						end
					elseif HunterDamageSettingMenu == 2 then
						applyoffset(0x4, gg.TYPE_DWORD)
						local Value = {"150", "1,500,000"}
						gg.setVisible(false)
						local menu = gg.choice({
							(HunterDamageSetting_SelectedB_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
							(HunterDamageSetting_SelectedB_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
							(HunterDamageSetting_SelectedB_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
							"\n[←]    もどる"
						}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n打撃")
						if menu == nil then
						elseif menu >= 1 and menu <= 3 then
							for i = 1, 3 do
								HunterDamageSetting_SelectedB_Selected[i] = false
							end
							HunterDamageSetting_SelectedB_Selected[menu] = true				
							if menu >= 1 and menu <= 2 then		
								local chosenValue = tostring(menu)
								gg.editAll(Value[menu], gg.TYPE_DWORD)	
								HunterDamageSetting_SelectedB[1] = "\n[ON]   打撃  =  "..Value[menu].."\n"
							elseif menu == 3 then
								while true do
									gg.setVisible(false)
									local val = gg.prompt({[1] = "ハンターの打撃ダメージを変更 #Dword型\n\nほぼデフォ: 150\n[  0 ~   ]"}, {[1] = ""}, {"number"})
									if val and val[1] ~= nil then
										gg.editAll(val[1], gg.TYPE_DWORD)									
										break
										HunterDamageSetting_SelectedB[1] = "\n[ON]   打撃  =  "..val[1].."\n"
									else
										temporarilyhide()
									end
								end							
							end								
						end							
					elseif HunterDamageSettingMenu == 3 then
						applyoffset(0x8, gg.TYPE_DWORD)
						local Value = {"150", "1,500,000"}
						gg.setVisible(false)
						local menu = gg.choice({
							(HunterDamageSetting_SelectedC_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
							(HunterDamageSetting_SelectedC_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
							(HunterDamageSetting_SelectedC_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
							"\n[←]    もどる"
						}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n射撃")
						if menu == nil then
						elseif menu >= 1 and menu <= 3 then
							for i = 1, 3 do
								HunterDamageSetting_SelectedC_Selected[i] = false
							end
							HunterDamageSetting_SelectedC_Selected[menu] = true				
							if menu >= 1 and menu <= 2 then		
								local chosenValue = tostring(menu)
								gg.editAll(Value[menu], gg.TYPE_DWORD)	
								HunterDamageSetting_SelectedC[1] = "\n[ON]   射撃  =  "..Value[menu].."\n"
							elseif menu == 3 then
								while true do
									gg.setVisible(false)
									local val = gg.prompt({[1] = "ハンターの射撃ダメージを変更 #Dword型\n\nほぼデフォ: 150\n[  0 ~   ]"}, {[1] = ""}, {"number"})
									if val and val[1] ~= nil then
										gg.editAll(val[1], gg.TYPE_DWORD)									
										break
										HunterDamageSetting_SelectedC[1] = "\n[ON]   射撃  =  "..val[1].."\n"
									else
										temporarilyhide()
									end
								end							
							end								
						end							
					elseif HunterDamageSettingMenu >= 4 and HunterDamageSettingMenu <= 8 then
						applyoffset(-0x4, gg.TYPE_QWORD)
						MoveThePointer()
						if HunterDamageSettingMenu == 4 then
							applyoffset(0x10, gg.TYPE_DWORD)
							local Value = {"100", "1,000,000"}
							gg.setVisible(false)
							local menu = gg.choice({
								(HunterDamageSetting_SelectedD_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
								(HunterDamageSetting_SelectedD_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
								(HunterDamageSetting_SelectedD_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
								"\n[←]    もどる"
							}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n火属性")
							if menu == nil then
							elseif menu >= 1 and menu <= 3 then
								for i = 1, 3 do
									HunterDamageSetting_SelectedD_Selected[i] = false
								end
								HunterDamageSetting_SelectedD_Selected[menu] = true				
								if menu >= 1 and menu <= 2 then		
									local chosenValue = tostring(menu)
									gg.editAll(Value[menu], gg.TYPE_DWORD)	
									HunterDamageSetting_SelectedD[1] = "\n[ON]   火属性  =  "..Value[menu].."\n"
								elseif menu == 3 then
									while true do
										gg.setVisible(false)
										local val = gg.prompt({[1] = "ハンターの火属性ダメージを変更 #Dword型\n\nほぼデフォ: 100\n[  0 ~   ]"}, {[1] = ""}, {"number"})
										if val and val[1] ~= nil then
											gg.editAll(val[1], gg.TYPE_DWORD)									
											break
											HunterDamageSetting_SelectedD[1] = "\n[ON]   火属性  =  "..val[1].."\n"
										else
											temporarilyhide()
										end
									end							
								end								
							end												
						elseif HunterDamageSettingMenu == 5 then
							applyoffset(0x14, gg.TYPE_DWORD)
							local Value = {"100", "1,000,000"}
							gg.setVisible(false)
							local menu = gg.choice({
								(HunterDamageSetting_SelectedE_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
								(HunterDamageSetting_SelectedE_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
								(HunterDamageSetting_SelectedE_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
								"\n[←]    もどる"
							}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n水属性")
							if menu == nil then
							elseif menu >= 1 and menu <= 3 then
								for i = 1, 3 do
									HunterDamageSetting_SelectedE_Selected[i] = false
								end
								HunterDamageSetting_SelectedE_Selected[menu] = true				
								if menu >= 1 and menu <= 2 then		
									local chosenValue = tostring(menu)
									gg.editAll(Value[menu], gg.TYPE_DWORD)	
									HunterDamageSetting_SelectedE[1] = "\n[ON]   水属性  =  "..Value[menu].."\n"
								elseif menu == 3 then
									while true do
										gg.setVisible(false)
										local val = gg.prompt({[1] = "ハンターの水属性ダメージを変更 #Dword型\n\nほぼデフォ: 100\n[  0 ~   ]"}, {[1] = ""}, {"number"})
										if val and val[1] ~= nil then
											gg.editAll(val[1], gg.TYPE_DWORD)									
											break
											HunterDamageSetting_SelectedE[1] = "\n[ON]   水属性  =  "..val[1].."\n"
										else
											temporarilyhide()
										end
									end							
								end								
							end														
						elseif HunterDamageSettingMenu == 6 then
							applyoffset(0x18, gg.TYPE_DWORD)
							local Value = {"100", "1,000,000"}
							gg.setVisible(false)
							local menu = gg.choice({
								(HunterDamageSetting_SelectedF_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
								(HunterDamageSetting_SelectedF_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
								(HunterDamageSetting_SelectedF_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
								"\n[←]    もどる"
							}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n雷属性")
							if menu == nil then
							elseif menu >= 1 and menu <= 3 then
								for i = 1, 3 do
									HunterDamageSetting_SelectedF_Selected[i] = false
								end
								HunterDamageSetting_SelectedF_Selected[menu] = true				
								if menu >= 1 and menu <= 2 then		
									local chosenValue = tostring(menu)
									gg.editAll(Value[menu], gg.TYPE_DWORD)	
									HunterDamageSetting_SelectedF[1] = "\n[ON]   雷属性  =  "..Value[menu].."\n"
								elseif menu == 3 then
									while true do
										gg.setVisible(false)
										local val = gg.prompt({[1] = "ハンターの雷属性ダメージを変更 #Dword型\n\nほぼデフォ: 100\n[  0 ~   ]"}, {[1] = ""}, {"number"})
										if val and val[1] ~= nil then
											gg.editAll(val[1], gg.TYPE_DWORD)									
											break
											HunterDamageSetting_SelectedF[1] = "\n[ON]   雷属性  =  "..val[1].."\n"
										else
											temporarilyhide()
										end
									end							
								end								
							end														
						elseif HunterDamageSettingMenu == 7 then
							applyoffset(0x1C, gg.TYPE_DWORD)
							local Value = {"100", "1,000,000"}
							gg.setVisible(false)
							local menu = gg.choice({
								(HunterDamageSetting_SelectedG_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
								(HunterDamageSetting_SelectedG_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
								(HunterDamageSetting_SelectedG_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
								"\n[←]    もどる"
							}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n氷属性")
							if menu == nil then
							elseif menu >= 1 and menu <= 3 then
								for i = 1, 3 do
									HunterDamageSetting_SelectedG_Selected[i] = false
								end
								HunterDamageSetting_SelectedG_Selected[menu] = true				
								if menu >= 1 and menu <= 2 then		
									local chosenValue = tostring(menu)
									gg.editAll(Value[menu], gg.TYPE_DWORD)	
									HunterDamageSetting_SelectedG[1] = "\n[ON]   氷属性  =  "..Value[menu].."\n"
								elseif menu == 3 then
									while true do
										gg.setVisible(false)
										local val = gg.prompt({[1] = "ハンターの氷属性ダメージを変更 #Dword型\n\nほぼデフォ: 100\n[  0 ~   ]"}, {[1] = ""}, {"number"})
										if val and val[1] ~= nil then
											gg.editAll(val[1], gg.TYPE_DWORD)									
											break
											HunterDamageSetting_SelectedG[1] = "\n[ON]   氷属性  =  "..val[1].."\n"
										else
											temporarilyhide()
										end
									end							
								end								
							end														
						elseif HunterDamageSettingMenu == 8 then
							applyoffset(0x20, gg.TYPE_DWORD)
							local Value = {"100", "1,000,000"}
							gg.setVisible(false)
							local menu = gg.choice({
								(HunterDamageSetting_SelectedH_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
								(HunterDamageSetting_SelectedH_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
								(HunterDamageSetting_SelectedH_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
								"\n[←]    もどる"
							}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n龍属性")
							if menu == nil then
							elseif menu >= 1 and menu <= 3 then
								for i = 1, 3 do
									HunterDamageSetting_SelectedH_Selected[i] = false
								end
								HunterDamageSetting_SelectedH_Selected[menu] = true				
								if menu >= 1 and menu <= 2 then		
									local chosenValue = tostring(menu)
									gg.editAll(Value[menu], gg.TYPE_DWORD)	
									HunterDamageSetting_SelectedH[1] = "\n[ON]   龍属性  =  "..Value[menu].."\n"
								elseif menu == 3 then
									while true do
										gg.setVisible(false)
										local val = gg.prompt({[1] = "ハンターの龍属性ダメージを変更 #Dword型\n\nほぼデフォ: 100\n[  0 ~   ]"}, {[1] = ""}, {"number"})
										if val and val[1] ~= nil then
											gg.editAll(val[1], gg.TYPE_DWORD)									
											break
											HunterDamageSetting_SelectedH[1] = "\n[ON]   龍属性  =  "..val[1].."\n"
										else
											temporarilyhide()
										end
									end							
								end								
							end								
						end
					end
				elseif HunterDamageSettingMenu >= 9 and HunterDamageSettingMenu <= 13 then
					LoadNameAddress("BattleConfig_Damage")
					local count = gg.getResultsCount(9999)
					if count >= 1 then
					else			    
						valueFromClass("BattleConfig")
						applyoffset(0x50, gg.TYPE_QWORD)
						MoveThePointer()
						applyoffset(0x10, gg.TYPE_DWORD)
						gg.refineNumber("10~1,000", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
						AddNameAddress("BattleConfig_Damage")
					end		
					gg.getResults(9999)
					if HunterDamageSettingMenu == 9 then
						local Value = {"125", "1,250,000"}
						gg.setVisible(false)
						local menu = gg.choice({
							(HunterDamageSetting_SelectedI_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
							(HunterDamageSetting_SelectedI_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
							(HunterDamageSetting_SelectedI_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
							"\n[←]    もどる"
						}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\nプラス会心")
						if menu == nil then
						elseif menu >= 1 and menu <= 3 then
							for i = 1, 3 do
								HunterDamageSetting_SelectedI_Selected[i] = false
							end
							HunterDamageSetting_SelectedI_Selected[menu] = true				
							if menu >= 1 and menu <= 2 then		
								local chosenValue = tostring(menu)
								gg.editAll(Value[menu], gg.TYPE_DWORD)	
								HunterDamageSetting_SelectedI[1] = "\n[ON]   プラス会心  =  "..Value[menu].."\n"
							elseif menu == 3 then
								while true do
									gg.setVisible(false)
									local val = gg.prompt({[1] = "ハンターのプラス会心ダメージを変更 #Dword型\n\nほぼデフォ: 125\n[  0 ~ 1,250,000  ]"}, {[1] = ""}, {"number"})
									if val and val[1] ~= nil then
										gg.editAll(val[1], gg.TYPE_DWORD)									
										break
										HunterDamageSetting_SelectedI[1] = "\n[ON]   プラス会心  =  "..val[1].."\n"
									else
										temporarilyhide()
									end
								end							
							end								
						end													
					elseif HunterDamageSettingMenu == 10 then
						applyoffset(0x4, gg.TYPE_DWORD)	
						local Value = {"75", "750,000"}
						gg.setVisible(false)
						local menu = gg.choice({
							(HunterDamageSetting_SelectedJ_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
							(HunterDamageSetting_SelectedJ_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
							(HunterDamageSetting_SelectedJ_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
							"\n[←]    もどる"
						}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\nマイナス会心")
						if menu == nil then
						elseif menu >= 1 and menu <= 3 then
							for i = 1, 3 do
								HunterDamageSetting_SelectedJ_Selected[i] = false
							end
							HunterDamageSetting_SelectedJ_Selected[menu] = true				
							if menu >= 1 and menu <= 2 then		
								local chosenValue = tostring(menu)
								gg.editAll(Value[menu], gg.TYPE_DWORD)	
								HunterDamageSetting_SelectedJ[1] = "\n[ON]   マイナス会心  =  "..Value[menu].."\n"
							elseif menu == 3 then
								while true do
									gg.setVisible(false)
									local val = gg.prompt({[1] = "ハンターのマイナス会心ダメージを変更 #Dword型\n\nほぼデフォ: 75\n[  0 ~ 750,000  ]"}, {[1] = ""}, {"number"})
									if val and val[1] ~= nil then
										gg.editAll(val[1], gg.TYPE_DWORD)									
										break
										HunterDamageSetting_SelectedJ[1] = "\n[ON]   マイナス会心  =  "..val[1].."\n"
									else
										temporarilyhide()
									end
								end							
							end								
						end								
					elseif HunterDamageSettingMenu == 11 then
						applyoffset(0x10, gg.TYPE_DWORD)	
						local Value = {"40", "400,000"}
						gg.setVisible(false)
						local menu = gg.choice({
							(HunterDamageSetting_SelectedK_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
							(HunterDamageSetting_SelectedK_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
							(HunterDamageSetting_SelectedK_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
							"\n[←]    もどる"
						}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n無会心")
						if menu == nil then
						elseif menu >= 1 and menu <= 3 then
							for i = 1, 3 do
								HunterDamageSetting_SelectedK_Selected[i] = false
							end
							HunterDamageSetting_SelectedK_Selected[menu] = true				
							if menu >= 1 and menu <= 2 then		
								local chosenValue = tostring(menu)
								gg.editAll(Value[menu], gg.TYPE_DWORD)	
								HunterDamageSetting_SelectedK[1] = "\n[ON]   無会心  =  "..Value[menu].."\n"
							elseif menu == 3 then
								while true do
									gg.setVisible(false)
									local val = gg.prompt({[1] = "ハンターの無会心ダメージを変更 #Dword型\n\nほぼデフォ: 40\n[  0 ~ 400,000  ]"}, {[1] = ""}, {"number"})
									if val and val[1] ~= nil then
										gg.editAll(val[1], gg.TYPE_DWORD)									
										break
										HunterDamageSetting_SelectedK[1] = "\n[ON]   無会心  =  "..val[1].."\n"
									else
										temporarilyhide()
									end
								end							
							end								
						end								
					elseif HunterDamageSettingMenu == 12 then
						applyoffset(0x8, gg.TYPE_DWORD)
						local Value = {"130", "1,300,000"}
						gg.setVisible(false)
						local menu = gg.choice({
							(HunterDamageSetting_SelectedL_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
							(HunterDamageSetting_SelectedL_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
							(HunterDamageSetting_SelectedL_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
							"\n[←]    もどる"
						}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n爆破")
						if menu == nil then
						elseif menu >= 1 and menu <= 3 then
							for i = 1, 3 do
								HunterDamageSetting_SelectedL_Selected[i] = false
							end
							HunterDamageSetting_SelectedL_Selected[menu] = true				
							if menu >= 1 and menu <= 2 then		
								local chosenValue = tostring(menu)
								gg.editAll(Value[menu], gg.TYPE_DWORD)	
								HunterDamageSetting_SelectedL[1] = "\n[ON]   爆破  =  "..Value[menu].."\n"
							elseif menu == 3 then
								while true do
									gg.setVisible(false)
									local val = gg.prompt({[1] = "ハンターの爆破ダメージを変更 #Dword型\n\nほぼデフォ: 130\n[  0 ~ 1,300,000  ]"}, {[1] = ""}, {"number"})
									if val and val[1] ~= nil then
										gg.editAll(val[1], gg.TYPE_DWORD)									
										break
										HunterDamageSetting_SelectedL[1] = "\n[ON]   爆破  =  "..val[1].."\n"
									else
										temporarilyhide()
									end
								end							
							end								
						end		
					elseif HunterDamageSettingMenu == 13 then
						applyoffset(0xC, gg.TYPE_DWORD)
						local Value = {"130", "1,300,000"}
						gg.setVisible(false)
						local menu = gg.choice({
							(HunterDamageSetting_SelectedM_Selected[1] and "\n[ON]   ほぼデフォルト\n" or "\n[1]   ほぼデフォルト\n"),
							(HunterDamageSetting_SelectedM_Selected[2] and "\n[ON]    10,000倍\n" or "\n[2]   10,000倍\n"),
							(HunterDamageSetting_SelectedM_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),
							"\n[←]    もどる"
						}, nil, "メインメニュー/ハンター/ダメージ/詳細設定\n\n弱点")
						if menu == nil then
						elseif menu >= 1 and menu <= 3 then
							for i = 1, 3 do
								HunterDamageSetting_SelectedM_Selected[i] = false
							end
							HunterDamageSetting_SelectedM_Selected[menu] = true				
							if menu >= 1 and menu <= 2 then		
								local chosenValue = tostring(menu)
								gg.editAll(Value[menu], gg.TYPE_DWORD)	
								HunterDamageSetting_SelectedM[1] = "\n[ON]   弱点  =  "..Value[menu].."\n"
							elseif menu == 3 then
								while true do
									gg.setVisible(false)
									local val = gg.prompt({[1] = "ハンターの弱点ダメージを変更 #Dword型\n\nほぼデフォ: 130\n[  0 ~ 1,300,000  ]"}, {[1] = ""}, {"number"})
									if val and val[1] ~= nil then
										gg.editAll(val[1], gg.TYPE_DWORD)									
										break
										HunterDamageSetting_SelectedM[1] = "\n[ON]   弱点  =  "..val[1].."\n"
									else
										temporarilyhide()
									end
								end							
							end								
						end
					end
				elseif HunterDamageSettingMenu == 14 then
					HunterDamage()
				end
				HunterDamageSetting()	
			end
		-- [2-4] 戦闘時
		HunterBattle_currentB = 1
		HunterBattle_currentC = 1
		HunterBattle_currentD = 1
		HunterBattle_currentE = 1
		HunterBattle_SelectedA = {"\n[1]   チャージ速度\n", "\n[ON]   チャージ速度  =  最速\n"}	
		HunterBattle_SelectedB = {"\n[2]   SPゲージ\n", "\n[ON]   SPゲージ  =  満タン\n"}
		HunterBattle_SelectedC = {"\n[3]   ジャスト回避後の無敵時間\n", "\n[ON]   ジャスト回避後の無敵時間  =  300秒\n"}
		HunterBattle_SelectedD = {"\n[4]   回復薬のクールタイム\n", "\n[ON]   回復薬のクールタイム  =  なし\n"}
		HunterBattle_SelectedE = {"\n[5]   復活後の無敵時間\n", "\n[ON]   復活後の無敵時間  =  300秒\n"}
		function HunterBattle()		
			gg.setVisible(false)	
			HunterBattleMenu = gg.choice({
				HunterBattle_SelectedA[ChargeSpeed_currentX],
				HunterBattle_SelectedB[HunterBattle_currentB],
				HunterBattle_SelectedC[HunterBattle_currentC],
				HunterBattle_SelectedD[HunterBattle_currentD],
				HunterBattle_SelectedE[HunterBattle_currentE],				
				"\n[←]   もどる"
			}, nil, "メインメニュー/ハンター/\n\n戦闘時")	
			if HunterBattleMenu == nil then
				temporarilyhide()
			elseif HunterBattleMenu == 1 then
				if ChargeSpeed_currentX == 1 then
					Patch("libil2cpp.so",0x1A64488,"00 10 40 BC")
					ChargeSpeed_currentX = 2
				elseif ChargeSpeed_currentX == 2 then
					Patch("libil2cpp.so",0x1A64488,"00 98 41 BD")
					ChargeSpeed_currentX = 1
				end				
			elseif HunterBattleMenu == 2 then
				if HunterBattle_currentB == 1 then
					Patch("libil2cpp.so",0x193DD94,"20 00 80 52")
					HunterBattle_currentB = 2
				elseif HunterBattle_currentB == 2 then			
					Patch("libil2cpp.so",0x193DD94,"E0 03 1F 2A")
					HunterBattle_currentB = 1
				end
			elseif HunterBattleMenu == 3 then
				local Value = {"300", "0.5"}
				LoadNameAddress("BattleConfig_JustDodge")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else			
					valueFromClass("BattleConfig")
					applyoffset(0x98, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x40, gg.TYPE_FLOAT)
					gg.refineNumber("0.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("BattleConfig_JustDodge")
				end
				gg.getResults(9999)
				if HunterBattle_currentC == 1 then
					gg.editAll(Value[1], gg.TYPE_FLOAT)	
					HunterBattle_currentC = 2
				elseif HunterBattle_currentC == 2 then 
					gg.editAll(Value[2], gg.TYPE_FLOAT)	
					HunterBattle_currentC = 1				
				end
			elseif HunterBattleMenu >= 4 and HunterBattleMenu <= 5 then	
				LoadNameAddress("BattleConfig_Battle")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else			
					valueFromClass("BattleConfig")
					applyoffset(0x88, gg.TYPE_FLOAT)
					gg.refineNumber("15", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
					AddNameAddress("BattleConfig_Battle")
				end	
				gg.getResults(9999)
				if HunterBattleMenu == 4 then
					local Value = {"0", "15"}
					if HunterBattle_currentD == 1 then
						gg.editAll(Value[1], gg.TYPE_FLOAT)
						HunterBattle_currentD = 2
					elseif HunterBattle_currentD == 2 then
						gg.editAll(Value[2], gg.TYPE_FLOAT)
						HunterBattle_currentD = 1	
					end
				elseif HunterBattleMenu == 5 then	
					local Value = {"300", "2.5"}
					applyoffset(0x4, gg.TYPE_FLOAT)
					if HunterBattle_currentE == 1 then
						gg.editAll(Value[1], gg.TYPE_FLOAT)
						HunterBattle_currentE = 2	
					elseif HunterBattle_currentE == 2 then
						gg.editAll(Value[2], gg.TYPE_FLOAT)
						HunterBattle_currentE = 1							
					end
				end
			elseif HunterBattleMenu == 6 then
				Hunter()
			end
			HunterBattle()
		end
		-- [2-5] 耐性
		HunterResistance_currentA = 1
		HunterResistance_currentB = 1
		HunterResistance_currentC = 1
		HunterResistance_currentD = 1
		HunterResistance_SelectedA = {"\n[1]   毒\n", "\n[ON]   毒  =  無効\n"}	
		HunterResistance_SelectedB = {"\n[2]   麻痺\n", "\n[ON]   麻痺  =  無効\n"}	
		HunterResistance_SelectedC = {"\n[3]   裂傷\n", "\n[ON]   裂傷  =  無効\n"}	
		HunterResistance_SelectedD = {"\n[4]   気絶\n", "\n[ON]   気絶  =  無効\n"}			
		function HunterResistance()
			gg.setVisible(false)	
			HunterResistanceMenu = gg.choice({
				HunterResistance_SelectedA[HunterResistance_currentA],
				HunterResistance_SelectedB[HunterResistance_currentB],
				HunterResistance_SelectedC[HunterResistance_currentC],
				HunterResistance_SelectedD[HunterResistance_currentD],				
				"\n[←]   もどる"
			}, nil, "メインメニュー/ハンター/\n\n耐性")	
			if HunterResistanceMenu == nil then
				temporarilyhide()
			elseif HunterResistanceMenu == 1 then
				LoadNameAddress("BattleConfig_Poison")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else					
					valueFromClass("BattleConfig")	
					applyoffset(0xB8, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x10, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x10, gg.TYPE_FLOAT)
					gg.refineNumber("1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("BattleConfig_Poison")
				end
				gg.getResults(9999)
				if HunterResistance_currentA == 1 then
					gg.editAll("0", gg.TYPE_FLOAT)
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll("0", gg.TYPE_FLOAT)
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll("0", gg.TYPE_FLOAT)	
					HunterResistance_currentA = 2
				elseif HunterResistance_currentA == 2 then
					gg.editAll("1", gg.TYPE_FLOAT)
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll("0.5", gg.TYPE_FLOAT)
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll("1", gg.TYPE_FLOAT)		
					HunterResistance_currentA = 1
				end
			elseif HunterResistanceMenu == 2 then
				LoadNameAddress("BattleConfig_Paralysis")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else						
					valueFromClass("BattleConfig")	
					applyoffset(0xB8, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x18, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x18, gg.TYPE_FLOAT)
					gg.refineNumber("4~7", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("BattleConfig_Paralysis")
				end
				gg.getResults(9999)
				if HunterResistance_currentB == 1 then
					gg.editAll("0", gg.TYPE_FLOAT)
					applyoffset(0x1C, gg.TYPE_FLOAT)
					gg.editAll("1,000", gg.TYPE_FLOAT)	
					HunterResistance_currentB = 2
				elseif HunterResistance_currentB == 2 then
					gg.editAll("5.19999980927", gg.TYPE_FLOAT)
					applyoffset(0x1C, gg.TYPE_FLOAT)
					gg.editAll("0.20000000298", gg.TYPE_FLOAT)		
					HunterResistance_currentB = 1
				end
			elseif HunterResistanceMenu == 3 then
				LoadNameAddress("BattleConfig_Bleeding")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else								
					valueFromClass("BattleConfig")	
					applyoffset(0xB8, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x28, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x10, gg.TYPE_FLOAT)
					gg.refineNumber("20", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("BattleConfig_Bleeding")
				end
				gg.getResults(9999)
				if HunterResistance_currentC == 1 then
					gg.editAll("0", gg.TYPE_FLOAT)
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll("0", gg.TYPE_FLOAT)
					applyoffset(0x4, gg.TYPE_DWORD)
					gg.editAll("0", gg.TYPE_DWORD)	
					HunterResistance_currentC = 2
				elseif HunterResistance_currentC == 2 then
					gg.editAll("20", gg.TYPE_FLOAT)
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll("3", gg.TYPE_FLOAT)
					applyoffset(0x4, gg.TYPE_DWORD)
					gg.editAll("5", gg.TYPE_DWORD)	
					HunterResistance_currentC = 1
				end
			elseif HunterResistanceMenu == 4 then
				LoadNameAddress("BattleConfig_Flash")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else					
					valueFromClass("BattleConfig")	
					applyoffset(0xB8, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x30, gg.TYPE_QWORD)
					gg.refineNumber("5~8", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("BattleConfig_Flash")
				end
				gg.getResults(9999)
				if HunterResistance_currentD == 1 then
					gg.editAll("0", gg.TYPE_FLOAT)			
					HunterResistance_currentD = 2
				elseif HunterResistance_currentD == 2 then
					gg.editAll("5.19999980927", gg.TYPE_FLOAT)
					HunterResistance_currentD = 1
				end				
			elseif HunterResistanceMenu == 5 then
				Hunter()
			end
			HunterResistance()
		end
		-- [2-6] 攻撃変数の書き換え
		HunterAttackParam_currentB = 1
		HunterAttackParam_currentC = 1
		HunterAttackParam_currentD = 1
		HunterAttackParam_SelectedA = {"\n[1]   モーション値*\n"}
		HunterAttackParam_SelectedB = {"\n[2]   気絶値*\n", "\n[ON]   気絶値*  =  最大\n"}	
		HunterAttackParam_SelectedC = {"\n[3]   属性種類*\n", "\n[ON]   属性種類*  =  無属性\n", "\n[ON]   属性種類*  =  火属性\n", "\n[ON]   属性種類*  =  水属性\n", "\n[ON]   属性種類*  =  雷属性\n", "\n[ON]   属性種類*  =  氷属性\n", "\n[ON]   属性種類*  =  龍属性\n", "\n[ON]   属性種類*  =  毒属性\n", "\n[ON]   属性種類*  =  麻痺属性\n", "\n[ON]   属性種類*  =  睡眠属性\n", "\n[ON]   属性種類*  =  爆破属性\n"}	
		HunterAttackParam_SelectedD = {"\n[4]   物理種類*\n", "\n[ON]   物理種類*  =  なし\n", "\n[ON]   物理種類*  =  斬撃\n", "\n[ON]   物理種類*  =  打撃\n", "\n[ON]   物理種類*  =  射撃\n", "\n[ON]   物理種類*  =  スラスト\n", "\n[ON]   物理種類*  =  ランス\n"}	
		HunterAttackParam_SelectedA_Selected = {false, false, false}
		HunterAttackParam_SelectedC_Selected = {false, false, false, false, false, false, false, false, false, false}
		HunterAttackParam_SelectedD_Selected = {false, false, false, false, false, false}
		function HunterAttackParam()	
			gg.setVisible(false)	
			HunterAttackParamMenu = gg.choice({
				HunterAttackParam_SelectedA[1],
				HunterAttackParam_SelectedB[HunterAttackParam_currentB],
				HunterAttackParam_SelectedC[HunterAttackParam_currentC],
				HunterAttackParam_SelectedD[HunterAttackParam_currentD],		
				"\n[~]    アドレスの再取得\n",				
				"\n[←]   もどる"
			}, nil, "メインメニュー/ハンター/\n\n攻撃変数の書き換え")	
			if HunterAttackParamMenu == nil then
				temporarilyhide()
			elseif HunterAttackParamMenu >= 1 and HunterAttackParamMenu <= 4 then
				LoadNameAddress("BattleAttackParam_AttackParam")
				local count = gg.getResultsCount(9999)
				if count >= 1 then
				else			
					valueFromClass("BattleAttackParam")	
					applyoffset(0x34, gg.TYPE_DWORD)
					gg.refineNumber("0~9", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("BattleAttackParam_AttackParam")
				end				
				gg.getResults(9999)
				if HunterAttackParamMenu == 1 then
					applyoffset(-0x24, gg.TYPE_DWORD)
					gg.setVisible(false)
					local Value = {"100", "1,000,000"}
					local menu = gg.choice({
						(HunterAttackParam_SelectedA_Selected[1] and "\n[ON]   "..Value[1].."\n" or "\n[1]   "..Value[1].."\n"),
						(HunterAttackParam_SelectedA_Selected[2] and "\n[ON]   "..Value[2].."\n" or "\n[2]   "..Value[2].."\n"),
						(HunterAttackParam_SelectedA_Selected[3] and "\n[ON]   任意の値\n" or "\n[3]   任意の値\n"),						
					}, nil, "メインメニュー/ハンター/攻撃変数の書き換え/\n\nモーション値*")
					if menu == nil then	
					elseif menu >= 1 and menu<= 3 then
						for i = 1, 3 do
							HunterAttackParam_SelectedA_Selected[i] = false
						end		
						HunterAttackParam_SelectedA_Selected[menu] = true						
						if menu >= 1 and menu<= 2 then
							local chosenValue = tostring(menu)
							gg.editAll(Value[menu], gg.TYPE_DWORD)		
							HunterAttackParam_SelectedA[1] = "\n[ON]   モーション値*  =  "..Value[menu].."\n"					
						elseif menu == 3 then
							while true do
								gg.setVisible(false)
								local val = gg.prompt({[1] = "ハンターのモーション値を変更 #Dword型\n\nほぼデフォ: 100\n[  0 ~   ]"}, {[1] = ""}, {"number"})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_DWORD)	
									HunterAttackParam_SelectedA[1] = "\n[ON]   モーション値*  =  "..val[1].."\n"
									break
								else
									temporarilyhide()
								end
							end					
						end
					end				
				elseif HunterAttackParamMenu == 2 then
					local Value = {"1,000", "0"}				
					applyoffset(-0x20, gg.TYPE_DWORD)
					if HunterAttackParam_currentB == 1 then
						gg.editAll(Value[1], gg.TYPE_DWORD)
						HunterAttackParam_currentB = 2
					elseif HunterAttackParam_currentB == 2 then
						gg.editAll(Value[2], gg.TYPE_DWORD)
						HunterAttackParam_currentB = 1	
					end					
				elseif HunterAttackParamMenu == 3 then
					gg.setVisible(false)
					local menu = gg.choice({
						(HunterAttackParam_SelectedC_Selected[1] and "\n[ON]   無属性\n" or "\n[1]   無属性\n"),
						(HunterAttackParam_SelectedC_Selected[2] and "\n[ON]   火属性\n" or "\n[2]   火属性\n"),
						(HunterAttackParam_SelectedC_Selected[3] and "\n[ON]   水属性\n" or "\n[3]   水属性\n"),		
						(HunterAttackParam_SelectedC_Selected[4] and "\n[ON]   雷属性\n" or "\n[4]   雷属性\n"),
						(HunterAttackParam_SelectedC_Selected[5] and "\n[ON]   氷属性\n" or "\n[5]   氷属性\n"),			
						(HunterAttackParam_SelectedC_Selected[6] and "\n[ON]   龍属性\n" or "\n[6]   龍属性\n"),
						(HunterAttackParam_SelectedC_Selected[7] and "\n[ON]   毒属性\n" or "\n[7]   毒属性\n"),		
						(HunterAttackParam_SelectedC_Selected[8] and "\n[ON]   麻痺属性\n" or "\n[8]   麻痺属性\n"),
						(HunterAttackParam_SelectedC_Selected[9] and "\n[ON]   睡眠属性\n" or "\n[9]   睡眠属性\n"),	
						(HunterAttackParam_SelectedC_Selected[10] and "\n[ON]   爆破属性\n" or "\n[10]   爆破属性\n"),							
					}, nil, "メインメニュー/ハンター/攻撃変数の書き換え/\n\n属性種類*")
					if menu == nil then	
					elseif menu >= 1 and menu<= 10 then
						for i = 1, 10 do
							HunterAttackParam_SelectedC_Selected[i] = false
						end		
						HunterAttackParam_SelectedC_Selected[menu] = true						
						local chosenValue = tostring(menu)
						gg.editAll(chosenValue, gg.TYPE_DWORD)		
						HunterAttackParam_currentC = chosenValue + 1					
					end
				elseif HunterAttackParamMenu == 4 then
					applyoffset(0x34, gg.TYPE_DWORD)
					gg.setVisible(false)
					local menu = gg.choice({
						(HunterAttackParam_SelectedD_Selected[1] and "\n[ON]   なし\n" or "\n[1]   なし\n"),
						(HunterAttackParam_SelectedD_Selected[2] and "\n[ON]   斬撃\n" or "\n[2]   斬撃\n"),
						(HunterAttackParam_SelectedD_Selected[3] and "\n[ON]   打撃\n" or "\n[3]   打撃\n"),		
						(HunterAttackParam_SelectedD_Selected[4] and "\n[ON]   射撃\n" or "\n[4]   射撃\n"),
						(HunterAttackParam_SelectedD_Selected[5] and "\n[ON]   スラスト\n" or "\n[5]   スラスト\n"),			
						(HunterAttackParam_SelectedD_Selected[6] and "\n[ON]   ランス\n" or "\n[6]   ランス\n"),							
					}, nil, "メインメニュー/ハンター/攻撃変数の書き換え/\n\n物理種類*")
					if menu == nil then	
					elseif menu >= 1 and menu<= 6 then
						for i = 1, 6 do
							HunterAttackParam_SelectedD_Selected[i] = false
						end		
						HunterAttackParam_SelectedD_Selected[menu] = true						
						local chosenValue = tostring(menu)
						gg.editAll(chosenValue, gg.TYPE_DWORD)		
						HunterAttackParam_currentD = chosenValue + 1					
					end					
				end
			elseif HunterAttackParamMenu == 5 then
				Refresh_HunterAttackParam()
			elseif HunterAttackParamMenu == 6 then
				Hunter()
			end
			HunterAttackParam()
		end
			-- [2-6-5] アドレスの再取得
			function refresh_HunterAction()
			    local name1 = {"_Qapplyfix_BattleAttackParam", "_Abaseaccuracy_BattleAttackParam", "BattleAttackParam_AttackParam"}
				local Prompt = gg.prompt({
				    "\n[1]   モーション値*/n[2]   気絶値*\n[3]   属性種類*\n[4]   物理種類*\n"
				}, {false}, {"checkbox"})
				if Prompt == nil then
					temporarilyhide()
					HunterAttackParam()
				end
				if Prompt[1] == true then
					DeleteNameAddress(name1[1])
					DeleteNameAddress(name1[2])
					DeleteNameAddress(name1[3])
					valueFromClass("BattleAttackParam")	
					HunterAttackParam_SelectedA[1] = "\n[1]   モーション値*\n"
					HunterAttackParam_currentB = 1
					HunterAttackParam_currentC = 1
					HunterAttackParam_currentD = 1					
					HunterAttackParam_SelectedA_Selected = {false, false, false}
					HunterAttackParam_SelectedC_Selected = {false, false, false, false, false, false, false, false, false, false}
					HunterAttackParam_SelectedD_Selected = {false, false, false, false, false, false}					
				end
				HunterAttackParam()
			end	
	-- [3] モンスター
	Monster_currentA = 1
	Monster_currentB = 1
	Monster_currentC = 1
	Monster_currentD = 1
	Monster_SelectedA = {"\n[2]   部位破壊\n", "\n[ON]   部位破壊  =  容易化\n"}
	Monster_SelectedB = {"\n[3]   体の大きさ\n", "\n[ON]   体の大きさ  =  0.5倍", "\n[ON]   体の大きさ  =  2倍\n"}
	Monster_SelectedC = {"\n[4]   弱点\n", "\n[ON]   弱点  =  全て追加\n"}
	Monster_SelectedD = {"\n[5]   耐性\n", "\n[ON]   耐性  =  全て排除\n"}
	function Monster()
		gg.setVisible(false)	
		MonsterMenu = gg.choice({
			"\n[1]   動作\n",	
			Monster_SelectedA[Monster_currentA],
			Monster_SelectedB[Monster_currentB],	
			Monster_SelectedC[Monster_currentC],
			Monster_SelectedD[Monster_currentD],	
			"\n[~]    アドレスの再取得\n",					
			"\n[←]    もどる"
		}, nil, "メインメニュー/\n\nモンスター")
		if MonsterMenu == nil then
			temporarilyhide()	
		elseif MonsterMenu == 1 then		
			MonsterMotion()
		elseif MonsterMenu == 2 then		
			LoadNameAddress("BattleConfig_PartBreak")
			local count = gg.getResultsCount()
			if count >= 1 then
			else				
				valueFromClass("BattleConfig")	
				applyoffset(0x58, gg.TYPE_QWORD)
				MoveThePointer()
				applyoffset(0x14, gg.TYPE_FLOAT)
				gg.refineNumber("0.1~0.2", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
				local count = gg.getResultsCount()
				if count >= 1 then
					AddNameAddress("BattleConfig_PartBreak")
				else
					LoadNameAddress("Quick_PartBreak")
					AddNameAddress("BattleConfig_PartBreak")
				end					
			end	
			gg.getResults(9999)
			if Monster_currentA == 1 then
				gg.editAll("1,000,000,000", gg.TYPE_FLOAT)
				applyoffset(-0x4, gg.TYPE_DWORD)
				gg.editAll("999,999,999", gg.TYPE_DWORD)		
				Monster_currentA = 2
			elseif Monster_currentA == 2 then
				gg.editAll("0.15000000596", gg.TYPE_FLOAT)
				applyoffset(-0x4, gg.TYPE_DWORD)
				gg.editAll("100", gg.TYPE_DWORD)
				Monster_currentA = 1
			end
		elseif MonsterMenu == 3 then
			local Value = {"0.5", "2", "1"}
			valueFromClass("BodyLengthEntityData")	
			applyoffset(0x10, gg.TYPE_FLOAT)
			gg.refineNumber("0~2", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
			gg.getResults(9999)
			if Monster_currentB == 1 then
				gg.editAll(Value[1], gg.TYPE_FLOAT)
				Monster_currentB = 2
			elseif Monster_currentB == 2 then
				gg.editAll(Value[2], gg.TYPE_FLOAT)
				Monster_currentB = 3
			elseif Monster_currentB == 3 then	
				gg.editAll(Value[3], gg.TYPE_FLOAT)
				Monster_currentB = 1			
			end
		elseif MonsterMenu == 4 then	
			valueFromClass("ElementalWeaknessChart")
			applyoffset(0x10, gg.TYPE_DWORD)
			if Monster_currentC == 1 then
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				Monster_currentC = 2
			else
			end
		elseif MonsterMenu == 5 then		
			LoadNameAddress("BattleConfig_Resistance")
			local count = gg.getResultsCount()
			if count >= 1 then
			else			
				valueFromClass("BattleConfig")
				applyoffset(0x70, gg.TYPE_QWORD)
				MoveThePointer()
				applyoffset(0x10, gg.TYPE_DWORD)
				gg.refineNumber("100", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)			
				AddNameAddress("BattleConfig_Resistance")
			end				
			gg.getResults(9999)
			if Monster_currentD == 1 then
				gg.editAll("0", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("0", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("0", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("0", gg.TYPE_DWORD)
				Monster_currentD = 2
			elseif Monster_currentD == 2 then
				gg.editAll("100", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("100", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("100", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("100", gg.TYPE_DWORD)				
				Monster_currentD = 1
			end
		elseif MonsterMenu == 6 then	
			HunterAttackParam()			
		elseif MonsterMenu == 7 then		
			Main()
		end
		Monster()
	end
		-- [3-1] 動作
		MonsterMotion_currentB = 1
		MonsterMotion_SelectedA = {"\n[1]   速度\n"}
		MonsterMotion_SelectedB = {"\n[2]   AI\n", "\n[ON]   AI  =  排除\n"}
		MonsterMotion_SelectedA_Selected = {false, false, false, false}
		function MonsterMotion()
			gg.setVisible(false)	
			MonsterMotionMenu = gg.choice({
				MonsterMotion_SelectedA[1],
				MonsterMotion_SelectedB[MonsterMotion_currentB],
				"\n[~]    アドレスの再取得\n",					
				"\n[←]    もどる"
			}, nil, "メインメニュー/モンスター/\n\n動作")
			if MonsterMotionMenu == nil then
				temporarilyhide()	
			elseif MonsterMotionMenu == 1 then
				LoadNameAddress("MotionController_HunterSpeedSpeed")
				local count = gg.getResultsCount()
				if count >= 1 then
					MotionController_HunterSpeed()
				else
					LoadNameAddress("MotionController_MonsterSpeedSpeed")
					local count = gg.getResultsCount()
					if count >= 1 then
					else
						valueFromClass("MotionController")
						applyoffset(0x28, gg.TYPE_FLOAT)
						gg.refineNumber("0~100", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
						AddNameAddress("MotionController_MonsterSpeed")
					end
					gg.refineNumber("0.5", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
					local count = gg.getResultsCount()
					if count == 1 then
						AddNameAddress("MotionController_HunterSpeedSpeed")
					end
				end	
				LoadNameAddress("MotionController_MonsterSpeed")
				gg.setVisible(false)
				local Value = {"1", "0", "5"}
				local menu = gg.choice({
					(MonsterMotion_SelectedA_Selected[1] and "\n[ON]   デフォルト\n" or "\n[1]   デフォルト\n"),
					(MonsterMotion_SelectedA_Selected[2] and "\n[ON]   凍結\n" or "\n[2]   凍結\n"),
					(MonsterMotion_SelectedA_Selected[3] and "\n[ON]   "..Value[3].."倍\n" or "\n[3]   "..Value[3].."倍\n"),
					(MonsterMotion_SelectedA_Selected[4] and "\n[ON]   任意の値\n" or "\n[4]   任意の値\n"),						
				}, nil, "メインメニュー/モンスター/動作/\n\n速度")
				if menu == nil then	
				elseif menu >= 1 and menu<= 4 then
					for i = 1, 4 do
						MonsterMotion_SelectedA_Selected[i] = false
					end		
					MonsterMotion_SelectedA_Selected[menu] = true						
					if menu >= 1 and menu<= 3 then
						local chosenValue = tostring(menu)
						gg.editAll(Value[menu], gg.TYPE_FLOAT)		
						MonsterMotion_currentB[1] = "\n[ON]   速度  =  "..Value[menu].."倍\n"					
					elseif menu == 4 then
						while true do
							gg.setVisible(false)
							local val = gg.prompt({[1] = "モンスターの動作速度を変更 #Flloat型\n\n割合, デフォ: 1\n[  0 ~  10  ]"}, {[1] = ""}, {"number"})
							if val and val[1] ~= nil then
								gg.editAll(val[1], gg.TYPE_FLOAT)	
								MonsterMotion_currentB[1] = "\n[ON]   速度  =  "..val[1].."倍\n"
								break
							else
								temporarilyhide()
							end
						end					
					end
				end				
			elseif MonsterMotionMenu == 2 then
				if MonsterMotion_currentB == 1 then
					Patch("libil2cpp.so",0x193D8CC,"20 00 80 52")
					MonsterMotion_currentB = 2
				elseif MonsterMotion_currentB == 2 then
					Patch("libil2cpp.so",0x193D8CC,"E0 03 1F 2A")
					MonsterMotion_currentB = 1
				end					
			elseif MonsterMotionMenu == 3 then
				Refresh_MonsterMotion()
			elseif MonsterMotionMenu == 4 then
				Monster()
			end
			MonsterMotion()
		end
			-- [3-1-3] アドレス再取得
			function refresh_MonsterMotion()
				local name1 = {"_Qapplyfix_MotionController", "_Abaseaccuracy_MotionController", "MotionController_MonsterSpeedSpeed"}
				local Prompt = gg.prompt({
					"\n[1]    速度\n"
				}, {false}, {"checkbox"})
				if Prompt == nil then
					temporarilyhide()
					MonsterMotion()
				end
				if Prompt[1] == true then
					DeleteNameAddress(name1[1])
					DeleteNameAddress(name1[2])
					DeleteNameAddress(name1[3])
					valueFromClass("MotionController")	
					MonsterMotion_SelectedA[1] = "\n[1]   速度\n"
					MonsterMotion_currentB = 1
					MonsterMotion_SelectedA_Selected = {false, false, false, false}
				end
				MonsterMotion()
			end	
	-- [4] マップ
	Map_currentA = 1
	Map_currentB = 1
	Map_currentC = 1
	Map_currentD = 1
	Map_SelectedA = {"\n[1]   表示範囲\n", "\n[ON]   表示範囲  =  拡大\n"}
	Map_SelectedB = {"\n[2]   読み込む範囲\n", "\n[ON]   読み込む範囲  =  1.2倍\n"}
	Map_SelectedC = {"\n[3]   ハンターのアクセス範囲\n", "\n[ON]   ハンターのアクセス範囲  =  最大\n"}	
	Map_SelectedD = {"\n[4]   オトモのアクセス範囲\n", "\n[ON]   オトモのアクセス範囲  =  最小\n", "\n[ON]   オトモのアクセス範囲  =  最大\n"}
	function Map()
		gg.setVisible(false)	
		MapMenu = gg.choice({
			Map_SelectedA[Map_currentA],	
			Map_SelectedB[Map_currentB],
			Map_SelectedC[Map_currentC],
			Map_SelectedD[Map_currentD],
			"\n[←]    もどる"
		}, nil, "メインメニュー/\n\nマップ\n\nオトモのアクセス範囲が最小の際は,ハンターアクセス範囲が最大になります")
		if MapMenu == nil then	
			temporarilyhide()	
		elseif MapMenu == 1 then	
			if Map_currentA == 1 then
				Patch("libil2cpp.so",0x193FFCC,"20 00 80 52")
				Map_currentA = 2
			elseif Map_currentA == 2 then
				Patch("libil2cpp.so",0x193FFCC,"E0 03 1F 2A")
				Map_currentA = 1				
			end
		elseif MapMenu == 2 then	
			local Value = {"840", "700"}
			LoadNameAddress("MapController_MapLoad")
			local count = gg.getResultsCount()
			if count >= 1 then
			else
				valueFromClass("MapController")
				applyoffset(0x1C, gg.TYPE_FLOAT)
				gg.refineNumber("700", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
				applyoffset(0x7C, gg.TYPE_QWORD)
				MoveThePointer()
				applyoffset(0x28, gg.TYPE_DOUBLE)	
				gg.refineNumber("700", gg.TYPE_DOUBLE, false, gg.SIGN_EQUAL, 0, -1, 0)
				local count = gg.getResultsCount()
				if count >= 1 then
					AddNameAddress("MapController_MapLoad")
				else
					LoadNameAddress("Quick_MapLoad")
					AddNameAddress("MapController_MapLoad")
				end					
			end			
			gg.getResults(9999)
			if Map_currentB == 1 then
				gg.editAll(Value[1], gg.TYPE_DOUBLE)		
				applyoffset(0x8, gg.TYPE_DOUBLE)	
				gg.editAll(Value[1], gg.TYPE_DOUBLE)	
				Map_currentB = 2
			elseif Map_currentB == 2 then
				gg.editAll(Value[2], gg.TYPE_DOUBLE)		
				applyoffset(0x8, gg.TYPE_DOUBLE)	
				gg.editAll(Value[2], gg.TYPE_DOUBLE)			
				Map_currentB = 1
			end		
		elseif MapMenu == 3 then
			local Value = {"840", "1"}
			LoadNameAddress("FieldManager_HunterAccess")
			local count = gg.getResultsCount()
			if count >= 1 then
			else
				valueFromClass("FieldManager")
				applyoffset(0xA0, gg.TYPE_QWORD)
				MoveThePointer()
				applyoffset(0x3C, gg.TYPE_FLOAT)	
				gg.refineNumber("1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
				AddNameAddress("FieldManager_HunterAccess")
			end
			gg.getResults(9999)
			if Map_currentC == 1 then
				gg.editAll(Value[1], gg.TYPE_FLOAT)		
				Map_currentC = 2
			elseif Map_currentC == 2 then
				gg.editAll(Value[2], gg.TYPE_FLOAT)				
				Map_currentC = 1
			end					
		elseif MapMenu == 4 then	
			local Value = {"1", "840", "80"}
			LoadNameAddress("FieldConfig_OtomoAccess")
			local count = gg.getResultsCount()
			if count >= 1 then
			else
				valueFromClass("FieldConfig")
				applyoffset(0x18, gg.TYPE_QWORD)
				MoveThePointer()
				applyoffset(0x10, gg.TYPE_FLOAT)	
				gg.refineNumber("80", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
				local count = gg.getResultsCount()
				if count >= 1 then
					AddNameAddress("FieldConfig_OtomoAccess")
				else
					LoadNameAddress("Quick_OtomoAccess")
					AddNameAddress("FieldConfig_OtomoAccess")
				end					
			end			
			gg.getResults(9999)
			if Map_currentD == 1 then
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				if Map_currentC == 1 then
    				LoadNameAddress("FieldManager_HunterAccess")
    				local count = gg.getResultsCount()
    				if count >= 1 then
    				else
    					valueFromClass("FieldManager")
    					applyoffset(0xA0, gg.TYPE_QWORD)
    					MoveThePointer()
    					applyoffset(0x3C, gg.TYPE_FLOAT)	
    					gg.refineNumber("1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
    					AddNameAddress("FieldManager_HunterAccess")
    				end		
    				gg.getResults(9999)
    				gg.editAll("840", gg.TYPE_FLOAT)	
    				Map_currentC = 2		
    			end
				Map_currentD = 2
			elseif Map_currentD == 2 then
				gg.editAll(Value[2], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[2], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[2], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[2], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[2], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[2], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[2], gg.TYPE_FLOAT)	
				Map_currentD = 3
			elseif Map_currentD == 3 then
				gg.editAll(Value[3], gg.TYPE_FLOAT)
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[3], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[3], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[3], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[3], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[3], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[3], gg.TYPE_FLOAT)					
				Map_currentD = 1
			end
		elseif MapMenu == 5 then		
			Main()
		end
		Map()
	end
    -- [5] 全般
	Settings_currentB = 1
	Settings_currentC = 1
	Settings_currentD = 1
	Settings_currentE = 1
	Settings_SelectedA = {"\n[1]   ゲーム速度\n"}
	Settings_SelectedB = {"\n[2]   速度制限\n", "\n[ON]   速度制限  =  解除\n"}	
	Settings_SelectedC = {"\n[3]   リザルト画面\n", "\n[ON]   リザルト画面  =  スキップ\n"}	
	Settings_SelectedD = {"\n[4]   討伐・部位破壊時の演出\n", "\n[ON]   討伐・部位破壊時の演出  =  カット\n"}	
	Settings_SelectedE = {"\n[5]   ハンター名\n", "\n[ON]   ハンター名  =  匿名化\n"}	
	Settings_SelectedA_Selected = {false, false, false, false}
	function Settings()	
		gg.setVisible(false)	
		SettingsMenu = gg.choice({
			Settings_SelectedA[1],	
			Settings_SelectedB[Settings_currentB],
			Settings_SelectedC[Settings_currentC],
			Settings_SelectedD[Settings_currentD],
			Settings_SelectedE[Settings_currentE],
			"\n[6]   UIの表示\n",
			"\n[←]    もどる"
		}, nil, "メインメニュー/\n\n全般")
		if SettingsMenu == nil then	
			temporarilyhide()	
		elseif SettingsMenu == 1 then
			LoadNameAddress("_GameSpeed")
			local count = gg.getResultsCount()
			if count >= 1 then
			else
				local libName = "libunity.so"
				local libRanges = gg.getRangesList(libName)	
				if #libRanges == 0 then
					print("Error: Unable to find library range.")
					Settings()
				end
				local libAddress = libRanges[2].start
				local address = libAddress + 0x245698
				gg.setRanges(gg.REGION_C_DATA)
				gg.searchNumber(address, gg.TYPE_QWORD)
				local results = gg.getResults(1)
				local hexaddress = #results > 0 and (string.format("%X", results[1].address) .. "h") or nil
				gg.clearResults()
				gg.setRanges(gg.REGION_ANONYMOUS)
				gg.searchNumber(hexaddress, gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
				applyoffset(0xFC,gg.TYPE_FLOAT)
				local count = gg.getResultsCount()
				if count >= 1 then
					AddNameAddress("_GameSpeed") 
				else
					LoadNameAddress("Quick_GameSpeed")
					AddNameAddress("_GameSpeed") 
				end						      
			end	
			gg.getResults(9999)
			gg.setVisible(false)
			local Value = {"1", "2.5", "5"}
			local menu = gg.choice({
				(Settings_SelectedA_Selected[1] and "\n[ON]   デフォルト\n" or "\n[1]   デフォルト\n"),
				(Settings_SelectedA_Selected[2] and "\n[ON]   "..Value[2].."倍\n" or "\n[2]   "..Value[2].."倍\n"),
				(Settings_SelectedA_Selected[3] and "\n[ON]   "..Value[3].."倍\n" or "\n[3]   "..Value[3].."倍\n"),
				(Settings_SelectedA_Selected[4] and "\n[ON]   任意の値\n" or "\n[4]   任意の値\n"),						
			}, nil, "メインメニュー/全般/\n\nゲーム速度")
			if menu == nil then	
			elseif menu >= 1 and menu<= 4 then
				for i = 1, 4 do
					Settings_SelectedA_Selected[i] = false
				end		
				Settings_SelectedA_Selected[menu] = true						
				if menu >= 1 and menu<= 3 then
					local chosenValue = tostring(menu)
					gg.editAll(Value[menu], gg.TYPE_FLOAT)		
					Settings_SelectedA[1] = "\n[ON]   ゲーム速度  =  "..Value[menu].."倍\n"					
				elseif menu == 4 then
					while true do
						gg.setVisible(false)
						local val = gg.prompt({[1] = "ゲームの速度を変更 #Float型\n\n割合, デフォ: 1\n[  0 ~   ]"}, {[1] = ""}, {"number"})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_FLOAT)	
							Settings_SelectedA[1] = "\n[ON]   ゲーム速度  =  "..val[1].."倍\n"
							break
						else
							temporarilyhide()
						end
					end					
				end
			end							
		elseif SettingsMenu == 2 then
			local start = gg.getRangesList("libil2cpp.so")[2].start
			if Settings_currentB == 1 then
                gg.setValues({{address = start + 0x19C04B4, flags = 4, value = "~A8 ret;"}})
                Settings_currentB = 2
            elseif Settings_currentB == 2 then
                gg.setValues({{address = start + 0x19C04B4, flags = 4, value = "~A8 STR X30, [SP,#-0x10]!;"}})
				Settings_currentB = 1
            end		
		elseif SettingsMenu == 3 then
			local start = gg.getRangesList("libil2cpp.so")[2].start
			if Settings_currentC == 1 then
                gg.setValues({{address = start + 0x1CBA01C, flags = 4, value = "~A8 MOV X0, #0x7F000000;"}})
                Settings_currentC = 2
            elseif Settings_currentC == 2 then
                gg.setValues({{address = start + 0x1CBA01C, flags = 4, value = "~A8 LDRB W0, [X0,#0x28];"}})
				Settings_currentC = 1
            end
		elseif SettingsMenu == 4 then
			if Settings_currentD == 1 then	 
				valueFromClass("BattleConfig")
				applyoffset(0x90, gg.TYPE_QWORD)
				MoveThePointer()
				applyoffset(0x20, gg.TYPE_FLOAT)
				gg.refineNumber("2~3", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
				local count = gg.getResultsCount()
				if count >= 1 then
					AddNameAddress("BattleConfig_FinishTime")
				else
					LoadNameAddress("Quick_FinishTime")
					AddNameAddress("BattleConfig_FinishTime")
				end					
				gg.getResults(9999)
				gg.editAll("0", gg.TYPE_FLOAT)				
				valueFromClass("BattleConfig")
				applyoffset(0xA8, gg.TYPE_QWORD)
				MoveThePointer()
				applyoffset(0x10, gg.TYPE_FLOAT)	
				gg.refineNumber("1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
				local count = gg.getResultsCount()
				if count >= 1 then
					AddNameAddress("BattleConfig_PartBreakTime")
				else
					LoadNameAddress("Quick_PartBreaktime")
					AddNameAddress("BattleConfig_PartBreakTime")
				end					
				gg.getResults(9999)
				gg.editAll("0", gg.TYPE_FLOAT)	
				Settings_currentD = 2	
			else
			end
		elseif SettingsMenu == 5 then		
			if Settings_currentE == 1 then	
				valueFromClass("UserHunterProto")	
				applyoffset(0x10, gg.TYPE_QWORD)
				MoveThePointer()
				applyoffset(0x14, gg.TYPE_DWORD)
				gg.refineNumber("0", gg.TYPE_DWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)			
				gg.getResults(9999)
				gg.editAll("7,209,025", gg.TYPE_DWORD)			
				applyoffset(-0x4, gg.TYPE_DWORD)
				gg.editAll("9", gg.TYPE_DWORD)
				applyoffset(0x8, gg.TYPE_DWORD)
				gg.editAll("7,209,071", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("7,143,545", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("7,667,823", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("115", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("0", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("0", gg.TYPE_DWORD)	
				Settings_currentE = 2		
			else
			end
		elseif SettingsMenu == 6 then
			UI()
		elseif SettingsMenu == 7 then			
			Main()
		end
		Settings()
	end
		-- [5-1] UI
		UI_currentA = 1
		UI_currentB = 1
		UI_currentC = 1
		UI_currentD = 1		
		UI_currentE = 1
		UI_SelectedA = {"\n[OFF]   DPSコンボカウンター\n", "\n[ON]   DPSコンボカウンター\n"}
		UI_SelectedB = {"\n[OFF]   体力状態\n", "\n[ON]   体力状態\n"}		
		UI_SelectedC = {"\n[OFF]   ダメージログ\n", "\n[ON]   ダメージログ\n"}		
		UI_SelectedD = {"\n[OFF]   モンスターのアクションログ\n", "\n[ON]   モンスターのアクションログ\n"}
		UI_SelectedE = {"\n[OFF]   SPスキル演出\n", "\n[ON]   SPスキル演出\n"}	
		function UI()
			gg.setVisible(false)	
			UIMenu = gg.choice({
				UI_SelectedA[UI_currentA],	
				UI_SelectedB[UI_currentB],
				UI_SelectedC[UI_currentC],
				UI_SelectedD[UI_currentD],
				UI_SelectedE[UI_currentE],
				"\n[←]    もどる"
			}, nil, "メインメニュー/全般/\n\nUI")
			if UIMenu == nil then	
				temporarilyhide()			
			elseif UIMenu == 1 then	
				if UI_currentA == 1 then
					Patch("libil2cpp.so",0x193DA54,"20 00 80 52")
					UI_currentA = 2
				elseif UI_currentA == 2 then
					Patch("libil2cpp.so",0x193DA54,"E0 03 1F 2A")
					UI_currentA = 1				
				end			
			elseif UIMenu == 2 then
				if UI_currentB == 1 then
					Patch("libil2cpp.so",0x193D9C4,"20 00 80 52")
					UI_currentB = 2
				elseif UI_currentB == 2 then
					Patch("libil2cpp.so",0x193D9C4,"E0 03 1F 2A")
					UI_currentB = 1				
				end						
			elseif UIMenu == 3 then
				if UI_currentC == 1 then
					Patch("libil2cpp.so",0x193DA3C,"20 00 80 52")
					UI_currentC = 2
				elseif UI_currentC == 2 then
					Patch("libil2cpp.so",0x193DA3C,"E0 03 1F 2A")
					UI_currentC = 1				
				end				
			elseif UIMenu == 4 then
				if UI_currentD == 1 then
					Patch("libil2cpp.so",0x193DA30,"20 00 80 52")
					UI_currentD = 2
				elseif UI_currentD == 2 then
					Patch("libil2cpp.so",0x193DA30,"E0 03 1F 2A")
					UI_currentD = 1				
				end					
			elseif UIMenu == 5 then
				if UI_currentE == 1 then
					Patch("libil2cpp.so",0x193E678,"20 00 80 52")
					UI_currentE = 2
				elseif UI_currentE == 2 then
					Patch("libil2cpp.so",0x193E678,"E0 03 1F 2A")
					UI_currentE = 1				
				end				
			elseif UIMenu == 6 then
				Settings()
			end
			UI()
		end	
	-- [6] クイック設定
	function QuickOption()			
		gg.setVisible(false)	
		QuickOptionMenu = gg.choice({
			"\n[1]   一括選択\n",	
			"\n[2]   バトル用\n",			
			"\n[3]   その他\n",
			"\n[←]    もどる"
		}, nil, "メインメニュー/\n\nクイック設定/")
		if QuickOptionMenu == nil then	
			temporarilyhide()			
		elseif QuickOptionMenu == 1 then
			MultiChoice()
		elseif QuickOptionMenu == 2 then
			OnOff_Battle()
		elseif QuickOptionMenu == 3 then
			OnOff_Other()
		elseif QuickOptionMenu == 4 then
			Main()
		end
		QuickOption()
	end
		-- [6-1] [Choice] 一括選択式
		function MultiChoice()
			gg.setVisible(false)
			local data = {}
			data[1] = true
			data[2] = true
			data[3] = true 
			data[4] = true
			data[5] = true  
			data[6] = true
			data[7] = true
			data[8] = true
			data[9] = true
			data[10] = true
			data[11] = true
			data[12] = true
			data[13] = true
			data[14] = true
			data[15] = true
			data[16] = true
			local Prompt = gg.prompt({
				"[1]   速度制限 解除",
				"[2]   マップの表示・読み込み 範囲拡大",
				"[3]   ハンターアクセス 範囲拡大",		
				"[4]   オトモアクセス 範囲最小",				
				"[5]   ゲーム速度 4倍",		
				"[6]   与えるダメージ 最大",
				"[7]   受けるダメージ 最小",
				"[8]   ダメージリアクション 無効",
				"[9]   SPゲージ 満タン",		
				"[10]   チャージ速度 最速",			
				"[11]   ロックオン 有効",			
				"[12]   モンスターAI 排除",			
				"[13]   部位破壊 容易化",			
				"[14]   リザルト画面 スキップ",
				"[15]   討伐•部位破壊時の演出 カット",						
				"[16]   モンスターの弱点 全属性付与"	
			}, data, {"checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox","checkbox"})
			if Prompt == nil then
				temporarilyhide()	
				Main()
			end
			if Prompt[1] == true then	
				local start = gg.getRangesList("libil2cpp.so")[2].start
				gg.setValues({{address = start + 0x19C04B4, flags = 4, value = "~A8 ret;"}})	
				Settings_currentB = 2
			end
			if Prompt[2] == true then
				Patch("libil2cpp.so",0x193FFCC,"20 00 80 52")
				Map_currentA = 2
				-- マップの読み込み範囲 拡大
				LoadNameAddress("MapController_MapLoad")
				local count = gg.getResultsCount()
				if count >= 1 then
				else			
					gg.setRanges(gg.REGION_ANONYMOUS)
					gg.clearResults()
					gg.setVisible(false)
					gg.searchNumber("h 00 00 00 00 00 E0 85 40", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)			
					applyoffset(0x0, gg.TYPE_DOUBLE)
					gg.refineNumber("700", gg.TYPE_DOUBLE, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("Quick_MapLoad")
				end
				gg.getResults(9999)
				gg.editAll("840", gg.TYPE_DOUBLE)		
				applyoffset(0x8, gg.TYPE_DOUBLE)	
				gg.editAll("840", gg.TYPE_DOUBLE)
			end
			if Prompt[3] == true then		
    			LoadNameAddress("FieldManager_HunterAccess")
    			local count = gg.getResultsCount()
    			if count >= 1 then
    			else
    				valueFromClass("FieldManager")
    				applyoffset(0xA0, gg.TYPE_QWORD)
    				MoveThePointer()
    				applyoffset(0x3C, gg.TYPE_FLOAT)	
    				gg.refineNumber("1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
    				AddNameAddress("FieldManager_HunterAccess")
    			end
    			gg.getResults(9999)
    			gg.editAll("840", gg.TYPE_FLOAT)		
                Map_currentC = 2
            end
			if Prompt[4] == true then		
				LoadNameAddress("FieldConfig_OtomoAccess")
				local count = gg.getResultsCount()
				if count >= 1 then
				else			
					gg.setRanges(gg.REGION_ANONYMOUS)
					gg.clearResults()
					gg.setVisible(false)
					gg.searchNumber("h 00 00 A0 42 00 00 B4 42", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)			
					applyoffset(0x0, gg.TYPE_FLOAT)
					gg.refineNumber("80", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("Quick_OtomoAccess")
				end
				gg.getResults(9999)
				gg.editAll("1", gg.TYPE_FLOAT)
				if Map_currentC == 1 then
        			LoadNameAddress("FieldManager_HunterAccess")
        			local count = gg.getResultsCount()
        			if count >= 1 then
        			else
        				valueFromClass("FieldManager")
        				applyoffset(0xA0, gg.TYPE_QWORD)
        				MoveThePointer()
        				applyoffset(0x3C, gg.TYPE_FLOAT)	
        				gg.refineNumber("1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
        				AddNameAddress("FieldManager_HunterAccess")
        			end
        			gg.getResults(9999)
        			gg.editAll("840", gg.TYPE_FLOAT)			
        			Map_currentC = 2			
				end
			end		
			if Prompt[5] == true then			
				LoadNameAddress("_GameSpeed")
				local count = gg.getResultsCount()
				if count >= 1 then
				else			
					PointerSearch_libunityXa(0x245698, gg.REGION_C_DATA)
					gg.setRanges(gg.REGION_ANONYMOUS)
					SearchPointerbase()
					applyoffset(0xFC, gg.TYPE_FLOAT)
					gg.refineNumber("1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
					AddNameAddress("Quick_GameSpeed")
				end
				gg.getResults(9999)
				gg.editAll("4", gg.TYPE_FLOAT)
			end				
			if Prompt[6] == true then			
				Patch("libil2cpp.so",0x193DB08,"E0 03 26")
				HunterDamage_currentA = 2		
			end
			if Prompt[7] == true then	
				Patch("libil2cpp.so",0x193DC64,"E0 03 27")
				HunterDamage_currentB = 2		
			end
			if Prompt[8] == true then		
				Patch("libil2cpp.so",0x193D86C,"20 00 80 52")
				HunterMotion_currentC = 2		
			end
			if Prompt[9] == true then
				Patch("libil2cpp.so",0x193DD94,"20 00 80 52")
				HunterBattle_currentB = 2		
			end
			if Prompt[10] == true then
				Patch("libil2cpp.so",0x1A64488,"00 10 40 BC")
				ChargeSpeed_currentX = 2		
			end
			if Prompt[11] == true then		
				Patch("libil2cpp.so",0x193E9E4,"20 00 80 52")
				Skill_currentB = 2		
			end
			if Prompt[12] == true then	
				Patch("libil2cpp.so",0x193D8CC,"20 00 80 52")
				MonsterMotion_currentB = 2		
			end
			if Prompt[13] == true then	
				LoadNameAddress("BattleConfig_PartBreak")
				local count = gg.getResultsCount()
				if count >= 1 then
				else			
					gg.setRanges(gg.REGION_ANONYMOUS)
					gg.clearResults()
					gg.setVisible(false)
					gg.searchNumber("h 64 00 00 00 9A 99 19 3E", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)			
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.refineNumber("0.1~0.2", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("Quick_PartBreak")
				end
				gg.editAll("1,000,000,000", gg.TYPE_FLOAT)
				applyoffset(-0x4, gg.TYPE_DWORD)
				gg.editAll("999,999,999", gg.TYPE_DWORD)	
			end
			if Prompt[14] == true then		
				local start = gg.getRangesList("libil2cpp.so")[2].start
				gg.setValues({{address = start + 0x1CBA01C, flags = 4, value = "~A8 MOV X0, #0x7F000000;"}})
				Settings_currentC = 2		
			end
			if Prompt[15] == true then	
				LoadNameAddress("BattleConfig_FinishTime")
				local count = gg.getResultsCount()
				if count >= 1 then
				else			
					gg.setRanges(gg.REGION_ANONYMOUS)
					gg.clearResults()
					gg.setVisible(false)
					gg.searchNumber("h E6 00 00 00 14 00 00 00", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)			
					applyoffset(0x0, gg.TYPE_DWORD)
					gg.refineNumber("230", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)	
					applyoffset(-0x34, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x20, gg.TYPE_FLOAT)
					gg.refineNumber("2~3", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
					AddNameAddress("Quick_FinishTime")
				end
				gg.getResults(9999)
				gg.editAll("0", gg.TYPE_FLOAT)	
				LoadNameAddress("BattleConfig_PartBreakTime")
				local count = gg.getResultsCount()
				if count >= 1 then
				else			
					gg.setRanges(gg.REGION_ANONYMOUS)
					gg.clearResults()
					gg.setVisible(false)
					gg.searchNumber("h E6 00 00 00 14 00 00 00", gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)			
					applyoffset(0x0, gg.TYPE_DWORD)
					gg.refineNumber("230", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)	
					applyoffset(-0x1C, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x10, gg.TYPE_FLOAT)
					gg.refineNumber("1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
					AddNameAddress("Quick_PartBreaktime")
				end
				gg.getResults(9999)
				gg.editAll("0", gg.TYPE_FLOAT)	
			end
			if Prompt[16] == true then
				valueFromClass("ElementalWeaknessChart")
				applyoffset(0x10, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				applyoffset(0x4, gg.TYPE_DWORD)
				gg.editAll("1", gg.TYPE_DWORD)
				Monster_currentC = 2
			end
			QuickOption()	
		end
		OnOffBattle_currentA = 1
		OnOffBattle_SelectedA = {"\n[1]   ゲーム速度\n", "\n[ON]   ゲーム速度  =  2.5倍\n", "\n[ON]   ゲーム速度  =  5倍\n"}
		OnOffBattle_SelectedB = {"\n[2]   与えるダメージ\n", "\n[ON]   与えるダメージ  =  最大\n", "\n[ON]   与えるダメージ  =  10倍\n"}
		OnOffBattle_SelectedC = {"\n[3]   リザルト画面\n", "\n[ON]   リザルト画面  =  スキップ\n"}
		-- [6-2] [Switch] バトル用
		function OnOff_Battle()
			gg.setVisible(false)	
			OnOffBattleMenu = gg.choice({
				OnOffBattle_SelectedA[OnOffBattle_currentA],	
				OnOffBattle_SelectedB[HunterDamage_currentA],
				OnOffBattle_SelectedC[Settings_currentC],
				"\n[←]    もどる"
			}, nil, "メインメニュー/クイック設定/\n\n[Switch] バトル用")
			if OnOffBattleMenu == nil then	
				temporarilyhide()			
			elseif OnOffBattleMenu == 1 then		
				LoadNameAddress("_GameSpeed")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
					local libName = "libunity.so"
					local libRanges = gg.getRangesList(libName)	
					if #libRanges == 0 then
						print("Error: Unable to find library range.")
						Settings()
					end
					local libAddress = libRanges[2].start
					local address = libAddress + 0x245698
					gg.setRanges(gg.REGION_C_DATA)
					gg.searchNumber(address, gg.TYPE_QWORD)
					local results = gg.getResults(1)
					local hexaddress = #results > 0 and (string.format("%X", results[1].address) .. "h") or nil
					gg.clearResults()
					gg.setRanges(gg.REGION_ANONYMOUS)
					gg.searchNumber(hexaddress, gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					applyoffset(0xFC,gg.TYPE_FLOAT)
					local count = gg.getResultsCount()
					if count >= 1 then
						AddNameAddress("_GameSpeed") 
					else
						LoadNameAddress("Quick_GameSpeed")
						AddNameAddress("_GameSpeed") 
					end						      
				end	
				gg.getResults(9999)	
				if OnOffBattle_currentA == 1 then
					gg.editAll("2.5", gg.TYPE_FLOAT)
					OnOffBattle_currentA = 2
				elseif OnOffBattle_currentA == 2 then
					gg.editAll("5", gg.TYPE_FLOAT)
					OnOffBattle_currentA = 3
				elseif OnOffBattle_currentA == 3 then
					gg.editAll("1", gg.TYPE_FLOAT)
					OnOffBattle_currentA = 1
				end
			elseif OnOffBattleMenu == 2 then
				if HunterDamage_currentA == 1 then
					Patch("libil2cpp.so",0x193DB08,"E0 03 26")
					HunterDamage_currentA = 2
				elseif HunterDamage_currentA == 2 then
					Patch("libil2cpp.so",0x193DB08,"00 90 24")
					HunterDamage_currentA = 3
				elseif HunterDamage_currentA == 3 then
					Patch("libil2cpp.so",0x193DB08,"00 10 2E")
					HunterDamage_currentA = 1
				end				
			elseif OnOffBattleMenu == 3 then
				local start = gg.getRangesList("libil2cpp.so")[2].start
				if Settings_currentC == 1 then
					gg.setValues({{address = start + 0x1CBA01C, flags = 4, value = "~A8 MOV X0, #0x7F000000;"}})
					Settings_currentC = 2
				elseif Settings_currentC == 2 then
					gg.setValues({{address = start + 0x1CBA01C, flags = 4, value = "~A8 LDRB W0, [X0,#0x28];"}})
					Settings_currentC = 1
				end	
			elseif OnOffBattleMenu == 4 then	
				QuickOption()
			end
			OnOff_Battle()
		end
		-- [6-3] [Switch] その他	
		OnOffOther_currentA = 1
		OnOffOther_SelectedA = {"\n[3]   装備の強化レベル\n", "\n[ON]   装備の強化レベル  =  Lv5\n", "\n[ON]   装備の強化レベル  =  Lv4\n"}	
		OnOffOther_SelectedB = {"\n[4]   オトモのアクセス範囲\n", "\n[ON]   オトモのアクセス範囲  =  最小\n", "\n[ON]   オトモのアクセス範囲  =  最大\n"}
		function OnOff_Other()	
			gg.setVisible(false)	
			OnOffOtherMenu = gg.choice({
				UI_SelectedA[UI_currentA],		
				UI_SelectedB[UI_currentB],
				OnOffOther_SelectedA[OnOffOther_currentA],
				OnOffOther_SelectedB[Map_currentD],
				"\n[←]    もどる"
			}, nil, "メインメニュー/クイック設定/\n\n[Switch] その他")
			if OnOffOtherMenu == nil then	
				temporarilyhide()			
			elseif OnOffOtherMenu == 1 then
				if UI_currentA == 1 then
					Patch("libil2cpp.so",0x193DA54,"20 00 80 52")
					UI_currentA = 2
				elseif UI_currentA == 2 then
					Patch("libil2cpp.so",0x193DA54,"E0 03 1F 2A")
					UI_currentA = 1				
				end		
			elseif OnOffOtherMenu == 2 then
				if UI_currentB == 1 then
					Patch("libil2cpp.so",0x193D9C4,"20 00 80 52")
					UI_currentB = 2
				elseif UI_currentB == 2 then
					Patch("libil2cpp.so",0x193D9C4,"E0 03 1F 2A")
					UI_currentB = 1				
				end	
			elseif OnOffOtherMenu == 3 then	
				local Value = {"5", "4"}
				valueFromClass("UserHunterWeapon")	
				applyoffset(0x2C, gg.TYPE_DWORD)	
				gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
				gg.getResults(9999)
				if OnOffOther_currentA == 1 or OnOffOther_currentA == 3 then
					gg.editAll(Value[1], gg.TYPE_DWORD)
					valueFromClass("UserHunterArmor")	
					applyoffset(0x2C, gg.TYPE_DWORD)	
					gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					gg.getResults(9999)					
					gg.editAll(Value[1], gg.TYPE_DWORD)
					Craft_currentA = 2
					Craft_currentB = 2
					OnOffOther_currentA = 2
				elseif OnOffOther_currentA == 2 then
					gg.editAll(Value[2], gg.TYPE_DWORD)
					valueFromClass("UserHunterArmor")	
					applyoffset(0x2C, gg.TYPE_DWORD)	
					gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					gg.getResults(9999)					
					gg.editAll(Value[2], gg.TYPE_DWORD)
					Craft_currentA = 3
					Craft_currentB = 3
					OnOffOther_currentA = 3
				end				
			elseif OnOffOtherMenu == 4 then	
				local Value = {"1", "840", "80"}
				LoadNameAddress("FieldConfig_OtomoAccess")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
					valueFromClass("FieldConfig")
					applyoffset(0x18, gg.TYPE_QWORD)
					MoveThePointer()
					applyoffset(0x10, gg.TYPE_FLOAT)	
					gg.refineNumber("80", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
					local count = gg.getResultsCount()
					if count >= 1 then
						AddNameAddress("FieldConfig_OtomoAccess")
					else
						LoadNameAddress("Quick_OtomoAccess")
						AddNameAddress("FieldConfig_OtomoAccess")
					end					
				end			
				gg.getResults(9999)			
			if Map_currentD == 1 then
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				applyoffset(0x4, gg.TYPE_FLOAT)
				gg.editAll(Value[1], gg.TYPE_FLOAT)	
				if Map_currentC == 1 then
    				LoadNameAddress("FieldManager_HunterAccess")
    				local count = gg.getResultsCount()
    				if count >= 1 then
    				else
    					valueFromClass("FieldManager")
    					applyoffset(0xA0, gg.TYPE_QWORD)
    					MoveThePointer()
    					applyoffset(0x3C, gg.TYPE_FLOAT)	
    					gg.refineNumber("1", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)	
    					AddNameAddress("FieldManager_HunterAccess")
    				end		
    				gg.getResults(9999)
    				gg.editAll("840", gg.TYPE_FLOAT)	
    				Map_currentC = 2	
    			end
				Map_currentD = 2
				elseif Map_currentD == 2 then
					gg.editAll(Value[2], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[2], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[2], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[2], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[2], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[2], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[2], gg.TYPE_FLOAT)	
					Map_currentD = 3
				elseif Map_currentD == 3 then
					gg.editAll(Value[3], gg.TYPE_FLOAT)
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[3], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[3], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[3], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[3], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[3], gg.TYPE_FLOAT)	
					applyoffset(0x4, gg.TYPE_FLOAT)
					gg.editAll(Value[3], gg.TYPE_FLOAT)					
					Map_currentD = 1
				end			
			elseif OnOffOtherMenu == 5 then	
				QuickOption()
			end
			OnOff_Other()	
		end
	-- [~] DeveloperMode
	function DeveloperMode()
		gg.showUiButton()
		gg.setVisible(true)	
		local continueProcessing = true
		while true do
			if gg.isClickedUiButton() then	
				DeveloperModemenu = gg.choice({
					"\n[1]   クラス名でAメモリに移動\n",				
					"\n[2]   アドレスの読み込み\n",
					"\n[3]   アドレスの削除\n",     
					"\n[4]   オフセットと型の変更\n",
					"\n[5]   ポインター移動\n",
					"\n[6]   ポインター検索\n",
					"\n[←]   もどる"
				}, nil, "メインメニュー\n\nDeveloperMode")   
				if DeveloperModemenu == nil then
					gg.showUiButton()
					gg.setVisible(true)	
				elseif DeveloperModemenu == 1 then
					classdatasearch = gg.prompt({"クラス名:"},{""},{"text"})
					if classdatasearch[1] == "" or not classdatasearch[1] then
						DeveloperMode()
					end
					inputdata = ":"..classdatasearch[1] 
					gg.setRanges(gg.REGION_OTHER)
					gg.clearResults()
					gg.searchNumber(inputdata, gg.TYPE_BYTE)
					Refinerdata = gg.getResults(1)
					gg.refineNumber(Refinerdata[1].value, gg.TYPE_BYTE)   
					DeleteNameAddress("classpointbase")
					AddNameAddress("classpointbase")			
					LoadNameAddress("classpointbase")
					gg.searchPointer(offst)
					gg.getListItems() 
					gg.getResults(9999) 					
					applyoffset(0xFFFFFFFFFFFFFFF0, gg.TYPE_QWORD)
					gg.refineNumber("0", gg.TYPE_QWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)		
					gg.getListItems() 
					gg.getResults(9999)
					DeleteNameAddress("classpointbase2")
					AddNameAddress("classpointbase2")			
					LoadNameAddress("classpointbase2")	
					gg.setRanges(gg.REGION_ANONYMOUS)
					count = gg.getResultsCount()
					yy = gg.getResults(9999)
					gg.clearResults()
					i = 1
					c = 1
					s = {}
					while (i-1) < count do
						yy[i].address = yy[i].address + 0xB400000000000000
						gg.searchNumber(yy[i].address, gg.TYPE_QWORD)
						local cnt = gg.getResultsCount()
						if 0 < cnt then
							bytr = gg.getResults(cnt)
							n = 1
							while (n-1) < cnt do
								s[c] = {}
								s[c].address = bytr[n].address
								s[c].flags = 32
								n = n + 1
								c = c + 1
							end
						end
						gg.clearResults()
						i = i + 1
					end
					for i, v in ipairs(s) do
						v.name ="reload"
					end
					gg.addListItems(s)
					LoadNameAddress("reload")
					DeleteNameAddress("reload")
					gg.getListItems() 
					gg.getResults(9999) 	  
				elseif DeveloperModemenu == 2 then   
					local val = gg.prompt({[1] = "保存リストから読み込むアドレスの名前を入力"}, {[1] = ""})
					if val == nil then
						gg.showUiButton()
						gg.setVisible(true)
					else
						local results = gg.getListItems()
						local filteredResults = {}
						for _, v in ipairs(results) do
							if v.name == val[1] then
								table.insert(filteredResults, v)
							end
						end					
						gg.loadResults(filteredResults)
						gg.getListItems() 
						gg.getResults(9999) 
					end
					DeveloperMode()
				elseif DeveloperModemenu == 3 then				
					local val = gg.prompt({[1] = "保存リストから削除するアドレスの名前を入力"}, {[1] = ""})
					if val == nil then
						gg.showUiButton()
						gg.setVisible(true)	
					else
						DeleteNameAddress(val[1])  
						gg.getListItems() 
						gg.getResults(9999) 
					end
					DeveloperMode()
				elseif DeveloperModemenu == 4 then
					menuC = gg.choice({
					   "\n[1]   マニュアル\n",
						"\n[2]   オフセット0xFFFFFFFFFFFFFFF0\n       → Qword≠0　を適用\n"
					}, nil, "オフセットと型の変更")   
					if menuC == nil then
						gg.showUiButton()
						gg.setVisible(true)	
					elseif menuC >= 1 and menuC <= 2 then	
						if menuC == 1 then					
							local offsetHex = gg.prompt({"16進数のオフセットを入力"}, {"0"}, {"number"})
							if offsetHex == nil then
								gg.showUiButton()
								gg.setVisible(true)	
							end
							if offsetHex and offsetHex[1] then
								local offsetX = tonumber(offsetHex[1], 16)
								local prompts = {"型の番号を入力\n\n1: Byte,  2: Word,  3: Dword,  4: Qword,  5: Float,  6: Double"}
								local defaultValues = {"3"}
								local userInput = gg.prompt(prompts, defaultValues)
								if userInput then               	
									local userType = userInput[1]
									local typeValue                  
									if userType == "1" then
										typeValue = gg.TYPE_BYTE
									elseif userType == "2" then
										typeValue = gg.TYPE_WORD
									elseif userType == "3" then
										typeValue = gg.TYPE_DWORD
									elseif userType == "4" then
										typeValue = gg.TYPE_QWORD
									elseif userType == "5" then
										typeValue = gg.TYPE_FLOAT
									elseif userType == "6" then
										typeValue = gg.TYPE_DOUBLE
									else
										gg.alert("型が無効です")
										DeveloperMode()
									end
									local results = gg.getResults(999999)
									Offsets = {}
									Offsets['FirstOffset'] = {}
									for index, value in ipairs(results) do
										Offsets['FirstOffset'][index] = {}
										Offsets['FirstOffset'][index].address = results[index].address + offsetX
										Offsets['FirstOffset'][index].flags = typeValue
									end
									gg.getValues(Offsets['FirstOffset'])
									gg.loadResults(Offsets['FirstOffset'])
									gg.getListItems() 
									gg.getResults(9999) 
								else
									gg.showUiButton()
									gg.setVisible(true)	
								end
							else
							end
						elseif menuC == 2 then
							applyoffset(0xFFFFFFFFFFFFFFF0, gg.TYPE_QWORD)
							gg.refineNumber("0", gg.TYPE_QWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)		
							gg.getListItems() 
							gg.getResults(9999) 				
						end
						DeveloperMode() 
					else
						gg.showUiButton()
						gg.setVisible(true)	
					end		
				elseif DeveloperModemenu == 5 then
					local results = gg.getResults(9999)
					gg.clearResults()
                    local newAddresses = {}
                    for i, result in ipairs(results) do
						local values = gg.getValues({{address=result.address, flags=gg.TYPE_QWORD}})
						if values ~= nil and #values > 0 and result.address ~= nil then
							local qwordValue = values[1].value
							local hexQwordValue = string.format("%X", qwordValue)
							local newAddress = tonumber(hexQwordValue, 16)
							if newAddress ~= nil then
							   table.insert(newAddresses, {address=newAddress, flags=gg.TYPE_QWORD, value=qwordValue})
							else
								--print("Warning: Skipping address due to nil newAddress for result.address", result.address)
							end
						else
							--print("Warning: Skipping address due to nil values or address", result.address)
						end
					end
				    if #newAddresses > 0 then
					    gg.loadResults(newAddresses)
				    else
					    print("Error: No valid addresses to load.")
				    end
					gg.getListItems() 
					gg.getResults(9999) 
					DeveloperMode()
				elseif DeveloperModemenu == 6 then
					offsetz = {base, 0xB400000000000000}
					menuD = gg.choice({
						"\n[1]   0x0\n",
						"\n[2]   0xB400000000000000\n",     
					}, nil, "ポインタ検索 (オフセットの選択)")   
					if menuD == nil then
						gg.showUiButton()
						gg.setVisible(true)	
					elseif menuD >= 1 and menuD <= 2 then
						local input = gg.prompt({[1] = "名前を付けてアドレスを保存"}, {[1] = ""})
						if input then       
							DeleteNameAddress("Dev_pointbase_"..input[1])
							AddNameAddress("Dev_pointbase_"..input[1])			
							LoadNameAddress("Dev_pointbase_"..input[1])
							if menuD == 1 then
								gg.searchPointer(offst)
								gg.getListItems() 
								gg.getResults(9999) 
							elseif menuD== 2 then
								count = gg.getResultsCount()
								yy = gg.getResults(9999)
								gg.clearResults()
								i = 1
								c = 1
								s = {}
								while (i-1) < count do
									yy[i].address = yy[i].address + 0xB400000000000000
									gg.searchNumber(yy[i].address, gg.TYPE_QWORD)
									local cnt = gg.getResultsCount()
									if 0 < cnt then
										bytr = gg.getResults(cnt)
										n = 1
										while (n-1) < cnt do
											s[c] = {}
											s[c].address = bytr[n].address
											s[c].flags = 32
											n = n + 1
											c = c + 1
										end
									end
									gg.clearResults()
									i = i + 1
								end
								for i, v in ipairs(s) do
									v.name ="reload"
								end
								gg.addListItems(s)
								LoadNameAddress("reload")
								DeleteNameAddress("reload")
								gg.getListItems() 
								gg.getResults(9999) 
							end		   
						else
							gg.showUiButton()
							gg.setVisible(true)	
						end
					end
				elseif DeveloperModemenu == 7 then
					Main()
				end
			end
		end
	end					
			
			
			
			
			
			
			
------------------------------------------[ 定義 ]------------------------------------------
offst = 0
A = true
B = true
C = true
D = true
E = true
-----------------------------------------[ コマンド ]-----------------------------------------
-- 一時的に非表示にする
function temporarilyhide()
	gg.setVisible(false)
	while true do
		if gg.isVisible() then
			break 
		end
	end 
end
-- 保存リストに指定した名前を"含む"アドレスがあれば項目の表示を切り替える
function IncludeCheckAndTrueFalseA(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		A = true
	else
		A = false
	end
end
function IncludeCheckAndTrueFalseB(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		B = true
	else
		B = false
	end
end
function IncludeCheckAndTrueFalseC(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		C = true
	else
		C = false
	end
end
function IncludeCheckAndTrueFalseD(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		D = true
	else
		D = false
	end
end
function IncludeCheckAndTrueFalseE(targetName)
	local results = gg.getListItems()
	local found = false
	for _, result in ipairs(results) do
		if result.name and string.find(result.name, targetName) then
			found = true
			break
		end
	end
	if found then
		E = true
	else
		E = false
	end
end	
------------------------------------------[ 処理 ]------------------------------------------	
-- 型とオフセットの適用
function applyoffset(selectedOffset, selectedType)
	local results = gg.getResults(9999)
	gg.clearResults()
	for i, v in ipairs(results) do
		v.address = v.address + selectedOffset
		v.flags = selectedType
	end
	gg.loadResults(results)
	gg.getResults(9999)
end	
-- 名前を付けて保存リストに追加
function AddNameAddress(AddName)
	local results = gg.getResults(9999)
	for i, v in ipairs(results) do
		v.name = AddName
	end
	gg.addListItems(results)
	gg.getResults(9999)
end
-- 保存リストから指定した名前のアドレスを読み込む
function LoadNameAddress(LoadName)
	local results = gg.getListItems()
	local filteredResults = {}
	for _, v in ipairs(results) do
		if v.name == LoadName then
			table.insert(filteredResults, v)
		end
	end
	gg.loadResults(filteredResults)
	gg.getResults(9999)
end
-- 保存リストから指定した名前のアドレスを削除する
function DeleteNameAddress(DeleteName)
	local results = gg.getListItems()
	local filteredResults = {}
	for _, v in ipairs(results) do
		if v.name == DeleteName then
			table.insert(filteredResults, v)
		end
	end
	gg.removeListItems(filteredResults)	
	gg.getResults(9999)
end		
-- ポインタ移動
function MoveThePointer()
	local results = gg.getResults(9999)
	gg.clearResults()
	local newAddresses = {}
	for i, result in ipairs(results) do
		local values = gg.getValues({{address=result.address, flags=gg.TYPE_QWORD}})
		if values ~= nil and #values > 0 and result.address ~= nil then
			local qwordValue = values[1].value
			local hexQwordValue = string.format("%X", qwordValue)
			local newAddress = tonumber(hexQwordValue, 16)
			if newAddress ~= nil then
				table.insert(newAddresses, {address=newAddress, flags=gg.TYPE_QWORD, value=qwordValue})
			else
				--print("Warning: Skipping address due to nil newAddress for result.address", result.address)
			end
		else
			--print("Warning: Skipping address due to nil values or address", result.address)
		end
	end
	if #newAddresses > 0 then
		gg.loadResults(newAddresses)
	else
		print("Error: No valid addresses to load.")
	end
	gg.getListItems() 
	gg.getResults(9999) 
end		
-- ポインタ検索 (base)
function SearchPointerbase()
	AddNameAddress("_SearchPointer(base)")
	LoadNameAddress("_SearchPointer(base)")
	DeleteNameAddress("_SearchPointer(base)")
	gg.searchPointer(offst)
	gg.getListItems() 
	gg.getResults(9999)
end
-- libunity.so Xaからポインタ検索
function PointerSearch_libunityXa(offset, region)
	gg.clearResults()
    local libName = "libunity.so"
    local libRanges = gg.getRangesList(libName)
    if #libRanges == 0 then
        print("Error: Unable to find library range.")
        return
    end
    local libAddress = libRanges[2].start
    local address = libAddress + offset
    gg.setRanges(region)
    --gg.setVisible(false)
    gg.searchNumber(address, gg.TYPE_QWORD)
end
-- Xaの書き換え
function Patch(lib, offset,hex)
	gg.setVisible(false)
	local targetAddr = 0
	local hexStrCount = #hex:gsub(" ", "")
	if hexStrCount%2~=0 then return print("Check your hex again. Something wrong there") end 
	local hexCount = hexStrCount/2
	for i, v in ipairs(gg.getRangesList(lib)) do
		if v.type:sub(3,3) == "x" then targetAddr=v.start+offset break end 
	end
	local editHex = {}
	for i=1, hexCount do
		editHex[i] = {address=targetAddr+(i-1), flags=gg.TYPE_BYTE}
	end
	gg.loadResults(editHex)
	gg.getResults(hexCount)
	local edit = "h"..hex
	gg.editAll(edit,1)
	gg.clearResults()
end
-------------------------------------[ オフセットファインダー ]-------------------------------------
--[[ 
(全て名前を付けて保存・読み込みする処理に変更)
保存リストにある名前のついたアドレスを読み込み、条件分岐
・最終アドレスがある場合、読み込んで終了
・最初のクラスデータがある場合、以降の処理だけを実行
・いずれもない場合、通常通り全て実行
]]--
function valueFromClass(class)
	Get_user_input = {}
	Get_user_input[1] = class
	user_input = ":"..Get_user_input[1] 
	error = 0
	gg.setVisible(false)
	local name = {"_Odinitialsearch_"..Get_user_input[1], "_CAapplyoffset_"..Get_user_input[1], "_Qapplyfix_"..Get_user_input[1], "_Abasevalue_"..Get_user_input[1], "_Abaseaccuracy_"..Get_user_input[1]}
	LoadNameAddress(name[3])
	local count = gg.getResultsCount()
	if count >= 1 then		
	else
		start()
	end
	LoadNameAddress(name[3])
	DeleteNameAddress(name[1])
	DeleteNameAddress(name[2])	
	DeleteNameAddress(name[4])	
end
function loopCheck()
	if error == 3 then
		stopClose()
	end
end
function loopCheck()
	if error == 3 then
		stopClose()
	end
end
function found_(message)
	if error == 1 then
		found2(message)
	elseif error == 2 then
		found3(message)
	elseif error == 3 then
		found4(message)
	else
		found(message)
	end
end
function found(message)
   if count == 0 then
		gg.clearResults()
		first_error = message
		error = 1
	   second_start()
   end
end
function found2(message)
	if count == 0 then
		gg.clearResults()
		second_error = message
		error = 2
		third_start()
	end
end
function found3(message)
	if count == 0 then
		gg.clearResults()
		third_error = message
		error = 3
		fourth_start()
	end
end
function found4(message)
	if count == 0 then
		gg.clearResults()
		gg.alert("❌Value NOT FOUND❌\nError Log:\nTry 1: "..first_error.."\nTry 2: "..second_error.."\nTry 3: "..third_error.."\nTry 4: ".. message.."\n\nℹ️エラーの原因ℹ️\n\n🟢O_dinitial_search,: \nクラス名検索\n⇒ クラスデータの誤り\n・スクリプトのシーケンス,クラスデータの誤り\n・バージョン修正\n\n🟡CA_pointer_search, Q_apply_fix: \nポインタ検索1\n⇒ クラスデータが複製されていない\n・変数を生成させてからコードを実行する(変数が生成される条件:該当の装備をするなど))\n\nnaruse1122(Discord)")
		gg.setVisible(true)
		loopCheck()
	end
end   
function O_dinitial_search()
	if error > 1 then
		gg.setRanges(gg.REGION_C_ALLOC)
	else
		gg.setRanges(gg.REGION_OTHER)
	end
	gg.setVisible(false)
	gg.searchNumber(user_input, gg.TYPE_BYTE)
	count = gg.getResultsCount()
	if count == 0 then
		found_("O_dinitial_search")
		return 0
	end
	Refiner = gg.getResults(1)
	gg.refineNumber(Refiner[1].value, gg.TYPE_BYTE)
	count = gg.getResultsCount()
	if count == 0 then
		found_("O_dinitial_search")
		return 0
	end
	AddNameAddress("_Odinitialsearch_"..Get_user_input[1])	 
end
function CA_pointer_search()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	LoadNameAddress("_Odinitialsearch_"..Get_user_input[1])
	gg.setVisible(false)
	gg.searchPointer(offst)
	gg.getListItems() 
	gg.getResults(9999) 
	count = gg.getResultsCount()
	if count == 0 then
		found_("CA_pointer_search")
		return 0
	end
end   
function CA_apply_offset()
	applyoffset(0xFFFFFFFFFFFFFFF0, gg.TYPE_QWORD)
	gg.refineNumber("0", gg.TYPE_QWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)	
	AddNameAddress("_CAapplyoffset_"..Get_user_input[1])	   
end  
function Q_apply_fix()
	gg.setRanges(gg.REGION_ANONYMOUS)
	LoadNameAddress("_CAapplyoffset_"..Get_user_input[1])
	count = gg.getResultsCount()
	if count == 0 then
		found_("Q_apply_fix")
		return 0
	end
	yy = gg.getResults(9999)
	gg.clearResults()
	i = 1
	c = 1
	s = {}
	while (i-1) < count do
		yy[i].address = yy[i].address + 0xB400000000000000
		gg.setVisible(false)
		gg.searchNumber(yy[i].address, gg.TYPE_QWORD)
		local cnt = gg.getResultsCount()
		if 0 < cnt then
			bytr = gg.getResults(cnt)
			n = 1
			while (n-1) < cnt do
				s[c] = {}
				s[c].address = bytr[n].address
				s[c].flags = 32
				n = n + 1
				c = c + 1
			end
		end
		gg.clearResults()
		i = i + 1
	end
	for i, v in ipairs(s) do
		v.name = "_Qapplyfix_"..Get_user_input[1]
	end
	gg.addListItems(s)
end   
function A_base_value()
	gg.setRanges(gg.REGION_ANONYMOUS)
	LoadNameAddress("_CAapplyoffset_"..Get_user_input[1])
	gg.setVisible(false)	
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_value")
		return 0
	end
	AddNameAddress("_Abasevalue_"..Get_user_input[1])	   
end
function A_base_accuracy()
	gg.setRanges(gg.REGION_ANONYMOUS | gg.REGION_C_ALLOC)
	LoadNameAddress("_Abasevalue_"..Get_user_input[1])
	gg.setVisible(false)
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_accuracy")
		return 0
	end
	kol = gg.getResults(count)
	i = 1
	h = {}
	while (i-1) < count do
		h[i] = {}
		h[i].address = kol[i].value
		h[i].flags = 32
		i = i + 1
	end
	AddNameAddress("_Abaseaccuracy_"..Get_user_input[1])	   
end
function A_base_accuracy2()
	gg.setRanges(gg.REGION_ANONYMOUS | gg.REGION_C_ALLOC)
	LoadNameAddress("_Qapplyfix_"..Get_user_input[1])
	gg.setVisible(false)
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_accuracy")
		return 0
	end
	kol = gg.getResults(count)
	i = 1
	h = {}
	while (i-1) < count do
		h[i] = {}
		h[i].address = kol[i].value
		h[i].flags = 32
		i = i + 1
	end
	AddNameAddress("_Abaseaccuracy_"..Get_user_input[1])	   
end
function start()
	gg.toast("🟡First Try")
	O_dinitial_search()
	if error > 1 then
		return 0
	end
	CA_pointer_search()
	if error > 1 then
		return 0
	end
	CA_apply_offset()
	if error > 1 then
		return 0
	end
	Q_apply_fix()
	if error > 1 then
		return 0
	end
	A_base_accuracy2()
	if error > 1 then
		return 0
	end
	loopCheck()
	if error > 1 then
		return 0
	end
end 
function second_start()
	gg.toast("🟡Second Try")
	O_dinitial_search()
	if error > 0 then
		return 0
	end
	CA_pointer_search()
	if error > 0 then
		return 0
	end
	CA_apply_offset()
	if error > 0 then
		return 0
	end
	A_base_value()
	if error > 0 then
		return 0
	end
	A_base_accuracy()
	if error > 0 then
		return 0
	end
	loopCheck()
	if error > 0 then
		return 0
	end
end 
function third_start()
	gg.toast("🔴Third Try")
	O_dinitial_search()
	if error > 2 then
		return 0
	end
	CA_pointer_search()
	if error > 2 then
		return 0
	end
	CA_apply_offset()
	if error > 2 then
		return 0
	end
	A_base_value()
	if error > 2 then
		return 0
	end
	A_base_accuracy()
	if error > 2 then
		return 0
	end
	loopCheck()
	if error > 2 then
      return 0
	end
end
function fourth_start()
	gg.toast("☢️Fourth Try")
	O_dinitial_search()
	CA_pointer_search()
	CA_apply_offset()
	Q_apply_fix()
	A_base_accuracy2()
	loopCheck()
end
function stopClose()
	while true do
		Main()
		gg.setVisible(false)
		while gg.isVisible() == false do
		end
	end
end
-- スタートは"Main"
stopClose()			
