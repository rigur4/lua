--[[
  GameName : Monster Hunter Now
   Version : 68.1
UpdateDate : 2024/1/16
]]--
userMode = 2
gg.clearList()
gg.clearResults()
gg.alert("\nコードの追加に伴い、スクリプトの使用感を向上させるためにコードを書き直しています。\n徐々に新しいコードを追加していくので今しばらくお待ちください。\n\n2024/01/16")
---------------------------------------------------------------------------
function mainMenu()
    IncludeCheckAndTrueFalseA("_Equipment")
	main_Selected = {A}	
	gg.setVisible(false)	
    firstMenu = gg.choice({
		(main_Selected[1] and "-> [1]    装備" or "[1]    装備"),
		"[X]    おわる"
	}, nil,"メインメニュー\n\nMonster - 68.1 (2024/1/16)")
    if firstMenu == nil then
		temporarilyhide()	
		mainMenu()
	elseif firstMenu == 1 then	
		Equipment()
	elseif firstMenu == 2 then
		gg.clearList()
		gg.clearResults()
	    os.exit()
	end
end
	function Equipment()
		IncludeCheckAndTrueFalseA("_Bowgun_Equipment")
		Equipmentl_Selected = {A}
		gg.setVisible(false)	
		EquipmentMenu = gg.choice({
			(Equipmentl_Selected[1] and "-> [1]    ボウガン*" or "[1]    ボウガン*"),
			"[←]    もどる"
		}, nil,"メインメニュー/装備\n*該当の装備をした後に実行")		
		if EquipmentMenu == nil then
			temporarilyhide()	
			Equipment()
		elseif EquipmentMenu == 1 then	
			BowgunAmmoSpecRecoilType_Selected = {false, false, false, false, false}	
			Bowgun()
		elseif EquipmentMenu == 2 then					
			mainMenu()
		end		
	end
		function Bowgun()
			IncludeCheckAndTrueFalseA("RecoilType_Bowgun_Equipment")
			IncludeCheckAndTrueFalseB("ReloadType_Bowgun_Equipment")
			IncludeCheckAndTrueFalseC("Capacity_Bowgun_Equipment")
			IncludeCheckAndTrueFalseD("AmmoType_Bowgun_Equipment")
			IncludeCheckAndTrueFalseE("AmmoElementType_Bowgun_Equipment")
			IncludeCheckAndTrueFalseF("AmmoLevel_Bowgun_Equipment")
			Bowgun_Selected = {A, B, C, D, E, F}	
			gg.clearResults()
			local offset = {0x8, 0xC, 0x10, 0x14, 0x18, 0x1C}
			local function applyoffset(selectedOffset)
				local results1 = gg.getResults(9999)
				for i, v in ipairs(results1) do
					v.address = v.address + selectedOffset
					v.flags = gg.TYPE_DWORD
				end
				gg.loadResults(results1)
			end
			gg.setVisible(false)
			BowgunMenu = gg.choice({
				(Bowgun_Selected[1] and "-> [1]    反動パターン" or "[1]    反動パターン"),
				(Bowgun_Selected[2] and "-> [2]    装填パターン" or "[2]    装填パターン"),
				(Bowgun_Selected[3] and "-> [3]    装填数" or "[3]    装填数"),
				(Bowgun_Selected[4] and "-> [4]    弾薬の種類" or "[4]    弾薬の種類"),
				(Bowgun_Selected[5] and "-> [5]    弾薬の属性" or "[5]    弾薬の属性"),
				(Bowgun_Selected[6] and "-> [6]    弾薬のレベル" or "[6]    弾薬のレベル"),
				"[←]    もどる"
			}, nil, "メインメニュー/ボウガン")
			if BowgunMenu == nil then
				temporarilyhide()
				Bowgun()
			elseif BowgunMenu >= 1 and BowgunMenu <= 6 then
				CheckAndLoadResults("Bowgun_Equipment")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
					valueFromClass("BowgunAmmoSpec", "B", "0x10", false, false, gg.TYPE_DWORD)	
				end			
				if BowgunMenu == 1 then
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "BowgunAmmoSpec(0x10)RecoilType_Bowgun_Equipment"
					end
					gg.addListItems(results)				
					applyoffset(offset[1])
					BowgunAmmoSpec_RecoilType()
				elseif BowgunMenu == 2 then
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "BowgunAmmoSpec(0x10)ReloadType_Bowgun_Equipment"
					end
					gg.addListItems(results)	
					applyoffset(offset[2])
					BowgunAmmoSpec_ReloadType()
				elseif BowgunMenu == 3 then
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "BowgunAmmoSpec(0x10)Capacity_Bowgun_Equipment"
					end
					gg.addListItems(results)				
					applyoffset(offset[3])
					BowgunAmmoSpec_Capacity()
				elseif BowgunMenu >= 4 and BowgunMenu <= 6 then
					local results2 = gg.getResults(9999)
					gg.clearResults()
					local newAddresses = {}
					for i, result in ipairs(results2) do
						local qwordValue = gg.getValues({{address = result.address, flags = gg.TYPE_QWORD}})[1].value
						local hexQwordValue = string.format("%X", qwordValue)
						local newAddress = tonumber(hexQwordValue, 16)
						table.insert(newAddresses, {address = newAddress, flags = gg.TYPE_QWORD, value = qwordValue})
					end
					gg.loadResults(newAddresses)
					if BowgunMenu == 4 then
						local results = gg.getResults(9999)
						for i, v in ipairs(results) do
							v.name = "BowgunAmmoSpec(0x10)AmmoType_Bowgun_Equipment"
						end
						gg.addListItems(results)						
						applyoffset(offset[4])
						BowgunAmmoSettingsProto_AmmoType()
					elseif BowgunMenu == 5 then
						local results = gg.getResults(9999)
						for i, v in ipairs(results) do
							v.name = "BowgunAmmoSpec(0x10)AmmoElementType_Bowgun_Equipment"
						end
						gg.addListItems(results)						
						applyoffset(offset[5])
						BowgunAmmoSettingsProto_AmmoElementType()
					elseif BowgunMenu == 6 then
						local results = gg.getResults(9999)
						for i, v in ipairs(results) do
							v.name = "BowgunAmmoSpec(0x10)AmmoLevel_Bowgun_Equipment"
						end
						gg.addListItems(results)						
						applyoffset(offset[6])
						BowgunAmmoSettingsProto_AmmoLevel()
					end
				end
			elseif BowgunMenu == 7 then
				Equipment()
			end
		end
		function BowgunAmmoSpec_RecoilType()
				gg.getResults(9999)
				gg.setVisible(false)
				local BowgunRecoilType = {
					(BowgunAmmoSpecRecoilType_Selected[1] and "-> [1]    パターン1   (最小)" or "[1]    パターン1   (最小)"),
					(BowgunAmmoSpecRecoilType_Selected[2] and "-> [2]    パターン2" or "[2]    パターン2"),
					(BowgunAmmoSpecRecoilType_Selected[3] and "-> [3]    パターン3" or "[3]    パターン3"),
					(BowgunAmmoSpecRecoilType_Selected[4] and "-> [4]    パターン4   (最大)" or "[4]    パターン4   (最大)"),	
					(BowgunAmmoSpecRecoilType_Selected[5] and "-> [5]    任意の値" or "[5]    任意の値"),	
					"[←]    もどる"
				}
				BowgunAmmoSpecRecoilTypeMenu = gg.choice(BowgunRecoilType, nil, "メインメニュー/ボウガン性能/反動パターン")
				if BowgunAmmoSpecRecoilTypeMenu == nil then
					temporarilyhide()	
					BowgunAmmoSpec_RecoilType()
				 elseif BowgunAmmoSpecRecoilTypeMenu >= 1 and BowgunAmmoSpecRecoilTypeMenu <= 5 then
					for i = 1, 5 do
						BowgunAmmoSpecRecoilType_Selected[i] = false
					end
					BowgunAmmoSpecRecoilType_Selected[BowgunAmmoSpecRecoilTypeMenu] = true					
					if BowgunAmmoSpecRecoilTypeMenu >= 1 and BowgunAmmoSpecRecoilTypeMenu <= 4 then
						local chosenValue = tostring(BowgunAmmoSpecRecoilTypeMenu)
						gg.editAll(chosenValue, gg.TYPE_DWORD)
						BowgunAmmoSpec_RecoilType()
					elseif BowgunAmmoSpecRecoilTypeMenu == 5 then	
						while true do
							gg.setVisible(false)
							val = gg.prompt({[1] = "ボウガンの反動パターンを変更\n(範囲:1~4,1:小,2:中,3:大,4:特大,DWORD)"}, {[1] = ""})
							if val and val[1] ~= nil then
								gg.editAll(val[1], gg.TYPE_FLOAT)
								break
							else
								temporarilyhide()
							end
						end
						BowgunAmmoSpec_RecoilType()
					end
				elseif BowgunAmmoSpecRecoilTypeMenu == 6 then
					Bowgun()
				end	
			end	

			function BowgunAmmoSpec_ReloadType()
				gg.getResults(9999)
				gg.setVisible(false)
				local BowgunReloadType = {
					"[1]    パターン1   (最短)",
					"[2]    パターン2",
					"[3]    パターン3",
					"[4]    パターン4   (最長)",	
					"[5]    任意の値",	
					"[←]    もどる"
				}
				BowgunAmmoSpecReloadTypeMenu = gg.choice(BowgunReloadType, nil,"メインメニュー/ボウガン/装填パターン")
				if BowgunAmmoSpecReloadTypeMenu == nil then
					temporarilyhide()	
					BowgunAmmoSpec_ReloadType()
				elseif BowgunAmmoSpecReloadTypeMenu >= 1 and BowgunAmmoSpecReloadTypeMenu <= 4 then
					local chosenValue = tostring(BowgunAmmoSpecReloadTypeMenu)
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					BowgunAmmoSpec_ReloadType()	
				elseif BowgunAmmoSpecReloadTypeMenu == 5 then	
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの装填パターンを変更\n(範囲:1~4,1:小,2:中,3:大,4:特大,DWORD)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_FLOAT)
							break
						else
							temporarilyhide()
						end
					end
					BowgunAmmoSpec_ReloadType()					
				elseif BowgunAmmoSpecReloadTypeMenu  == 6 then
					Bowgun()
				end	
			end			
			function BowgunAmmoSpec_Capacity()
				gg.getResults(9999)
				gg.setVisible(false)
				local BowgunCapacityValue = {"5", "50"}
				BowgunAmmoSpecCapacityMenu = gg.choice({
					"[1]    " .. BowgunCapacityValue[1],
					"[2]    " .. BowgunCapacityValue[2],
					"[3]    任意の値",
					"[←]    もどる"
				}, nil,"メインメニュー/ボウガン/装填数")
				if BowgunAmmoSpecCapacityMenu == nil then
					temporarilyhide()	
					BowgunAmmoSpec_Capacity()
				elseif BowgunAmmoSpecCapacityMenu >= 1 and BowgunAmmoSpecCapacityMenu <= 2 then
					local chosenValue = BowgunCapacityValue[BowgunAmmoSpecCapacityMenu]
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					BowgunAmmoSpec_Capacity()
				elseif BowgunAmmoSpecCapacityMenu == 3 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの装填数を変更\n(Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end
					BowgunAmmoSpec_Capacity()
				elseif BowgunAmmoSpecCapacityMenu == 4 then
					Bowgun()
				end	
			end	
			function BowgunAmmoSettingsProto_AmmoType()
				gg.getResults(9999)		
				gg.setVisible(false)	
				local BowgunAmmoType = {
					"[1]    通常弾",
					"[2]    貫通弾",
					"[3]    散弾",
					"[4]    徹甲榴弾",
					"[5]    斬裂弾",		
					"[6]    任意の値",		
					"[←]    もどる"
				}
				BowgunAmmoSettingsProtoAmmoTypeMenu = gg.choice(BowgunAmmoType, nil,"メインメニュー/ボウガン/弾薬種類")
				if BowgunAmmoSettingsProtoAmmoTypeMenu == nil then
					temporarilyhide()	
					BowgunAmmoSettingsProto_AmmoType()
				elseif BowgunAmmoSettingsProtoAmmoTypeMenu >= 1 and BowgunAmmoSettingsProtoAmmoTypeMenu <= 5 then
					local chosenValue = tostring(BowgunAmmoSettingsProtoAmmoTypeMenu)
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					BowgunAmmoSettingsProto_AmmoType()
				elseif BowgunAmmoSettingsProtoAmmoTypeMenu == 6 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの弾薬の種類を変更\n(範囲:1~5,1:通常弾,2:貫通弾,3:散弾,4:徹甲榴弾,5:斬裂弾,Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end		
					BowgunAmmoSettingsProto_AmmoType()
				elseif BowgunAmmoSettingsProtoAmmoTypeMenu == 7 then
					Bowgun()
				end
			end		
			function BowgunAmmoSettingsProto_AmmoElementType()
				gg.getResults(9999)		
				gg.setVisible(false)	
				local BowgunAmmoElementType = {
					"[1]    なし",
					"[2]    火",
					"[3]    水",
					"[4]    雷",
					"[5]    氷",
					"[6]    龍",
					"[7]    毒",
					"[8]    麻痺",
					"[9]    睡眠",
					"[10]    爆破",	
					"[11]    任意の値",	
					"[←]    もどる"
				}
				BowgunAmmoSettingsProtoAmmoElementTypeMenu = gg.choice(BowgunAmmoElementType, nil,"メインメニュー/装備/ボウガン弾薬種類/属性\n*7以上は機能しない")
				if BowgunAmmoSettingsProtoAmmoElementTypeMenu == nil then
					temporarilyhide()	
					BowgunAmmoSettingsProto_AmmoElementType()
				elseif BowgunAmmoSettingsProtoAmmoElementTypeMenu >= 1 and BowgunAmmoSettingsProtoAmmoElementTypeMenu <= 10 then
					local chosenValue = tostring(BowgunAmmoSettingsProtoAmmoElementTypeMenu)
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					BowgunAmmoSettingsProto_AmmoElementType()
				elseif BowgunAmmoSettingsProtoAmmoElementTypeMenu == 11 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの弾薬の属性種類を変更\n(範囲:1~10,1:なし,2:火,3:水,4雷,5:氷,6:龍,7:毒,8:麻痺,9:睡眠,10:爆破,Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end					
					BowgunAmmoSettingsProto_AmmoElementType()
				elseif BowgunAmmoSettingsProtoAmmoElementTypeMenu == 12 then
					Bowgun()
				end
			end		
			function BowgunAmmoSettingsProto_AmmoLevel()
				gg.getResults(9999)		
				gg.setVisible(false)	
				local BowgunAmmoLevel = {"1"}	
				EquipmentBowgunAmmoLevelMenu = gg.choice({
					"[1]    " .. BowgunAmmoLevel[1],
					"[2]    任意",		
					"[←]    もどる"
				}, nil,"メインメニュー/装備/ボウガン弾薬種類/レベル\n*2以上は機能しない")
				if EquipmentBowgunAmmoLevelMenu == nil then
					temporarilyhide()	
					BowgunAmmoSettingsProto_AmmoLevel()
				elseif EquipmentBowgunAmmoLevelMenu == 1 then
					local chosenValue = BowgunAmmoLevel[EquipmentBowgunAmmoLevelMenu]
					gg.editAll(chosenValue,gg.TYPE_DWORD)
					BowgunAmmoSettingsProto_AmmoLevel()
				elseif EquipmentBowgunAmmoLevelMenu == 2 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの弾薬のレベルを変更\n(範囲:1~?,Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end					
					BowgunAmmoSettingsProto_AmmoLevel()
				elseif EquipmentBowgunAmmoLevelMenu == 3 then
					Bowgun()
				end
			end				
	
	
	
	
	
	
        function Equipment_Level()
			IncludeCheckAndTrueFalseA("UserHunterWeapon")
			IncludeCheckAndTrueFalseB("UserHunterArmor")
			EquipmentLevel_Selected = {A, B}	
			gg.clearResults()				
            gg.setVisible(false)
				EquipmentLevelMenu = gg.choice({
				(EquipmentLevel_Selected[1] and "-> [1]    全武器" or "[1]    全武器"),
				(EquipmentLevel_Selected[2] and "-> [2]    全防具" or "[2]    全防具"),
				"[←]    戻る"
            }, nil,"メインメニュー/装備/強化レベル変更")
            if EquipmentLevelMenu == nil then
            	temporarilyhide()	
                Equipment_Level()
            elseif EquipmentLevelMenu >= 1 and EquipmentLevelMenu <= 2 then
				if EquipmentLevelMenu == 1 then
					CheckAndLoadResults("UserHunterWeapon")
					local count = gg.getResultsCount()
					if count >= 1 then
					else
						valueFromClass("UserHunterWeapon", "U", "0x2C", false, false, gg.TYPE_DWORD)
						gg.getResults(9999)	
						gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)	
						local results = gg.getResults(9999)
						for i, v in ipairs(results) do
							v.name = "UserHunterWeapon(0x2C)_Equipment_Level_"
						end
						gg.addListItems(results)
					end
                	Equipment_Level_AllWeapon()
                elseif EquipmentLevelMenu == 2 then
					CheckAndLoadResults("UserHunterArmor")
					local count = gg.getResultsCount()
					if count >= 1 then
					else
						valueFromClass("UserHunterArmor", "U", "0x2C", false, false, gg.TYPE_DWORD)
						gg.getResults(9999)
						gg.refineNumber("1~5", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
						local results = gg.getResults(9999)
						for i, v in ipairs(results) do
							v.name = "UserHunterArmor(0x2C)_Equipment_Level_"
						end
						gg.addListItems(results)
					end
                	Equipment_Level_AllArmor()
				end
            elseif EquipmentLevelMenu == 3 then  
            	Equipment()
            end
        end	
			function Equipment_Level_AllWeapon()
				IncludeCheckAndTrueFalseA("UserHunterWeapon")
				EquipmentLevelAllWeapon_Selected = {A, A}
				gg.getResults(9999)		
				gg.setVisible(false)
				local AllWeaponLevel = {"5"}	
				EquipmentLevelAllWeaponMenu = gg.choice({
					(EquipmentLevelAllWeapon_Selected[1] and "-> [1]    アップグレード可能" or "[1]    アップグレード可能"),
					(EquipmentLevelAllWeapon_Selected[2] and "-> [2]    任意の値" or "[2]    任意の値"),
					"[←]    もどる"
				}, nil,"メインメニュー/装備/強化レベル変更/全武器")
				if EquipmentLevelAllWeaponMenu == nil then
					temporarilyhide()	
					Equipment_Level_AllWeapon()
				elseif EquipmentLevelAllWeaponMenu == 1 then	
					local chosenValue = AllWeaponLevel[EquipmentLevelAllWeaponMenu]
					gg.editAll(chosenValue,gg.TYPE_DWORD)
					Equipment_Level_AllWeapon()
				elseif EquipmentLevelAllWeaponMenu == 2 then    
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "全武器の強化レベルを変更\n(範囲:1~5,Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end		        
					Equipment_Level_AllWeapon()
				elseif EquipmentLevelAllWeaponMenu == 3 then
					Equipment_Level()
				end
			end
			function Equipment_Level_AllArmor()
				IncludeCheckAndTrueFalseA("UserHunterArmor")
				EquipmentLevelAllArmor_Selected = {A, A}
				gg.getResults(9999)	
				gg.setVisible(false)
				local AllArmorLevel = {"5"}	
				EquipmentLevelAllArmorMenu = gg.choice({
					(EquipmentLevelAllArmor_Selected[1] and "-> [1]    アップグレード可能" or "[1]    アップグレード可能"),
					(EquipmentLevelAllArmor_Selected[2] and "-> [2]    任意の値" or "[2]    任意の値"),
					"[←]    もどる"
				}, nil,"メインメニュー/装備/強化レベル変更/全防具")
				if EquipmentLevelAllArmorMenu == nil then
					temporarilyhide()	
					Equipment_Level_AllArmor()
				elseif EquipmentLevelAllArmorMenu == 1 then	
					local chosenValue = AllArmorLevel[EquipmentLevelAllArmorMenu]
					gg.editAll(chosenValue,gg.TYPE_DWORD)
					Equipment_Level_AllArmor()
				elseif EquipmentLevelAllArmorMenu == 2 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "全防具の強化レベルを変更\n(範囲:1~5,Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end		        
					Equipment_Level_AllArmor()
				elseif EquipmentLevelAllArmorMenu == 3 then
					Equipment_Level()
				end
			end			
        function Equipment_AllWeaponSpec()
			IncludeCheckAndTrueFalseA("WeaponLevelSpecSettingsProto")
			IncludeCheckAndTrueFalseB("WeaponSpecSettingsProto")
			EquipmentAllWeaponSpec_Selected = {A, A, A, B}	
			gg.clearResults()
            gg.setVisible(false)
			EquipmentAllWeaponSpecMenu = gg.choice({
				(EquipmentAllWeaponSpec_Selected[1] and "-> [1]    攻撃値" or "[1]    攻撃値"),
				(EquipmentAllWeaponSpec_Selected[2] and "-> [2]    属性攻撃値" or "[2]    属性攻撃値"),
				(EquipmentAllWeaponSpec_Selected[3] and "-> [3]    会心値" or "[3]    会心値"),
				(EquipmentAllWeaponSpec_Selected[4] and "-> [4]    属性種類" or "[4]    属性種類"),
				"[←]    戻る"
            }, nil, "メインメニュー/装備/全武器性能")
            if EquipmentAllWeaponSpecMenu == nil then
                temporarilyhide()
                Equipment_AllWeaponSpec()
            elseif EquipmentAllWeaponSpecMenu >= 1 and EquipmentAllWeaponSpecMenu <= 3 then
                CheckAndLoadResults("WeaponLevelSpecSettingsProto")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
                    valueFromClass("WeaponLevelSpecSettingsProto", "W", "0x14", false, false, gg.TYPE_DWORD)
                    gg.getResults(9999)
                    gg.refineNumber("0~", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "WeaponLevelSpecSettingsProto(0x14)_Equipment_AllWeaponSpec_"
					end
					gg.addListItems(results)
                end
                results = gg.getResults(9999)
                for i, v in ipairs(results) do
                    v.address = v.address + (0x4 + 0x4 * (EquipmentAllWeaponSpecMenu))
                    v.flags = gg.TYPE_DWORD
                end
                gg.loadResults(results)
                if EquipmentAllWeaponSpecMenu == 1 then
                    Equipment_AllWeaponSpec_Attack()
                elseif EquipmentAllWeaponSpecMenu == 2 then
                    Equipment_AllWeaponSpec_ElementAttack()
                elseif EquipmentAllWeaponSpecMenu == 3 then
                    Equipment_AllWeaponSpec_Critical()
                end
            elseif EquipmentAllWeaponSpecMenu == 4 then
                CheckAndLoadResults("WeaponSpecSettingsProto")
				local count = gg.getResultsCount()
                if count >= 1 then
				else				
                    valueFromClass("WeaponSpecSettingsProto", "W", "0x1C", false, false, gg.TYPE_DWORD)
                    gg.getResults(9999)
                    gg.refineNumber("1~10", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "WeaponSpecSettingsProto(0x1C)_Equipment_AllWeaponSpec_"
					end
					gg.addListItems(results)
                end
                Equipment_AllWeaponSpec_ElementType()
            elseif EquipmentAllWeaponSpecMenu == 5 then
                Equipment()
            end
        end
    		function Equipment_AllWeaponSpec_Attack()
				IncludeCheckAndTrueFalseA("WeaponLevelSpecSettingsProto")
				EquipmentAllWeaponSpecAttack_Selected = {A, A, A, A}	
    			gg.getResults(9999)
    			gg.setVisible(false)
   				local AllWeaponAttackValue = {"3,000", "12,000", "30,000,000"}
    			EquipmentAllWeaponSpecAttackMenu = gg.choice({
					(EquipmentAllWeaponSpecAttack_Selected[1] and "-> [1]    "  .. AllWeaponAttackValue[1] or "[1]    "  .. AllWeaponAttackValue[1]),
					(EquipmentAllWeaponSpecAttack_Selected[2] and "-> [2]    "  .. AllWeaponAttackValue[2] or "[2]    "  .. AllWeaponAttackValue[2]),
					(EquipmentAllWeaponSpecAttack_Selected[3] and "-> [3]    "  .. AllWeaponAttackValue[3] or "[3]    "  .. AllWeaponAttackValue[3]),
					(EquipmentAllWeaponSpecAttack_Selected[4] and "-> [4]    任意の値" or "[4]    任意の値"),
					"[←]    もどる"
    			}, nil, "メインメニュー/装備/全武器性能/攻撃値")
    			if EquipmentAllWeaponSpecAttackMenu == nil then
    				temporarilyhide()
   					Equipment_AllWeaponSpec_Attack()
   				elseif EquipmentAllWeaponSpecAttackMenu >= 1 and EquipmentAllWeaponSpecAttackMenu <= 3 then
    				local chosenValue = AllWeaponAttackValue[EquipmentAllWeaponSpecAttackMenu]
    				gg.editAll(chosenValue, gg.TYPE_DWORD)
					Equipment_AllWeaponSpec_Attack()
    			elseif EquipmentAllWeaponSpecAttackMenu == 4 then
    				while true do
    					gg.setVisible(false)
    					val = gg.prompt({[1] = "全武器の攻撃値を変更\n(Dword)"}, {[1] = ""})
   						if val and val[1] ~= nil then
   							gg.editAll(val[1], gg.TYPE_DWORD)
    						break
    					else
    						temporarilyhide()
    					end
    				end
    				Equipment_AllWeaponSpec_Attack()
    			elseif EquipmentAllWeaponSpecAttackMenu == 5 then
    				Equipment_AllWeaponSpec()
    			end
    		end	
    		function Equipment_AllWeaponSpec_ElementAttack()
				IncludeCheckAndTrueFalseA("WeaponLevelSpecSettingsProto")
				EquipmentAllWeaponSpecElementAttack_Selected = {A, A, A, A}	
    			gg.getResults(9999)
    			gg.setVisible(false)
    			local AllWeaponElementAttackValue = {"1,500", "6,000", "15,000,000"}
    			EquipmentAllWeaponSpecElementAttackMenu = gg.choice({
					(EquipmentAllWeaponSpecElementAttack_Selected[1] and "-> [1]    "  .. AllWeaponElementAttackValue[1] or "[1]    "  .. AllWeaponElementAttackValue[1]),
					(EquipmentAllWeaponSpecElementAttack_Selected[2] and "-> [2]    "  .. AllWeaponElementAttackValue[2] or "[2]    "  .. AllWeaponElementAttackValue[2]),
					(EquipmentAllWeaponSpecElementAttack_Selected[3] and "-> [3]    "  .. AllWeaponElementAttackValue[3] or "[3]    "  .. AllWeaponElementAttackValue[3]),
					(EquipmentAllWeaponSpecElementAttack_Selected[4] and "-> [4]    任意の値" or "[4]    任意の値"),
					"[←]    もどる"
    			}, nil, "メインメニュー/装備/全武器性能/属性攻撃値")
    			if EquipmentAllWeaponSpecElementAttackMenu == nil then
    				temporarilyhide()
    				Equipment_AllWeaponSpec_ElementAttack()
    			elseif EquipmentAllWeaponSpecElementAttackMenu >= 1 and EquipmentAllWeaponSpecElementAttackMenu <= 3 then
    				local chosenValue = AllWeaponElementAttackValue[EquipmentAllWeaponSpecElementAttackMenu]
    				gg.editAll(chosenValue, gg.TYPE_DWORD)
    				Equipment_AllWeaponSpec_ElementAttack()
    			elseif EquipmentAllWeaponSpecElementAttackMenu == 4 then
    				while true do
    					gg.setVisible(false)
    					val = gg.prompt({[1] = "全武器の属性攻撃値を変更\n(Dword)"}, {[1] = ""})
   						if val and val[1] ~= nil then
    						gg.editAll(val[1], gg.TYPE_DWORD)									
    						break
    					else
    						temporarilyhide()
    					end
    				end
    				Equipment_AllWeaponSpec_ElementAttack()
    			elseif EquipmentAllWeaponSpecElementAttackMenu == 5 then
    				Equipment_AllWeaponSpec()
    			end
    		end			
    		function Equipment_AllWeaponSpec_Critical()
				IncludeCheckAndTrueFalseA("WeaponLevelSpecSettingsProto")
				EquipmentAllWeaponSpecCritical_Selected = {A, A, A}	
    			gg.getResults(9999)
    			gg.setVisible(false)
    			local AllWeaponCriticalValue = {"30", "100"}
    			EquipmentAllWeaponSpecCriticalMenu = gg.choice({
					(EquipmentAllWeaponSpecCritical_Selected[1] and "-> [1]    " .. AllWeaponCriticalValue[1] or "[1]    " .. AllWeaponCriticalValue[1]),
					(EquipmentAllWeaponSpecCritical_Selected[2] and "-> [2]    " .. AllWeaponCriticalValue[2] or "[2]    " .. AllWeaponCriticalValue[2]),
					(EquipmentAllWeaponSpecCritical_Selected[3] and "-> [3]    任意の値"),
					"[←]    もどる"
    			}, nil, "メインメニュー/装備/全武器性能/会心率")
    			if EquipmentAllWeaponSpecCriticalMenu == nil then
    				temporarilyhide()
    				Equipment_AllWeaponSpec_Critical()
    			elseif EquipmentAllWeaponSpecCriticalMenu >= 1 and EquipmentAllWeaponSpecCriticalMenu <= 2 then
    				local chosenValue = AllWeaponCriticalValue[EquipmentAllWeaponSpecCriticalMenu]
    				gg.editAll(chosenValue, gg.TYPE_DWORD)
    				Equipment_AllWeaponSpec_Critical()
    			elseif EquipmentAllWeaponSpecCriticalMenu == 3 then
    				while true do
    					gg.setVisible(false)
    					val = gg.prompt({[1] = "全武器の会心率を変更\n(範囲:-100～100,Dword)"}, {[1] = ""})
   						if val and val[1] ~= nil then
    						gg.editAll(val[1], gg.TYPE_DWORD)									
    						break
    					else
    						temporarilyhide()
    					end
    				end
    				Equipment_AllWeaponSpec_Critical()
    			elseif EquipmentAllWeaponSpecCriticalMenu == 4 then
    				Equipment_AllWeaponSpec()
    			end
    		end		
    		function Equipment_AllWeaponSpec_ElementType()
				IncludeCheckAndTrueFalseA("WeaponSpecSettingsProto")
				EquipmentAllWeaponSpecElementType_Selected = {A, A, A, A, A, A, A, A, A, A, A}	
    			gg.getResults(9999)
    			gg.setVisible(false)
    			local AllWeaponElementType = {
					(EquipmentAllWeaponSpecElementType_Selected[1] and "-> [1]    なし" or "[1]    なし"),
					(EquipmentAllWeaponSpecElementType_Selected[2] and "-> [2]    火" or "[2]    火"),
					(EquipmentAllWeaponSpecElementType_Selected[3] and "-> [3]    水" or "[3]    水"),
					(EquipmentAllWeaponSpecElementType_Selected[4] and "-> [4]    雷" or "[4]    雷"),
					(EquipmentAllWeaponSpecElementType_Selected[5] and "-> [5]    氷" or "[5]    氷"),
					(EquipmentAllWeaponSpecElementType_Selected[6] and "-> [6]    龍" or "[6]    龍"),
					(EquipmentAllWeaponSpecElementType_Selected[7] and "-> [7]    毒" or "[7]    毒"),
					(EquipmentAllWeaponSpecElementType_Selected[8] and "-> [8]    麻痺" or "[8]    麻痺"),
					(EquipmentAllWeaponSpecElementType_Selected[9] and "-> [9]    睡眠" or "[9]    睡眠"),
					(EquipmentAllWeaponSpecElementType_Selected[10] and "-> [10]    爆破" or "[10]    爆破"),
					(EquipmentAllWeaponSpecElementType_Selected[11] and "-> [11]    任意の値" or "[11]    任意の値"),		
					"[←]    もどる"
    			}
    			EquipmentAllWeaponSpecElementTypeMenu = gg.choice(AllWeaponElementType, nil, "メインメニュー/装備/全武器性能/属性種類")
    			if EquipmentAllWeaponSpecElementTypeMenu == nil then
    				temporarilyhide()
    				Equipment_AllWeaponSpec_ElementType()
    			elseif EquipmentAllWeaponSpecElementTypeMenu >= 1 and EquipmentAllWeaponSpecElementTypeMenu <= 10 then
    				local chosenValue = tostring(EquipmentAllWeaponSpecElementTypeMenu)
    				gg.editAll(chosenValue, gg.TYPE_DWORD)
    				Equipment_AllWeaponSpec_ElementType()
    			elseif EquipmentAllWeaponSpecElementTypeMenu == 11 then
    				while true do
    					gg.setVisible(false)
    					val = gg.prompt({[1] = "全武器の属性種類を変更\n(範囲:1~10,1:なし,2:火,3:水,4雷,5:氷,6:龍,7:毒,8:麻痺,9:睡眠,10:爆破,Dword)"}, {[1] = ""})
   						if val and val[1] ~= nil then
    						gg.editAll(val[1], gg.TYPE_DWORD)
    						break
    					else
    						temporarilyhide()
    					end
    				end				
    				Equipment_AllWeaponSpec_ElementType()
    			elseif EquipmentAllWeaponSpecElementTypeMenu == 12 then
    				Equipment_AllWeaponSpec()
    			end
    		end		
        function Equipment_AllArmorSpec()
			IncludeCheckAndTrueFalseA("ArmorLevelSpecSettingsProto")
			IncludeCheckAndTrueFalseB("ArmorSpecSettingsProto")
			EquipmentAllArmorSpec_Selected = {A, A, B}	
			gg.clearResults()
            gg.setVisible(false)
            EquipmentAllArmorSpecMenu = gg.choice({
				(EquipmentAllArmorSpec_Selected[1] and "-> [1]    防御値" or "[1]    防御値"),
				(EquipmentAllArmorSpec_Selected[2] and "-> [2]    属性防御値" or "[2]    属性防御値"),
				(EquipmentAllArmorSpec_Selected[3] and "-> [3]    属性種類" or "[3]    属性種類"),
				"[←]    戻る"
            }, nil, "メインメニュー/装備/全防具性能")
            if EquipmentAllArmorSpecMenu == nil then
                temporarilyhide()
                Equipment_AllArmorSpec()
            elseif EquipmentAllArmorSpecMenu >= 1 and EquipmentAllArmorSpecMenu <= 2 then
				CheckAndLoadResults("ArmorLevelSpecSettingsProto")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
                    valueFromClass("ArmorLevelSpecSettingsProto", "A", "0x14", false, false, gg.TYPE_DWORD)
                    gg.getResults(9999)
                    gg.refineNumber("0~", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "ArmorLevelSpecSettingsProto(0x14)_Equipment_AllArmorSpec_"
					end
					gg.addListItems(results)
                end
                results = gg.getResults(9999)
                for i, v in ipairs(results) do
                    v.address = v.address + (0x8 + 0x4 * (EquipmentAllArmorSpecMenu))
                    v.flags = gg.TYPE_DWORD
                end
                gg.loadResults(results)
                if EquipmentAllArmorSpecMenu == 1 then
                    Equipment_AllArmorSpec_Defence()
                elseif EquipmentAllArmorSpecMenu == 2 then
                    Equipment_AllArmorSpec_ElementDefence()
				end
            elseif EquipmentAllArmorSpecMenu == 3 then
                CheckAndLoadResults("ArmorSpecSettingsProto")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
                    valueFromClass("ArmorSpecSettingsProto", "A", "0x1C", false, false, gg.TYPE_DWORD)
                    gg.getResults(9999)
                    gg.refineNumber("1~10", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "ArmorSpecSettingsProto(0x1C)_Equipment_AllArmorSpec_"
					end
					gg.addListItems(results)
				end
				Equipment_AllArmorSpec_ElementType()
            elseif EquipmentAllArmorSpecMenu == 4 then
                Equipment()
            end
        end		
			function Equipment_AllArmorSpec_Defence()
				IncludeCheckAndTrueFalseA("ArmorLevelSpecSettingsProto")
				EquipmentAllArmorSpecDefence_Selected = {A, A, A, A}	
				gg.getResults(9999)
				gg.setVisible(false)
				local AllArmorDefenceValue = {"300", "1,200", "3,000,000"}
				EquipmentAllArmorSpecDefenceMenu = gg.choice({
					(EquipmentAllArmorSpecDefence_Selected[1] and "-> [1]    " .. AllArmorDefenceValue[1] or "[1]    " .. AllArmorDefenceValue[1]),
					(EquipmentAllArmorSpecDefence_Selected[2] and "-> [2]    " .. AllArmorDefenceValue[2] or "[2]    " .. AllArmorDefenceValue[2]),
					(EquipmentAllArmorSpecDefence_Selected[3] and "-> [3]    " .. AllArmorDefenceValue[3] or "[3]    " .. AllArmorDefenceValue[3]),
					(EquipmentAllArmorSpecDefence_Selected[4] and "-> [4]    任意の値"),
					"[←]    もどる"
				}, nil, "メインメニュー/装備/全防具性能/防御値")
				if EquipmentAllArmorSpecDefenceMenu == nil then
					temporarilyhide()
					Equipment_AllArmorSpec_Defence()
				elseif EquipmentAllArmorSpecDefenceMenu >= 1 and EquipmentAllArmorSpecDefenceMenu <= 3 then
					local chosenValue = AllArmorDefenceValue[EquipmentAllArmorSpecDefenceMenu]
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					Equipment_AllArmorSpec_Defence()
				elseif EquipmentAllArmorSpecDefenceMenu == 4 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "全防具の防御値を変更\n(Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end
					Equipment_AllArmorSpec_Defence()
				elseif EquipmentAllArmorSpecDefenceMenu == 5 then
					Equipment_AllArmorSpec()
				end	
			end
			function Equipment_AllArmorSpec_ElementDefence()
				IncludeCheckAndTrueFalseA("ArmorLevelSpecSettingsProto")
				EquipmentAllArmorSpecElementDefence_Selected = {A, A, A, A}
				gg.getResults(9999)
				gg.setVisible(false)
				local AllArmorElementDefenceValue = {"150", "600", "1,500,000"}
				EquipmentAllArmorSpecElementDefenceMenu = gg.choice({
					(EquipmentAllArmorSpecElementDefence_Selected[1] and "-> [1]    " .. AllArmorElementDefenceValue[1] or "[1]    " .. AllArmorElementDefenceValue[1]),
					(EquipmentAllArmorSpecElementDefence_Selected[2] and "-> [2]    " .. AllArmorElementDefenceValue[2] or "[2]    " .. AllArmorElementDefenceValue[2]),
					(EquipmentAllArmorSpecElementDefence_Selected[3] and "-> [3]    " .. AllArmorElementDefenceValue[3] or "[3]    " .. AllArmorElementDefenceValue[3]),
					(EquipmentAllArmorSpecElementDefence_Selected[4] and "-> [4]    任意の値"),
					"[←]    もどる"
				}, nil, "メインメニュー/装備/全防具性能/属性防御値")
				if EquipmentAllArmorSpecElementDefenceMenu == nil then
					temporarilyhide()
					Equipment_AllArmorSpec_ElementDefence()
				else
					if EquipmentAllArmorSpecElementDefenceMenu >= 1 and EquipmentAllArmorSpecElementDefenceMenu <= 3 then
						local chosenValue = AllArmorElementDefenceValue[EquipmentAllArmorSpecElementDefenceMenu]
						gg.editAll(chosenValue, gg.TYPE_DWORD)
						Equipment_AllArmorSpec_ElementDefence()
					elseif EquipmentAllArmorSpecElementDefenceMenu == 4 then
						while true do
							gg.setVisible(false)
							val = gg.prompt({[1] = "全防具の属性防御値を変更\n(Dword)"}, {[1] = ""})
							if val and val[1] ~= nil then
								gg.editAll(val[1], gg.TYPE_DWORD)									
								break
							else
								temporarilyhide()
							end
						end
						Equipment_AllArmorSpec_ElementDefence()
					elseif EquipmentAllArmorSpecElementDefenceMenu == 5 then
						Equipment_AllArmorSpec()
					end
				end
			end	
			function Equipment_AllArmorSpec_ElementType()
				IncludeCheckAndTrueFalseA("ArmorSpecSettingsProto")
				EquipmentAllArmorSpecElementType_Selected = {A, A, A, A, A, A, A, A, A, A, A}	
				gg.getResults(9999)
				gg.setVisible(false)		
				local AllArmorElementType = {
					(EquipmentAllArmorSpecElementType_Selected[1] and "-> [1]    なし" or "[1]    なし"),
					(EquipmentAllArmorSpecElementType_Selected[2] and "-> [2]    火" or "[2]    火"),
					(EquipmentAllArmorSpecElementType_Selected[3] and "-> [3]    水" or "[3]    水"),
					(EquipmentAllArmorSpecElementType_Selected[4] and "-> [4]    雷" or "[4]    雷"),
					(EquipmentAllArmorSpecElementType_Selected[5] and "-> [5]    氷" or "[5]    氷"),
					(EquipmentAllArmorSpecElementType_Selected[6] and "-> [6]    龍" or "[6]    龍"),
					(EquipmentAllArmorSpecElementType_Selected[7] and "-> [7]    毒" or "[7]    毒"),
					(EquipmentAllArmorSpecElementType_Selected[8] and "-> [8]    麻痺" or "[8]    麻痺"),
					(EquipmentAllArmorSpecElementType_Selected[9] and "-> [9]    睡眠" or "[9]    睡眠"),
					(EquipmentAllArmorSpecElementType_Selected[10] and "-> [10]    爆破" or "[10]    爆破"),
					(EquipmentAllArmorSpecElementType_Selected[11] and "-> [11]    任意の値" or "[11]    任意の値"),		
					"[←]    もどる"
				}
				EquipmentAllArmorSpecElementTypeMenu = gg.choice(AllArmorElementType, nil, "メインメニュー/装備/全防具性能/属性種類")
				if EquipmentAllArmorSpecElementTypeMenu == nil then
					temporarilyhide()
					Equipment_AllArmorSpec_ElementType()
				else
					if EquipmentAllArmorSpecElementTypeMenu >= 1 and EquipmentAllArmorSpecElementTypeMenu <= 10 then
						local chosenValue = tostring(EquipmentAllArmorSpecElementTypeMenu)
						gg.editAll(chosenValue, gg.TYPE_DWORD)
						Equipment_AllArmorSpec_ElementType()
					elseif EquipmentAllArmorSpecElementTypeMenu == 11 then	
						while true do
							gg.setVisible(false)
							val = gg.prompt({[1] = "全防具の属性種類を変更\n(範囲:1~10,1:なし,2:火,3:水,4雷,5:氷,6:龍,7:毒,8:麻痺,9:睡眠,10:爆破,Dword)"}, {[1] = ""})
							if val and val[1] ~= nil then
								gg.editAll(val[1], gg.TYPE_DWORD)
								break
							else
								temporarilyhide()
							end
						end
						Equipment_AllArmorSpec_ElementType()
					elseif EquipmentAllArmorSpecElementTypeMenu == 12 then
						Equipment_AllArmorSpec()
					end
				end
			end
		function Equipment_SwordAndShield()
			IncludeCheckAndTrueFalseA("GuardSequenceClip")
			EquipmentSwordAndShield_Selected = {A}	
            gg.clearResults()
			gg.setVisible(false)
    		EquipmentSwordAndShieldMenu = gg.choice({
				(EquipmentSwordAndShield_Selected[1] and "-> [1]    ガード時のリアクション種類*" or "[1]    ガード時のリアクション種類*"),
				"[←]    もどる"
    	    }, nil,"メインメニュー/装備/片手剣\n*該当する装備をしてから実行すること")
   		    if EquipmentSwordAndShieldMenu == nil then
    		    temporarilyhide()	
    		    Equipment_SwordandShield()
    	    elseif EquipmentSwordAndShieldMenu == 1 then	
                CheckAndLoadResults("GuardSequenceClip")
				local count = gg.getResultsCount()
				if count >= 1 then
				else   			
					valueFromClass("GuardSequenceClip", "G", "0x28", false, false, gg.TYPE_DWORD)
					gg.getResults(9999)
					gg.refineNumber("0~", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "GuardSequenceClip(0x28)_Equipment_SwordAndShield_"
					end
					gg.addListItems(results)
				end
    		    Equipment_SwordandShield_GuardReactionType()
    		elseif EquipmentSwordAndShieldMenu == 2 then    
				gg.clearList()
				Equipment()
            end
   	    end	    	
            function Equipment_SwordandShield_GuardReactionType()
				IncludeCheckAndTrueFalseA("GuardSequenceClip")
				EquipmentSwordAndShield_Selected = {A, A, A}
        		local offsets = {0x0, 0x8, 0x10}
       			local resultList = gg.getListItems()
        		local modifiedResults = {}
        		local function applyOffset(offset)
       				for _, result in ipairs(resultList) do
        				table.insert(modifiedResults, {address = result.address + offset, value = result.value, flags = result.flags})
        			end
        			gg.loadResults(modifiedResults)
       				gg.getResults(9999)
        		end
        		gg.setVisible(false)
        		EquipmentSwordandShieldGuardReactionTypeMenu = gg.choice({
					(EquipmentSwordAndShield_Selected[1] and "-> [1]    小" or "[1]    小"),
        			(EquipmentSwordAndShield_Selected[2] and "-> [2]    中" or "[2]    中"),
        			(EquipmentSwordAndShield_Selected[3] and "-> [3]    大" or "[3]    大"),
        			"[←]    もどる"
        		}, nil,"メインメニュー/装備/片手剣/ガード時のリアクション種類")
        		if EquipmentSwordandShieldGuardReactionTypeMenu == nil then
        			temporarilyhide()	
       				Equipment_SwordandShield_GuardReactionType()
       			elseif EquipmentSwordandShieldGuardReactionTypeMenu == 1 then	
        			applyOffset(offsets[1])
       				local resultList = gg.getResults(9999)
       				local initialValue = resultList[1].value
        			for _, result in ipairs(resultList) do
        				gg.editAll(tostring(initialValue), gg.TYPE_DWORD)
        				applyOffset(offsets[2])
        				gg.getResults(9999)
        				gg.editAll(tostring(initialValue), gg.TYPE_DWORD)	
        				applyOffset(offsets[3])
        				gg.getResults(9999)
        				gg.editAll(tostring(initialValue), gg.TYPE_DWORD)
        		    end
        			Equipment_SwordandShield_GuardReactionType()
        		elseif EquipmentSwordandShieldGuardReactionTypeMenu == 2 then	
        			applyOffset(offsets[2])
        			local resultList = gg.getResults(9999)
        			local initialValue = resultList[1].value
        			for _, result in ipairs(resultList) do
        				gg.editAll(tostring(initialValue), gg.TYPE_DWORD)
        				applyOffset(offsets[1])
        				gg.getResults(9999)
        				gg.editAll(tostring(initialValue), gg.TYPE_DWORD)	
        				applyOffset(offsets[3])
        				gg.getResults(9999)
        				gg.editAll(tostring(initialValue), gg.TYPE_DWORD)
        			end
        			Equipment_SwordandShield_GuardReactionType()
        		elseif EquipmentSwordandShieldGuardReactionTypeMenu == 3 then	
        			applyOffset(offsets[3])
        			local resultList = gg.getResults(9999)
        			local initialValue = resultList[1].value
        			for _, result in ipairs(resultList) do
        			    gg.editAll(tostring(initialValue), gg.TYPE_DWORD)
        				applyOffset(offsets[1])
        				gg.getResults(9999)
        				gg.editAll(tostring(initialValue), gg.TYPE_DWORD)	
        				applyOffset(offsets[2])
        				gg.getResults(9999)
        				gg.editAll(tostring(initialValue), gg.TYPE_DWORD)
        			end
        			Equipment_SwordandShield_GuardReactionType()
        		elseif EquipmentSwordandShieldGuardReactionTypeMenu == 4 then
        			Equipment_SwordandShield()
        		end
        	end		
		function Equipment_DualBlades()
			IncludeCheckAndTrueFalseA("BattleDualBladesLogicSetup")
			EquipmentDualBlades_Selected = {A, A}	
            gg.clearResults()
    		gg.setVisible(false)
    	    EquipmentDualBladesMenu = gg.choice({
				(EquipmentDualBlades_Selected[1] and "-> [1]    鬼人化時のスタミナ維持時間*" or "[1]    鬼人化時のスタミナ維持時間*"),
				(EquipmentDualBlades_Selected[2] and "-> [2]    鬼人化に必要なスタミナ回復時間*" or "[2]    鬼人化に必要なスタミナ回復時間*"),
				"[←]    もどる"
    		}, nil,"メインメニュー/装備/双剣\n*該当する装備をしてから実行すること")
    		if EquipmentDualBladesMenu == nil then
    			temporarilyhide()	
    			Equipment_DualBlades()
    		elseif EquipmentDualBladesMenu >= 1 and EquipmentDualBladesMenu <= 2 then	
    		    CheckAndLoadResults("BattleDualBladesLogicSetup")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
                    valueFromClass("BattleDualBladesLogicSetup", "B", "0x38", false, false, gg.TYPE_FLOAT)
                    gg.getResults(9999)
                    gg.refineNumber("0~", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "BattleDualBladesLogicSetup(0x38)_Equipment_DualBlades_"
					end
					gg.addListItems(results)
                end 
				if EquipmentDualBladesMenu == 1 then
					Equipment_DualBlades_DemonModeStaminaConsumptionTime()
				elseif EquipmentDualBladesMenu == 2 then  
					results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.address = v.address + 0x4
						v.flags = gg.TYPE_FLOAT
					end
					gg.loadResults(results)
					Equipment_DualBlades_NormalModeStaminaRecoveryTime()
				end
    	    elseif EquipmentDualBladesMenu == 3 then    
    		    gg.clearList()
				Equipment()
			end
    	end
            function Equipment_DualBlades_DemonModeStaminaConsumptionTime()
				IncludeCheckAndTrueFalseA("BattleDualBladesLogicSetup")
				EquipmentDualBlades_Selected = {A, A, A}	
				gg.getResults(9999)
				gg.setVisible(false)
				local DualBladesStaminaConsumptionTime = {"15", "120"}
				EquipmentDualBladesDemonModeStaminaConsumptionTimeMenu = gg.choice({
					(EquipmentDualBlades_Selected[1] and "-> [1]    デフォルト" or "[1]    デフォルト"),
					(EquipmentDualBlades_Selected[2] and "-> [2]    120秒" or "[2]    120秒"),
					(EquipmentDualBlades_Selected[3] and "-> [3]    任意の値" or "[3]    任意の値"),
					"[←]    もどる"
				}, nil,"メインメニュー/装備/双剣/鬼人化時のスタミナ維持時間")
				if EquipmentDualBladesDemonModeStaminaConsumptionTimeMenu == nil then
					temporarilyhide()	
					Equipment_DualBlades_DemonModeStaminaConsumptionTime()
				elseif EquipmentDualBladesDemonModeStaminaConsumptionTimeMenu >= 1 and EquipmentDualBladesDemonModeStaminaConsumptionTimeMenu <= 2 then
					local chosenValue = DualBladesStaminaConsumptionTime[EquipmentDualBladesDemonModeStaminaConsumptionTimeMenu]
					gg.editAll(chosenValue, gg.TYPE_FLOAT)
					Equipment_DualBlades_DemonModeStaminaConsumptionTime()
				elseif EquipmentDualBladesDemonModeStaminaConsumptionTimeMenu == 3 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "双剣の鬼人化時のスタミナ維持時間を変更\n(秒[s],デフォ:15,Float)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_FLOAT)
							break
						else
							temporarilyhide()
						end
					end
					Equipment_DualBlades_DemonModeStaminaConsumptionTime()
				elseif EquipmentDualBladesDemonModeStaminaConsumptionTimeMenu == 4 then
					Equipment_DualBlades()
				end	
			end
			function Equipment_DualBlades_NormalModeStaminaRecoveryTime()
				IncludeCheckAndTrueFalseA("BattleDualBladesLogicSetup")
				EquipmentDualBlades_Selected = {A, A, A}	
				gg.getResults(9999)
				gg.setVisible(false)
				local DualBladesStaminaRecoveryTime = {"15", "0"}
				EquipmentDualBladesNormalModeStaminaRecoveryTimeMemu = gg.choice({
					(EquipmentDualBlades_Selected[1] and "-> [1]    デフォルト" or "[1]    デフォルト"),
					(EquipmentDualBlades_Selected[2] and "-> [2]    不要" or "[2]    不要"),
					(EquipmentDualBlades_Selected[3] and "-> [3]    任意の値" or "[3]    任意の値"),
					"[←]    もどる"
				}, nil,"メインメニュー/装備/双剣性質/鬼人化に必要なスタミナ回復時間")
				if EquipmentDualBladesNormalModeStaminaRecoveryTimeMemu == nil then
					temporarilyhide()	
					Equipment_DualBlades_NormalModeStaminaRecoveryTime()
				else	
					if EquipmentDualBladesNormalModeStaminaRecoveryTimeMemu >= 1 and EquipmentDualBladesNormalModeStaminaRecoveryTimeMemu <= 2 then
						local chosenValue = DualBladesStaminaRecoveryTime[EquipmentDualBladesNormalModeStaminaRecoveryTimeMemu]
						gg.editAll(chosenValue, gg.TYPE_FLOAT)
						Equipment_DualBlades_NormalModeStaminaRecoveryTime()
					else
						if EquipmentDualBladesNormalModeStaminaRecoveryTimeMemu == 3 then
							while true do
								gg.setVisible(false)
								val = gg.prompt({[1] = "双剣の鬼人化に必要なスタミナ回復時間を入力\n(秒[s],デフォ:15,Float)"}, {[1] = ""})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_FLOAT)
									break
								else
									temporarilyhide()
								end
							end
							Equipment_DualBlades_NormalModeStaminaRecoveryTime()
						elseif EquipmentDualBladesNormalModeStaminaRecoveryTimeMemu == 4 then
							Equipment_DualBlades()
						end	
					end
				end
			end	
        function Equipment_LongSword()
			IncludeCheckAndTrueFalseA("BattleLongSwordLogicSetup")
			EquipmentLongSword_Selected = {A, A}	
            gg.clearResults()
    		gg.setVisible(false)
    	    EquipmentLongSwordMenu = gg.choice({
				(EquipmentLongSword_Selected[1] and "-> [1]    兜割が出せる閾値*" or "[1]    兜割が出せる閾値*"),
				(EquipmentLongSword_Selected[2] and "-> [2]    練気が消費され始める迄の猶予*" or "[2]    練気が消費され始める迄の猶予*"),
				"[←]    もどる"
    		}, nil,"メインメニュー/装備/太刀\n*該当する装備をしてから実行すること")
    		if EquipmentLongSwordMenu == nil then
    			temporarilyhide()	
    			Equipment_LongSword()
    		elseif EquipmentLongSwordMenu >= 1 and EquipmentLongSwordMenu <= 2 then	   
    			CheckAndLoadResults("BattleLongSwordLogicSetup")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
                    valueFromClass("BattleLongSwordLogicSetup", "B", "0x1C", false, false, gg.TYPE_DWORD)
                    gg.getResults(9999)
                    gg.refineNumber("0~", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "BattleLongSwordLogicSetup(0x1C)_Equipment_LongSword_"
					end
					gg.addListItems(results)
                end   
				if EquipmentLongSwordMenu == 1 then  
					Equipment_LongSword_RequireSpiritsForHelmBreaker()
				elseif EquipmentLongSwordMenu == 2 then    
					results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.address = v.address + 0x34
						v.flags = gg.TYPE_FLOAT
					end
					gg.loadResults(results)
					Equipment_LongSword_SpiritCostGracePeriod()
				end
    	    elseif EquipmentLongSwordMenu == 3 then    
    		    gg.clearList()
				Equipment()
    		end
		end
			function Equipment_LongSword_RequireSpiritsForHelmBreaker()
				IncludeCheckAndTrueFalseA("BattleLongSwordLogicSetup")
				EquipmentLongSword_Selected = {A, A, A}	
				gg.getResults(9999)
    			gg.setVisible(false)
				local LongSwordRequireSpiritsForHelmBreakerVlue = {"140","1"}
				EquipmentLongSwordRequireSpiritsForHelmBreakerMenu = gg.choice({
					(EquipmentLongSword_Selected[1] and "-> [1]    デフォルト" or "[1]    デフォルト"),
					(EquipmentLongSword_Selected[2] and "-> [2]    即可能" or "[2]    即可能"),
					(EquipmentLongSword_Selected[3] and "-> [3]    任意の値" or "[3]    任意の値"),
					"[←]    もどる"
				}, nil,"メインメニュー/装備/太刀/兜割が出せる閾値")
				if EquipmentLongSwordRequireSpiritsForHelmBreakerMenu == nil then
					temporarilyhide()	
					Equipment_LongSword_RequireSpiritsForHelmBreaker()
				elseif EquipmentLongSwordRequireSpiritsForHelmBreakerMenu >= 1 and EquipmentLongSwordRequireSpiritsForHelmBreakerMenu <= 2 then
					local chosenValue = LongSwordRequireSpiritsForHelmBreakerVlue[EquipmentLongSwordRequireSpiritsForHelmBreakerMenu]
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					Equipment_LongSword_RequireSpiritsForHelmBreaker()
				else
					if EquipmentLongSwordRequireSpiritsForHelmBreakerMenu == 3 then
						while true do
							gg.setVisible(false)
							val = gg.prompt({[1] = "太刀の兜割が出せる閾値を変更\n(デフォ:140,Dword)"}, {[1] = ""})
							if val and val[1] ~= nil then
								gg.editAll(val[1], gg.TYPE_DWORD)
								break
							else
								temporarilyhide()
							end
						end
						Equipment_LongSword_RequireSpiritsForHelmBreaker()
					elseif EquipmentLongSwordRequireSpiritsForHelmBreakerMenu == 4 then
						Equipment_LongSword()
					end	
				end
			end		
			function Equipment_LongSword_SpiritCostGracePeriod()
				IncludeCheckAndTrueFalseA("BattleLongSwordLogicSetup")
				EquipmentLongSword_Selected = {A, A, A}
				gg.getResults(9999)
    			gg.setVisible(false)
				local LongSwordSpiritCostGracePeriod = {"2", "120"}
				EquipmentLongSwordLogicSpiritCostGracePeriodMenu = gg.choice({
					(EquipmentLongSword_Selected[1] and "-> [1]    デフォルト" or "[1]    デフォルト"),
					(EquipmentLongSword_Selected[2] and "-> [2]    120秒" or "[2]    120秒"),
					(EquipmentLongSword_Selected[3] and "-> [3]    任意の値" or "[3]    任意の値"),
					"[←]    もどる"
				}, nil,"メインメニュー/装備/太刀/練気が消費され始める迄の猶予")
				if EquipmentLongSwordLogicSpiritCostGracePeriodMenu == nil then
					temporarilyhide()	
					Equipment_LongSword_SpiritCostGracePeriod()
				else	
					if EquipmentLongSwordLogicSpiritCostGracePeriodMenu >= 1 and EquipmentLongSwordLogicSpiritCostGracePeriodMenu <= 2 then
						local chosenValue = LongSwordSpiritCostGracePeriod[EquipmentLongSwordLogicSpiritCostGracePeriodMenu]
						gg.editAll(chosenValue, gg.TYPE_FLOAT)
						Equipment_LongSword_SpiritCostGracePeriod()
					else
						if EquipmentLongSwordLogicSpiritCostGracePeriodMenu == 3 then
							while true do
								gg.setVisible(false)
								val = gg.prompt({[1] = "太刀の練気が消費され始める迄の猶予を変更\n(秒[s],デフォ:2,Float)"}, {[1] = ""})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_FLOAT)
									break
								else
									temporarilyhide()
								end
							end
							Equipment_LongSword_SpiritCostGracePeriod()
						elseif EquipmentLongSwordLogicSpiritCostGracePeriodMenu == 4 then
							Equipment_LongSword()
						end	
					end
				end
			end		
		function Equipment_Hammer()
			IncludeCheckAndTrueFalseA("BattleHammerLogicSetup")
			EquipmentHammer_Selected = {A, A}	
			gg.clearResults()
            gg.setVisible(false)
            EquipmentHammerMenu = gg.choice({
				(EquipmentHammer_Selected[1] and "-> [1]    チャージ時のスタミナ消費量*" or "[1]    チャージ時のスタミナ消費量*"),
				(EquipmentHammer_Selected[2] and "-> [2]    スタミナ回復量*" or "[2]    スタミナ回復量*"),
				"[←]    戻る"
            }, nil, "メインメニュー/装備/ハンマー\n*該当する装備をしてから実行すること")
            if EquipmentHammerMenu == nil then
                temporarilyhide()
                Equipment_Hammer()
            elseif EquipmentHammerMenu >= 1 and EquipmentHammerMenu <= 2 then
				CheckAndLoadResults("BattleHammerLogicSetup")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
                    valueFromClass("BattleHammerLogicSetup", "B", "0x18", false, false, gg.TYPE_FLOAT)
                    gg.getResults(9999)
                    gg.refineNumber("0~", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "BattleHammerLogicSetup(0x18)_Equipment_Hammer_"
					end
					gg.addListItems(results)
                end
				if EquipmentHammerMenu == 1 then
					Equipment_Hammer_StaminaPerSecInCharge()
				elseif EquipmentHammerMenu == 2 then
					results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.address = v.address + 0x4
						v.flags = gg.TYPE_FLOAT
					end
					gg.loadResults(results)
                    Equipment_Hammer_RechargeStaminaPerSec()
				end
            elseif EquipmentHammerMenu == 3 then
                gg.clearList()
				Equipment()
            end
        end			
			function Equipment_Hammer_StaminaPerSecInCharge()
				IncludeCheckAndTrueFalseA("BattleHammerLogicSetup")
				EquipmentHammer_Selected = {A, A, A}	
				gg.getResults(9999)
				gg.setVisible(false)
				local HammerStaminaPerSecInChargeValue = {"100", "0"}
				EquipmentHammerStaminaPerSecInChargeMenu = gg.choice({
					(EquipmentHammer_Selected[1] and "[1]    デフォルト" or "[1]    デフォルト"),
					(EquipmentHammer_Selected[2] and "[2]    なし" or "[2]    なし"),
					(EquipmentHammer_Selected[3] and "[3]    任意の値" or "[3]    任意の値"),
				"[←]    もどる"
				}, nil,"メインメニュー/装備/ハンマー/チャージ時のスタミナ消費量")
				if EquipmentHammerStaminaPerSecInChargeMenu == nil then
					temporarilyhide()	
					Equipment_Hammer_StaminaPerSecInCharge()
				else	
					if EquipmentHammerStaminaPerSecInChargeMenu >= 1 and EquipmentHammerStaminaPerSecInChargeMenu <= 2 then
						local chosenValue = HammerStaminaPerSecInChargeValue[EquipmentHammerStaminaPerSecInChargeMenu]
						gg.editAll(chosenValue, gg.TYPE_FLOAT)
						Equipment_Hammer_StaminaPerSecInCharge()
					else
						if EquipmentHammerStaminaPerSecInChargeMenu == 3 then
							while true do
								gg.setVisible(false)
								val = gg.prompt({[1] = "ハンマーのチャージ時のスタミナ消費量を変更\n(デフォ:100,Float)"}, {[1] = ""})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_FLOAT)
									break
								else
									temporarilyhide()
								end
							end
							Equipment_Hammer_StaminaPerSecInCharge()
						elseif EquipmentHammerStaminaPerSecInChargeMenu == 4 then
							Equipment_Hammer()
						end	
					end
				end
			end						
			function Equipment_Hammer_RechargeStaminaPerSec()
				IncludeCheckAndTrueFalseA("BattleHammerLogicSetup")
				EquipmentHammer_Selected = {A, A, A}	
				gg.getResults(9999)
				gg.setVisible(false)
				local HummerRechargeStaminaPerSec = {"100", "99999"}
				EquipmentHammerRechargeStaminaPerSecMenu = gg.choice({
					(EquipmentHammer_Selected[1] and "[1]    デフォルト" or "[1]    デフォルト"),
					(EquipmentHammer_Selected[2] and "[2]    超回復" or "[2]    超回復"),
					(EquipmentHammer_Selected[3] and "[3]    任意の値" or "[3]    任意の値"),
					"[←]    もどる"
				}, nil,"メインメニュー/装備/ハンマ/スタミナ回復量")
				if EquipmentHammerRechargeStaminaPerSecMenu == nil then
					temporarilyhide()	
					Equipment_Hammer_RechargeStaminaPerSec()
				else	
					if EquipmentHammerRechargeStaminaPerSecMenu >= 1 and EquipmentHammerRechargeStaminaPerSecMenu <= 2 then
						local chosenValue = HummerRechargeStaminaPerSec[EquipmentHammerRechargeStaminaPerSecMenu]
						gg.editAll(chosenValue, gg.TYPE_FLOAT)
						Equipment_Hammer_RechargeStaminaPerSec()
					else
						if EquipmentHammerRechargeStaminaPerSecMenu == 3 then
							while true do
								gg.setVisible(false)
								val = gg.prompt({[1] = "ハンマーのスタミナ回復量を変更\n(秒[s],デフォ:15,Float)"}, {[1] = ""})
								if val and val[1] ~= nil then
									gg.editAll(val[1], gg.TYPE_FLOAT)
									break
								else
									temporarilyhide()
								end
							end
							Equipment_Hammer_RechargeStaminaPerSec()
						elseif EquipmentHammerRechargeStaminaPerSecMenu == 4 then
							Equipment_Hammer()
						end	
					end
				end
			end				
		function Equipment_Bowgun()
			IncludeCheckAndTrueFalseA("BowgunAmmoSpec")
			IncludeCheckAndTrueFalseB("BowgunAmmoSettingsProto")
			EquipmentBowgun_Selected = {A, A, A, B, B, B}	
			gg.clearResults()
            gg.setVisible(false)
			EquipmentBowgunMenu = gg.choice({
				(EquipmentBowgun_Selected[1] and "-> [1]    反動パターン*" or "[1]    反動パターン*"),
				(EquipmentBowgun_Selected[2] and "-> [2]    装填パターン*" or "[2]    装填パターン*"),
				(EquipmentBowgun_Selected[3] and "-> [3]    弾の装填数*" or "[3]    弾の装填数*"),
				(EquipmentBowgun_Selected[4] and "-> [4]    弾薬種類*" or "[4]    弾薬種類*"),
				(EquipmentBowgun_Selected[5] and "-> [5]    弾薬属性*" or "[5]    弾薬属性*"),
				(EquipmentBowgun_Selected[6] and "-> [6]    弾薬レベル*" or "[6]    弾薬レベル*"),
				"[←]    戻る"
            }, nil, "メインメニュー/装備/ボウガン\n*該当する装備をしてから実行すること")
			if EquipmentBowgunMenu == nil then
				temporarilyhide()	
				Equipment_Bowgun()
			elseif EquipmentBowgunMenu >= 1 and EquipmentBowgunMenu <= 3 then
				CheckAndLoadResults("BowgunAmmoSpec")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
                    valueFromClass("BowgunAmmoSpec", "B", "0x18", false, false, gg.TYPE_DWORD)
                    gg.getResults(9999)
                    gg.refineNumber("0~", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "BowgunAmmoSpec(0x18)_Equipment_Bowgun_"
					end
					gg.addListItems(results)
                end
				results = gg.getResults(9999)
                for i, v in ipairs(results) do
                    v.address = v.address + (0x0 + 0x4 * (EquipmentBowgunMenu - 1))
                    v.flags = gg.TYPE_DWORD
                end
                gg.loadResults(results)				
				if EquipmentBowgunMenu == 1 then
					Equipment_Bowgun_RecoilType()
				elseif EquipmentBowgunMenu == 2 then	
					Equipment_Bowgun_ReloadType()
				elseif EquipmentBowgunMenu == 3 then
					Equipment_Bowgun_AmmoCapacity()
				end
			elseif EquipmentBowgunMenu >= 4 and EquipmentBowgunMenu <= 6 then
				CheckAndLoadResults("BowgunAmmoSettingsProto")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
                    valueFromClass("BowgunAmmoSettingsProto", "B", "0x10", false, false, gg.TYPE_DWORD)
                    gg.getResults(9999)
                    gg.refineNumber("0~", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "BowgunAmmoSettingsProto(0x10)_Equipment_Bowgun_"
					end
					gg.addListItems(results)
                end
				results = gg.getResults(9999)
                for i, v in ipairs(results) do
                    v.address = v.address + (0x0 + 0x4 * (EquipmentBowgunMenu - 3))
                    v.flags = gg.TYPE_DWORD
                end
                gg.loadResults(results)				
				if EquipmentBowgunMenu == 4 then
					Equipment_Bowgun_AmmoType()
				elseif EquipmentBowgunMenu == 5 then
					Equipment_Bowgun_AmmoElementType()
				elseif EquipmentBowgunMenu == 6 then
					Equipment_Bowgun_AmmoLevel()
				end
			elseif EquipmentBowgunMenu == 7 then	
				gg.clearList()
				Equipment()
			end
		end	
			function Equipment_Bowgun_RecoilType()
				IncludeCheckAndTrueFalseA("BowgunAmmoSpec")
				EquipmentBowgun_Selected = {A, A, A, A, A}	
				gg.getResults(9999)
				gg.setVisible(false)
				local BowgunRecoilType = {
					(EquipmentBowgun_Selected[1] and "-> [1]    パターン1   (最小)" or "[1]    パターン1   (最小)"),
					(EquipmentBowgun_Selected[2] and "-> [2]    パターン2" or " [2]    パターン2"),
					(EquipmentBowgun_Selected[3] and "-> [3]    パターン3" or "[3]    パターン3"),
					(EquipmentBowgun_Selected[4] and "-> [4]    パターン4   (最大)" or "[4]    パターン4   (最大)"),	
					(EquipmentBowgun_Selected[5] and "-> [5]    任意の値" or "[5]    任意の値"),	
					"[←]    もどる"
				}
				EquipmentBowgunRecoilTypeMenu = gg.choice(BowgunRecoilType, nil, "メインメニュー/装備/ボウガン/反動パターン")
				if EquipmentBowgunRecoilTypeMenu == nil then
					temporarilyhide()	
					Equipment_Bowgun_RecoilType()
				elseif EquipmentBowgunRecoilTypeMenu >= 1 and EquipmentBowgunRecoilTypeMenu <= 4 then
					local chosenValue = tostring(EquipmentBowgunRecoilTypeMenu)
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					Equipment_Bowgun_RecoilType()
				elseif EquipmentBowgunRecoilTypeMenu == 5 then	
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの反動パターンを変更\n(範囲:1~4,1:小,2:中,3:大,4:特大,DWORD)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end
					Equipment_Bowgun_RecoilType()
				elseif EquipmentBowgunRecoilTypeMenu == 6 then
					Equipment_Bowgun()
				end	
			end
			function Equipment_Bowgun_ReloadType()
				IncludeCheckAndTrueFalseA("BowgunAmmoSpec")
				EquipmentBowgun_Selected = {A, A, A, A, A}	
				gg.getResults(9999)
				gg.setVisible(false)
				local BowgunReloadType = {
					(EquipmentBowgun_Selected[1] and "-> [1]    パターン1   (最短)" or "[1]    パターン1   (最短)"),
					(EquipmentBowgun_Selected[2] and "-> [2]    パターン2" or " [2]    パターン2"),
					(EquipmentBowgun_Selected[3] and "-> [3]    パターン3" or "[3]    パターン3"),
					(EquipmentBowgun_Selected[4] and "-> [4]    パターン4   (最長)" or "[4]    パターン4   (最長)"),	
					(EquipmentBowgun_Selected[5] and "-> [5]    任意の値" or "[5]    任意の値"),	
					"[←]    もどる"
				}
				EquipmentBowgunReloadTypeMenu = gg.choice(BowgunReloadType, nil,"メインメニュー/装備/ボウガン/装填パターン")
				if EquipmentBowgunReloadTypeMenu == nil then
					temporarilyhide()	
					Equipment_Bowgun_ReloadType()
				elseif EquipmentBowgunReloadTypeMenu >= 1 and EquipmentBowgunReloadTypeMenu <= 4 then
					local chosenValue = tostring(EquipmentBowgunReloadTypeMenu)
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					Equipment_Bowgun_ReloadType()	
				elseif EquipmentBowgunReloadTypeMenu == 5 then	
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの装填パターンを変更\n(範囲:1~4,1:小,2:中,3:大,4:特大,DWORD)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end
					Equipment_Bowgun_ReloadType()					
				elseif EquipmentBowgunReloadTypeMenu  == 6 then
					Equipment_Bowgun()
				end	
			end	
			function Equipment_Bowgun_AmmoCapacity()
				IncludeCheckAndTrueFalseA("BowgunAmmoSpec")
				EquipmentBowgun_Selected = {A, A, A}
				gg.getResults(9999)
				gg.setVisible(false)
				local BogunAmmoCapacityValue = {"5", "50"}
				EquipmentBowgunAmmoCapacityMenu = gg.choice({
					(EquipmentBowgun_Selected[1] and "-> [1]    " .. BogunAmmoCapacityValue[1] or "[1]    " .. BogunAmmoCapacityValue[1]),
					(EquipmentBowgun_Selected[2] and "-> [2]    " .. BogunAmmoCapacityValue[2] or "[2]    " .. BogunAmmoCapacityValue[2]),
					(EquipmentBowgun_Selected[3] and "-> [3]    任意の値" or "[3]    任意の値"),
				"[←]    もどる"
				}, nil,"メインメニュー/装備/ボウガン/弾の装填数")
				if EquipmentBowgunAmmoCapacityMenu == nil then
					temporarilyhide()	
					Equipment_Bowgun_AmmoCapacity()
				elseif EquipmentBowgunAmmoCapacityMenu >= 1 and EquipmentBowgunAmmoCapacityMenu <= 2 then
					local chosenValue = BogunAmmoCapacityValue[EquipmentBowgunAmmoCapacityMenu]
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					Equipment_Bowgun_AmmoCapacity()
				elseif EquipmentBowgunAmmoCapacityMenu == 3 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの弾の装填数を変更\n(Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end
					Equipment_Bowgun_AmmoCapacity()
				elseif EquipmentBowgunAmmoCapacityMenu == 4 then
					Equipment_Bowgun()
				end	
			end
			function Equipment_Bowgun_AmmoType()
				IncludeCheckAndTrueFalseA("BowgunAmmoSettingsProto")
				EquipmentBowgun_Selected = {A, A, A, A, A, A}		
				gg.getResults(9999)		
				gg.setVisible(false)	
				local BouwgunAmmoType = {
					(EquipmentBowgun_Selected[1] and "-> [1]    通常弾" or "[1]    通常弾"),
					(EquipmentBowgun_Selected[2] and "-> [2]    貫通弾" or "[2]    貫通弾"),
					(EquipmentBowgun_Selected[3] and "-> [3]    散弾" or "[3]    散弾"),
					(EquipmentBowgun_Selected[4] and "-> [4]    徹甲榴弾" or "[4]    徹甲榴弾"),
					(EquipmentBowgun_Selected[5] and "-> [5]    炸裂弾" or "[5]    炸裂弾"),		
					(EquipmentBowgun_Selected[6] and "-> [6]    任意の値" or "[6]    任意の値"),		
					"[←]    もどる"
				}
				EquipmentBowgunAmmoTypeMenu = gg.choice(BouwgunAmmoType, nil,"メインメニュー/装備/ボウガン/弾薬種類")
				if EquipmentBowgunAmmoTypeMenu == nil then
					temporarilyhide()	
					Equipment_Bowgun_AmmoType()
				elseif EquipmentBowgunAmmoTypeMenu >= 1 and EquipmentBowgunAmmoTypeMenu <= 5 then
					local chosenValue = tostring(EquipmentBowgunAmmoTypeMenu)
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					Equipment_Bowgun_AmmoType()
				elseif EquipmentBowgunAmmoTypeMenu == 6 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの弾薬種類を変更\n(範囲:1~5,1:通常弾,2:貫通弾,3:散弾,4:徹甲榴弾,5:炸裂弾,Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end		
					Equipment_Bowgun_AmmoType()
				elseif EquipmentBowgunAmmoTypeMenu == 7 then
					Equipment_Bowgun()
				end
			end	
			function Equipment_Bowgun_AmmoElementType()
				IncludeCheckAndTrueFalseA("BowgunAmmoSettingsProto")
				EquipmentBowgun_Selected = {A, A, A, A, A, A, A, A, A, A, A}
				gg.getResults(9999)		
				gg.setVisible(false)	
				BowgunAmmoElementType = {
					(EquipmentBowgun_Selected[1] and "[1]    なし" or "[1]    なし"),
					(EquipmentBowgun_Selected[2] and "[2]    火" or "[2]    火"),
					(EquipmentBowgun_Selected[3] and "[3]    水" or "[3]    水"),
					(EquipmentBowgun_Selected[4] and "[4]    雷" or "[4]    雷"),
					(EquipmentBowgun_Selected[5] and "[5]    氷" or "[5]    氷"),
					(EquipmentBowgun_Selected[6] and "[6]    龍" or "[6]    龍"),
					(EquipmentBowgun_Selected[7] and "[7]    毒" or "[7]    毒"),
					(EquipmentBowgun_Selected[8] and "[8]    麻痺" or "[8]    麻痺"),
					(EquipmentBowgun_Selected[9] and "[9]    睡眠" or "[9]    睡眠"),
					(EquipmentBowgun_Selected[10] and "[10]    爆破" or "[10]    爆破"),	
					(EquipmentBowgun_Selected[11] and "[11]    任意の値" or "[11]    任意の値"),	
					"[←]    もどる"
				}
				EquipmentBowgunAmmoElementTypeMenu = gg.choice(BowgunAmmoElementType, nil,"メインメニュー/装備/ボウガン/弾薬属性\n*7以上は未確認")
				if EquipmentBowgunAmmoElementTypeMenu == nil then
					temporarilyhide()	
					Equipment_Bowgun_AmmoElementType()
				elseif EquipmentBowgunAmmoElementTypeMenu >= 1 and EquipmentBowgunAmmoElementTypeMenu <= 10 then
					local chosenValue = tostring(EquipmentBowgunAmmoElementTypeMenu)
					gg.editAll(chosenValue, gg.TYPE_DWORD)
					Equipment_Bowgun_AmmoElementType()
				elseif EquipmentBowgunAmmoElementTypeMenu == 11 then
					while true do
						gg.setVisible(false)
						val = gg.prompt({[1] = "ボウガンの弾薬属性種類を変更\n(範囲:1~10,1:なし,2:火,3:水,4雷,5:氷,6:龍,7:毒,8:麻痺,9:睡眠,10:爆破,Dword)"}, {[1] = ""})
						if val and val[1] ~= nil then
							gg.editAll(val[1], gg.TYPE_DWORD)
							break
						else
							temporarilyhide()
						end
					end					
					Equipment_Bowgun_AmmoElementType()
				elseif EquipmentBowgunAmmoElementTypeMenu == 12 then
					Equipment_Bowgun()
				end
			end	
			function Equipment_Bowgun_AmmoLevel()
				IncludeCheckAndTrueFalseA("BowgunAmmoSettingsProto")
				EquipmentBowgun_Selected = {A, A}
				gg.getResults(9999)		
				gg.setVisible(false)	
				local BowgunAmmoLevel = {"1"}	
				EquipmentBowgunAmmoLevelMenu = gg.choice({
					(EquipmentBowgun_Selected[1] and "[1]    デフォルト" or "[1]    デフォルト"),
					(EquipmentBowgun_Selected[2] and "[2]    任意" or "[2]    任意"),		
					"[←]    もどる"
				}, nil,"メインメニュー/装備/ボウガン/弾薬レベル\n*2以上は未確認")
				if EquipmentBowgunAmmoLevelMenu == nil then
					temporarilyhide()	
					Equipment_Bowgun_AmmoLevel()
				else
					if EquipmentBowgunAmmoLevelMenu == 1 then
						local chosenValue = BowgunAmmoLevel[EquipmentBowgunAmmoLevelMenu]
						gg.editAll(chosenValue,gg.TYPE_DWORD)
						Equipment_Bowgun_AmmoLevel()
					elseif EquipmentBowgunAmmoLevelMenu == 2 then
						while true do
							gg.setVisible(false)
							val = gg.prompt({[1] = "ボウガンの弾薬レベルを変更\n(*2以上は未確認,デフォ:1,Dword)"}, {[1] = ""})
							if val and val[1] ~= nil then
								gg.editAll(val[1], gg.TYPE_DWORD)
								break
							else
								temporarilyhide()
							end
						end					
						Equipment_Bowgun_AmmoLevel()
					elseif EquipmentBowgunAmmoLevelMenu == 3 then
						Equipment_Bowgun()
					end
				end
			end			
		function Equipment_Bow()
			IncludeCheckAndTrueFalseA("BowArrowSettingsProto")
			EquipmentBow_Selected = {A, A}	
			gg.clearResults()
			gg.setVisible(false)	
			EquipmentBowArrowMenu = gg.choice({
				(EquipmentBow_Selected[1] and "[1]    矢種類*" or "[1]    矢種類*"),
				(EquipmentBow_Selected[2] and "[2]    矢レベル*" or "[2]    矢レベル*"),		
				"[←]    もどる"
			}, nil,"メインメニュー/装備/弓\n*該当する装備をしてから実行すること")
			if EquipmentBowArrowMenu == nil then
				temporarilyhide()	
				Equipment_Bow()
			elseif EquipmentBowArrowMenu >= 1 and EquipmentBowArrowMenu <= 2 then
				CheckAndLoadResults("BowArrowSettingsProto")
				local count = gg.getResultsCount()
				if count >= 1 then
				else
                    valueFromClass("BowArrowSettingsProto", "B", "0x14", false, false, gg.TYPE_DWORD)
                    gg.getResults(9999)
                    gg.refineNumber("0~", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
					local results = gg.getResults(9999)
					for i, v in ipairs(results) do
						v.name = "BowArrowSettingsProto(0x14)_Equipment_Bow_"
					end
					gg.addListItems(results)
                end
                results = gg.getResults(9999)
                for i, v in ipairs(results) do
                    v.address = v.address + (0x0 + 0x4 * (EquipmentBowArrowMenu))
                    v.flags = gg.TYPE_DWORD
                end
                gg.loadResults(results)				
				if EquipmentBowArrowMenu == 1 then
					Equipment_Bow_ArrowType()
				elseif EquipmentBowArrowMenu == 2 then	
					Equipment_Bow_AllowLevel()
				end
			elseif EquipmentBowArrowMenu == 3 then
				gg.clearList()
				Equipment()
			end
		end
			function Equipment_Bow_ArrowType()
				IncludeCheckAndTrueFalseA("BowArrowSettingsProto")
				EquipmentBow_Selected = {A, A, A, A}	
				gg.getResults(9999)		
				gg.setVisible(false)	
				local BowArrowType = {
					(EquipmentBow_Selected[1] and "[1]    連射" or "[1]    連射"),
					(EquipmentBow_Selected[2] and "[2]    拡散" or "[2]    拡散"),
					(EquipmentBow_Selected[3] and "[3]    貫通" or "[3]    貫通"),	
					(EquipmentBow_Selected[4] and "[4]    任意の値" or "[4]    任意の値"),	
					"[←]    もどる"
				}
				EquipmentBowArrowTypeMenu = gg.choice(BowArrowType, nil,"メインメニュー/装備/弓/矢種類")
				if EquipmentBowArrowTypeMenu == nil then
					temporarilyhide()	
					Equipment_Bow_ArrowType()
				else				
					if EquipmentBowArrowTypeMenu >= 1 and EquipmentBowArrowTypeMenu <= 3 then
						local chosenValue = tostring(EquipmentBowArrowTypeMenu)
						gg.editAll(chosenValue, gg.TYPE_DWORD)
						Equipment_Bow_ArrowType()
					elseif EquipmentBowArrowTypeMenu == 4 then
						while true do
							gg.setVisible(false)
							val = gg.prompt({[1] = "弓の矢種類を変更\n(範囲:1~3,1:連射,2:拡散,3:貫通,Dword)"}, {[1] = ""})
							if val and val[1] ~= nil then
								gg.editAll(val[1], gg.TYPE_DWORD)
								break
							else
								temporarilyhide()
							end
						end							
						Equipment_Bow_ArrowType()
					elseif EquipmentBowArrowTypeMenu == 5 then
						Equipment_Bow()
					end
				end	
			end
			function Equipment_Bow_AllowLevel()
				IncludeCheckAndTrueFalseA("BowArrowSettingsProto")
				EquipmentBow_Selected = {A, A}
				gg.getResults(9999)		
				gg.setVisible(false)	
				local BowgArrowLevel = {"1"}	
				EquipmentBowArrowLevelMenu = gg.choice({
					(EquipmentBow_Selected[1] and "[1]    デフォルト" or "[1]    デフォルト"),
					(EquipmentBow_Selected[1] and "[2]    任意" or "[2]    任意"),		
					"[←]    もどる"
				}, nil,"メインメニュー/装備/弓/矢レベル")
				if EquipmentBowArrowLevelMenu == nil then
					temporarilyhide()	
					Equipment_Bow_AllowLevel()
				else
					if EquipmentBowArrowLevelMenu == 1 then
						local chosenValue = BowgArrowLevel[EquipmentBowArrowLevelMenu]
						gg.editAll(chosenValue,gg.TYPE_DWORD)
						Equipment_Bow_AllowLevel()
					elseif EquipmentBowArrowLevelMenu == 2 then
						while true do
							gg.setVisible(false)
							val = gg.prompt({[1] = "弓矢種のレベルを変更\n(*2以上は未確認,デフォ:1,Dword)"}, {[1] = ""})
							if val and val[1] ~= nil then
								gg.editAll(val[1], gg.TYPE_DWORD)
								break
							else
								temporarilyhide()
							end
						end					
						Equipment_Bow_AllowLevel()
					elseif EquipmentBowArrowLevelMenu == 3 then
						Equipment_Bow()
					end
				end
			end				
---------------------------------------------------------------------------		
function temporarilyhide()
	gg.setVisible(false)
	while true do
	if gg.isVisible() then
		break 
		end
	end 
end
function IncludeCheckAndTrueFalseA(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
        if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
        A = true
    else
        A = false
    end
end
function IncludeCheckAndTrueFalseB(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
        if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
        B = true
    else
        B = false
    end
end
function IncludeCheckAndTrueFalseC(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
        if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
        C = true
    else
        C = false
    end
end
function IncludeCheckAndTrueFalseD(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
        if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
        D = true
    else
        D = false
    end
end
function IncludeCheckAndTrueFalseE(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
       if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
        E = true
    else
        E = false
    end
end
function IncludeCheckAndTrueFalseF(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
      if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
        F = true
    else
        F = false
    end
end
function IncludeCheckAndTrueFalseG(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
        if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
        G = true
    else
        G = false
    end
end
function IncludeCheckAndTrueFalseH(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
       if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
        H = true
    else
        H = false
    end
end
function IncludeCheckAndTrueFalseI(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
       if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
        I = true
    else
        I = false
    end
end
function CheckAndLoadResults(targetName)
    local results = gg.getListItems()
    local found = false
    for _, result in ipairs(results) do
        if result.name and string.find(result.name, targetName) then
            found = true
            break
        end
    end
    if found then
		gg.loadResults(gg.getListItems())
    else
    end
end		
------------------------<<Field Offset Finder>>------------------------
--[[ 🔴How To use In your Script ?🔴
There are 2 modes in this script 1. Developer mode 2. User mode
The devoper mode is enabled automatically so you don't need to do anything. But if you want to make your own script to allow users to use your script then. Edit the userMode = 1 to userMode = 2. Now you can set your hacks. I have already made a template menu, submenu and functions for you. you can make some minor changes in them. 
The main function you will use is valueFromClass() where you have to give 5 inputs like this.
 valueFromClass("Levels", "0x10", false, true, gg.TYPE_FLOAT) 
The first input is class name , second input is offset, third input is do you want to try harder if yes then set true or false is good, the fourth is for 32 bit if the script is for 32 bit then make it true otherwise leaving it false means the script is 64 bit, the fifth is value type you want to search for you can see that in the dump file. The value at left is the data type in the dump and the values at left is what you have to set in the valueFromClass() function. 
1. Byte / Boolean --> gg.TYPE_BYTE
2. Dword / 32 bit Int --> gg.TYPE_DWORD
3. Qword / 64 bit Int --> gg.TYPE_QWORD
4. Float --> gg.TYPE_FLOAT
5. Double --> gg.TYPE_DOUBLE
userMode = 
1 = Developer mode, 2 = user mode ]]--
function valueFromClass(class, dinitial, offset, tryHard, bit32, valueType)
	Get_user_input = {}
	Get_user_input[1] = class
	Get_user_input[2] = dinitial
	Get_user_input[3] = offset
	Get_user_input[4] = tryHard
	Get_user_input[5] = bit32
	Get_user_type = valueType
	start2()
end
function loopCheck()
	if userMode == 1 then
		UI()
	elseif error == 3 then
		stopClose()
	end
end
--[[ ℹ️ These function help in error log ]]--
function found_(message)
	if error == 1 then
		found2(message)
	elseif error == 2 then
		found3(message)
	elseif error == 3 then
		found4(message)
	else
		found(message)
	end
end
function found(message)
	if count == 0 then
		gg.clearResults()
		gg.clearList()
		first_error = message
		error = 1
		second_start()
	end
end
function found2(message)
	if count == 0 then
		gg.clearResults()
		gg.clearList()
		second_error = message
		error = 2
		third_start()
	end
end
function found3(message)
	if count == 0 then
		gg.clearResults()
		gg.clearList()
		third_error = message
		error = 3
		fourth_start()
	end
end
function found4(message)
	if count == 0 then
		gg.clearResults()
		gg.clearList()
		gg.alert("❌ エラー ❌\nTry 1: "..first_error.."\nTry 2: "..second_error.."\nTry 3: "..third_error.."\nTry 4: ".. message.."\n\nℹ️エラーの原因ℹ️\n\n🟢O_initial(dinitial)_search,: \n⇒ クラス名検索\n・クラスデータの誤り\n・クラス名,リファイン値の確認\n\n🟡CA_pointer_search,CA(2)_apply_offset,Q_apply_fix: \nポインタ検索1\n⇒ クラスデータが複製されていない。\n・変数を生成させてからコードを実行する(変数が生成される条件:該当の装備をするなど{*を確認})\n\n🔴A_base_value(accuracy): \nポインタ検索2\n⇒ 変数が生成されていない\n・変数を生成させてからコードを実行する\n・実行中に変数が生成され直すような操作をしない(装備の変更や強化など)\n\n⚫A_user_given_offset: \nオフセットの適用\n⇒オフセットが無効\n・16進数か確認\n\n🟢と⚫のエラーはコードの不具合の可能性が高いです。naruse1122(Discord)まで連絡してください。")
		gg.setVisible(true)
		loopCheck()
	end
end
--[[ 🟢Value Finders From Class and offset 🟢]]--
function user_input_taker()
	if userMode == 1 then
		if Get_user_input == nil then
			default1 = ""
			default2 = ""
			default3 = "0x"
			default4 = false
			default5 = false
		else
			default1 = Get_user_input[1]
			default2 = Get_user_input[2]
			default3 = Get_user_input[3]
			default4 = Get_user_input[4]
			default5 = Get_user_input[5]
		end
		gg.setVisible(false)
		Get_user_input = gg.prompt(
		{"🔰Script By🔰: https://t.me/Hackers_House_YT\n\nClassName: ","ClassName Initial:", "Offset: ","Try Harder --(decreases accuracy)","Try For 32 bit"},
		{default1,default2,default3,default4,default5},{"text","text","text","checkbox","checkbox"})
		if Get_user_input ~= nil then
			if (Get_user_input[1] == "") or (Get_user_input[2] == "")or (Get_user_input[3] == "") then
				gg.alert("ℹ️ Don't Leave Input Blankℹ️")
				user_input_taker()
			end
		else
			temporarilyhide()
			UI()
		end
		gg.setVisible(false)
		Get_user_type = gg.choice({"1. Byte / Boolean","2. Dword / 32 bit Int","3. Qword / 64 bit Int","4. Float","5. Double"},nil,"Choose The Output Type ℹ️")
		if Get_user_type == 1 then
			Get_user_type = gg.TYPE_BYTE
		elseif Get_user_type == 2 then
			Get_user_type = gg.TYPE_DWORD
		elseif Get_user_type == 3 then
			Get_user_type = gg.TYPE_QWORD
		elseif Get_user_type == 4 then
			Get_user_type = gg.TYPE_FLOAT
		elseif Get_user_type == 5 then
			Get_user_type = gg.TYPE_DOUBLE
		else
			temporarilyhide()
			UI()
		end
		if Get_user_type ~= gg.TYPE_BYTE then
			local offsetValue = tonumber(Get_user_input[3]) or 0
			if (offsetValue % 4) ~= 0 and offsetValue ~= 0 then
				gg.alert("ℹ️Hex Offset Must Be An Multiple OF 4ℹ️")
				user_input_taker()
			end
		end
	end
	error = 0 
end
function O_initial_search()
	gg.clearList()
	gg.clearResults()
	gg.toast("🟢Hackers House: First Try")
	user_input = ":"..Get_user_input[1] 
	user_input2 = ":"..Get_user_input[2] 
	if Get_user_input[4] then
		offst = 25
	else
		offst = 0
	end
end
function O_dinitial_search()
	if error > 1 then
		gg.setRanges(gg.REGION_C_ALLOC)
	else
		gg.setRanges(gg.REGION_OTHER)
	end
	gg.searchNumber(user_input, gg.TYPE_BYTE)
	count = gg.getResultsCount()
	if count == 0 then
		found_("O_dinitial_search")
		return 0
	end
	gg.refineNumber(user_input2, gg.TYPE_BYTE)
	count = gg.getResultsCount()
	if count == 0 then
		found_("O_dinitial_search")
		return 0
	end
	val = gg.getResults(count)
	gg.addListItems(val)
end
function CA_pointer_search()
	gg.clearResults()
	gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
	gg.loadResults(gg.getListItems())
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("CA_pointer_search")
		return 0
	end
	vel = gg.getResults(count)
	gg.clearList()
	gg.addListItems(vel)
end
function CA_apply_offset()
	if Get_user_input[5] then
		tanker = 0xfffffffffffffff8
	else
		tanker = 0xfffffffffffffff0
	end
	local copy = false
	local l = gg.getListItems()
	if not copy then gg.removeListItems(l) end
	for i, v in ipairs(l) do
		v.address = v.address + tanker
		if copy then v.name = v.name..' #2' end
	end
	gg.loadResults(l)
	gg.refineNumber("0", gg.TYPE_QWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)	
	local x =gg.getResults(9999)
	gg.addListItems(x)
	gg.clearResults()
end
function CA2_apply_offset()
	if Get_user_input[5] then
		tanker = 0xfffffffffffffff8
	else
		tanker = 0xfffffffffffffff0
	end
	local copy = false
	local l = gg.getListItems()
	if not copy then gg.removeListItems(l) end
	for i, v in ipairs(l) do
		v.address = v.address + tanker
		if copy then v.name = v.name..' #2' end
	end
	gg.loadResults(l)
	gg.refineNumber("0", gg.TYPE_QWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)	
	local x =gg.getResults(9999)
	gg.addListItems(x)
	gg.clearResults()
end
function Q_apply_fix()
    gg.setRanges(gg.REGION_ANONYMOUS)
    gg.loadResults(gg.getListItems())
    gg.clearList()
    count = gg.getResultsCount()
    if count == 0 then
        found_("Q_apply_fix")
        return 0
    end
    yy = gg.getResults(1000)
    gg.clearResults()
    i = 1
    c = 1
    s = {}
    while (i-1) < count do
        yy[i].address = yy[i].address + 0xb400000000000000
        gg.searchNumber(yy[i].address, gg.TYPE_QWORD)
        cnt = gg.getResultsCount()
        if 0 < cnt then
            bytr = gg.getResults(cnt)
            n = 1
            while (n-1) < cnt do
                s[c] = {}
                s[c].address = bytr[n].address
                s[c].flags = 32
                n = n + 1
                c = c + 1
            end
        end
        gg.clearResults()
        i = i + 1
    end
    gg.addListItems(s)
end
function A_base_value()
	gg.setRanges(gg.REGION_ANONYMOUS)
	gg.loadResults(gg.getListItems())
	gg.clearList()
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_value")
		return 0
	end
	tel = gg.getResults(count)
	gg.addListItems(tel)
end
function A_base_accuracy()
	gg.setRanges(gg.REGION_ANONYMOUS | gg.REGION_C_ALLOC)
	gg.loadResults(gg.getListItems())
	gg.clearList()
	gg.searchPointer(offst)
	count = gg.getResultsCount()
	if count == 0 then
		found_("A_base_accuracy")
		return 0
	end
	kol = gg.getResults(count)
	i = 1
	h = {}
	while (i-1) < count do
		h[i] = {}
		h[i].address = kol[i].value
		h[i].flags = 32
		i = i + 1
	end
	gg.addListItems(h)
end
function A_user_given_offset()
	local old_save_list = gg.getListItems()
	for i, v in ipairs(old_save_list) do
		v.address = tonumber(v.address) + (tonumber(Get_user_input[3]) or 0)
		v.flags = Get_user_type
	end
	gg.clearResults()
	gg.clearList()
	gg.loadResults(old_save_list)
	count = gg.getResultsCount()
	if count == 0 then
		found_("Q_apply_fix++")
		return 0
	end
end
--[[ 🔴 Different Functions For 1,2,3,4th try 🔴]]--
function start()
	user_input_taker()
	O_initial_search()
	O_dinitial_search()
	if error > 0 then
		return 0
	end
	CA_pointer_search()
	if error > 0 then
		return 0
	end
	CA_apply_offset()
	if error > 0 then
		return 0
	end
	A_base_value()
	if error > 0 then
		return 0
	end
	if offst == 0 then
		A_base_accuracy()
	end
	if error > 0 then
		return 0
	end
	A_user_given_offset()
	if error > 0 then
		return 0
	end
	loopCheck()
	if error > 0 then
		return 0
	end
end
function start2()
	error = 0
	O_initial_search()
	O_dinitial_search()
	if error > 0 then
		return 0
	end
	CA_pointer_search()
	if error > 0 then
		return 0
	end
	CA_apply_offset()
	if error > 0 then
		return 0
	end
	A_base_accuracy()
	if error > 0 then
		return 0
	end
	A_user_given_offset()
	if error > 0 then
		return 0
	end
	loopCheck()
	if error > 0 then
		return 0
	end
end
function second_start()
	gg.toast("🟡Hackers House: Second Try")
	O_dinitial_search()
	if error > 1 then
		return 0
	end
	CA_pointer_search()
	if error > 1 then
		return 0
	end
	CA_apply_offset()
	if error > 1 then
		return 0
	end
	Q_apply_fix()
	if error > 1 then
		return 0
	end
	if offst == 0 then
		A_base_accuracy()
	end
	if error > 1 then
		return 0
	end
	A_user_given_offset()
	if error > 1 then
		return 0
	end
	loopCheck()
	if error > 1 then
		return 0
	end
end
function third_start()
	gg.toast("🔴Hackers House: Third Try")
	O_dinitial_search()
	if error > 2 then
		return 0
	end
	CA_pointer_search()
	if error > 2 then
		return 0
	end
	if offst == 0 then
		CA2_apply_offset()
	end
	if error > 2 then
		return 0
	end
	A_base_value()
	if error > 2 then
		return 0
	end
	if offst == 0 then
		A_base_accuracy()
	end
	if error > 2 then
		return 0
	end
	A_user_given_offset()
	if error > 2 then
		return 0
	end
	loopCheck()
	if error > 2 then
		return 0
	end
end
function fourth_start()
	gg.toast("☢️Hackers House: Fourth Try")
	O_dinitial_search()
	CA_pointer_search()
	CA2_apply_offset()
	Q_apply_fix()
	if offst == 0 then
		A_base_accuracy()
	end
	A_user_given_offset()
	loopCheck()
end
--[[ ℹ️ It will create an UI button and loop until user clicks the UI. If clicked calls start() ]]--
function UI()
	gg.setVisible(true)
	gg.showUiButton()
	while true do
		if gg.isClickedUiButton() then
			gg.setVisible(false)
			local choice = gg.alert("メインメニュー/Offset Finder", "[←]    メインメニューにもどる")
			if choice == 1 then
				mainMenu()
			end
			start()
		end
	end
end
function stopClose()
	while true do
		mainMenu()
		gg.setVisible(false)
		while gg.isVisible() == false do
		end
	end
end
if userMode == 2 then
	stopClose()
else
	UI()
end
---------------------------------------------------------------------------
