gg.alert("テスト版_v1.0\n\nテスト内容:\n[1] シーケンス修正後の動作確認\n[2] Xaを使ったハッキング\n\n\nテスト用のため、簡素です。\nご協力お願いいたします。")
gg.clearList()
gg.clearResults()
Main_selected = {false, false}
stateOptionsA = {"[1]    物理ダメージ 1万倍", "[ON]    物理ダメージ 1万倍", "[OFF]    物理ダメージ 1万倍"}
stateOptionsB = {"[2]    ゲーム速度 4倍", "[ON]    ゲーム速度 4倍", "[OFF]    ゲーム速度 4倍"}
currentOptionA = 1
currentOptionB = 1
function Main()
    local offset = {0x10, 0x4, 0xFC}
    local Type ={gg.TYPE_DWORD, gg.TYPE_FLOAT}
    local function applyoffset(selectedOffset,selectedType)
        local results = gg.getResults(9999)
        gg.clearResults()
        for i, v in ipairs(results) do
            v.address = v.address + selectedOffset
            v.flags = selectedType
        end
        gg.loadResults(results)
    end
    gg.setVisible(false)
    MainMenu = gg.choice({
        stateOptionsA[currentOptionA],
        stateOptionsB[currentOptionB],
        "[X]    おわる"
    }, nil, "テスト版\n\nMonster - 68.1 (2024/1/23)")	
    if MainMenu == nil then
        temporarilyhide()	
        Main()
    elseif MainMenu == 1 then
        gg.clearResults()
        local results = gg.getListItems()
        local filteredResults = {}
        for _, v in ipairs(results) do
            if v.name == "PhysicalDamageData(0x0)" then
                table.insert(filteredResults, v)
            end
        end
        gg.loadResults(filteredResults)
        local count = gg.getResultsCount()
        if count >= 1 then
        else
            valueFromClass("PhysicalDamageData")
            local results = gg.getListItems()
            local filteredResults = {}
            for _, v in ipairs(results) do
                if v.name == "PhysicalDamageData(0x0)" then
                    table.insert(filteredResults, v)
                end
            end
            gg.loadResults(filteredResults)
        end
        if currentOptionA == 1 or currentOptionA == 3 then
            currentOptionA = 2
            applyoffset(offset[1],Type[1])
            gg.getResults(9999)
            gg.editAll("1,500,000", gg.TYPE_DWORD)
            applyoffset(offset[2],Type[1])
            gg.getResults(9999)
            gg.editAll("1,500,000", gg.TYPE_DWORD)
            applyoffset(offset[2],Type[1])
            gg.getResults(9999)
            gg.editAll("1,500,000", gg.TYPE_DWORD)
            applyoffset(offset[2],Type[1])
            gg.getResults(9999)
            gg.editAll("1,500,000", gg.TYPE_DWORD)
            gg.clearResults()
        elseif currentOptionA == 2 then
            currentOptionA = 3
            applyoffset(offset[1],Type[1])
            gg.getResults(9999)
            gg.editAll("150", gg.TYPE_DWORD)
            applyoffset(offset[2],Type[1])
            gg.getResults(9999)
            gg.editAll("150", gg.TYPE_DWORD)
            applyoffset(offset[2],Type[1])
            gg.getResults(9999)
            gg.editAll("150", gg.TYPE_DWORD)
            applyoffset(offset[2],Type[1])
            gg.getResults(9999)
            gg.editAll("150", gg.TYPE_DWORD)
            gg.clearResults()
        end
    elseif MainMenu == 2 then
        gg.clearResults()
        local results = gg.getListItems()
        local filteredResults = {}
        for _, v in ipairs(results) do
            if v.name == "GameSpeed" then
                table.insert(filteredResults, v)
            end
        end
        gg.loadResults(filteredResults)
        local count = gg.getResultsCount()
        if count >= 1 then
        else     
            local libName = "libunity.so"
            local libRanges = gg.getRangesList(libName)
            if #libRanges == 0 then
                print("Error: Unable to find library range.")
                return
            end
            local libAddress = libRanges[2].start
            local address = libAddress + 0x245698
            gg.setRanges(gg.REGION_C_DATA)
            gg.searchNumber(address, gg.TYPE_QWORD)
            local results = gg.getResults(1)
            local hexaddress = #results > 0 and (string.format("%X", results[1].address) .. "h") or nil
			gg.clearResults()
            gg.setRanges(gg.REGION_ANONYMOUS)
            gg.searchNumber(hexaddress, gg.TYPE_QWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
            applyoffset(offset[3],Type[2])
            local results = gg.getResults(9999)
            for i, v in ipairs(results) do
                v.name = "GameSpeed"
            end
            gg.addListItems(results)
        end            
        if currentOptionB == 1 or currentOptionB == 3 then
            currentOptionB = 2
            gg.getResults(9999)
            gg.editAll("4", gg.TYPE_FLOAT)     
        elseif currentOptionB == 2 then
            currentOptionB = 3
            gg.getResults(9999)
            gg.editAll("1", gg.TYPE_FLOAT)  
        end
    elseif MainMenu == 3 then
        os.exit()             
    end
end    
-- 一時的に非表示にする
function temporarilyhide()
	gg.setVisible(false)
	while true do
	if gg.isVisible() then
		break 
		end
	end 
end
function valueFromClass(class)
    Get_user_input = {}
    Get_user_input[1] = class
    user_input = ":"..Get_user_input[1] 
    error = 0
    offst = 0
    gg.setVisible(false)
    gg.toast("🟢First Try")    
    start()
end
function loopCheck()
    if error == 3 then
        stopClose()
    end
end

function found_(message)
    if error == 1 then
		found2(message)
    elseif error == 2 then
		found3(message)
    elseif error == 3 then
		found4(message)
    else
		found(message)
    end
end
function found(message)
    if count == 0 then
        gg.clearResults()
        gg.clearList()
        first_error = message
        error = 1
        second_start()
    end
end
function found2(message)
    if count == 0 then
        gg.clearResults()
        gg.clearList()
        second_error = message
        error = 2
        third_start()
    end
end
function found3(message)
    if count == 0 then
        gg.clearResults()
        gg.clearList()
        third_error = message
        error = 3
        fourth_start()
        end
end
function found4(message)
    if count == 0 then
        gg.clearResults()
        gg.clearList()
        gg.alert("❌ エラー ❌\n: "..first_error.."\n\nℹ️エラーの原因ℹ️\n\n🟢O_dinitial_search,: \nクラス名検索\n⇒ クラスデータの誤り\n・ggのプロセスを確認\n・クラス名, リファイン値を確認\n\n🟡CA_pointer_search, Q_apply_fix: \nポインタ検索1\n⇒ クラスデータが複製されていない。\n・変数を生成させてからコードを実行する(変数が生成される条件:該当の装備をするなど{*を確認})\n\n🟢のエラーはコードの不具合の可能性が高いです。naruse1122(Discord)まで連絡してください。")
        gg.setVisible(true)
        loopCheck()
    end
end

    
function O_dinitial_search()
    if error > 1 then
        gg.setRanges(gg.REGION_C_ALLOC)
    else
        gg.setRanges(gg.REGION_OTHER)
    end
    gg.searchNumber(user_input, gg.TYPE_BYTE)
    count = gg.getResultsCount()
    if count == 0 then
        found_("O_dinitial_search")
        return 0
    end
    Refiner = gg.getResults(1)
    gg.refineNumber(Refiner[1].value, gg.TYPE_BYTE)
    count = gg.getResultsCount()
    if count == 0 then
        found_("O_dinitial_search")
        return 0
    end
    results = gg.getResults(9999)
    for i, v in ipairs(results) do
        v.name = "_Odinitialsearch_"..Get_user_input[1]
    end
    gg.addListItems(results)
end
 
function CA_pointer_search()
    gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_OTHER)
    results = gg.getListItems()
	filteredResults = {}	
	for _, v in ipairs(results) do
		if v.name == "_Odinitialsearch_"..Get_user_input[1] then
			table.insert(filteredResults, v)
		end
	end
	gg.loadResults(filteredResults)   
    gg.searchPointer(offst)
    count = gg.getResultsCount()
    if count == 0 then
        found_("CA_pointer_search")
        return 0
    end
end    

function CA_apply_offset()
    results = gg.getResults(9999)
    gg.clearResults()
    for i, v in ipairs(results) do
        v.address = v.address + 0xFFFFFFFFFFFFFFF0
        v.flags = gg.TYPE_QWORD
    end
    gg.loadResults(results)
    gg.refineNumber("0", gg.TYPE_QWORD, false, gg.SIGN_NOT_EQUAL, 0, -1, 0)	
    results = gg.getResults(9999)
    for i, v in ipairs(results) do
        v.name = "_CAapplyoffset_"..Get_user_input[1]
    end
    gg.addListItems(results)
end
    
function Q_apply_fix()
    gg.setRanges(gg.REGION_ANONYMOUS)
    results = gg.getListItems()
	filteredResults = {}	
	for _, v in ipairs(results) do
		if v.name == "_CAapplyoffset_"..Get_user_input[1] then
			table.insert(filteredResults, v)
		end
	end
	gg.loadResults(filteredResults)   
    count = gg.getResultsCount()
    if count == 0 then
        found_("Q_apply_fix")
        return 0
    end
    yy = gg.getResults(1000)
    gg.clearResults()
    i = 1
    c = 1
    s = {}
    while (i-1) < count do
        yy[i].address = yy[i].address + 0xB400000000000000
        gg.searchNumber(yy[i].address, gg.TYPE_QWORD)
        cnt = gg.getResultsCount()
        if 0 < cnt then
            bytr = gg.getResults(cnt)
            n = 1
            while (n-1) < cnt do
                s[c] = {}
                s[c].address = bytr[n].address
                s[c].flags = 32
                n = n + 1
                c = c + 1
            end
        end
        gg.clearResults()
        i = i + 1
    end
	for i, v in ipairs(s) do
		v.name = "_Qapplyfix_"..Get_user_input[1]
	end
	gg.addListItems(s)
end
      
function A_base_value()
    gg.setRanges(gg.REGION_ANONYMOUS)
    results = gg.getListItems()
	filteredResults = {}	
	for _, v in ipairs(results) do
		if v.name == "_CAapplyoffset_"..Get_user_input[1] then
			table.insert(filteredResults, v)
		end
	end
	gg.loadResults(filteredResults)   
    gg.searchPointer(offst)
    count = gg.getResultsCount()
    if count == 0 then
    found_("A_base_value")
    return 0
    end
    results = gg.getResults(9999)
    for i, v in ipairs(results) do
        v.name = "_Abasevalue_"..Get_user_input[1]
    end
    gg.addListItems(results)
end

function A_base_accuracy()
    gg.setRanges(gg.REGION_ANONYMOUS | gg.REGION_C_ALLOC)
    results = gg.getListItems()
	filteredResults = {}	
	for _, v in ipairs(results) do
		if v.name == "_Abasevalue_"..Get_user_input[1] then
			table.insert(filteredResults, v)
		end
	end
	gg.loadResults(filteredResults)  
    gg.searchPointer(offst)
    count = gg.getResultsCount()
    if count == 0 then
        found_("A_base_accuracy")
        return 0
    end
    kol = gg.getResults(count)
    i = 1
    h = {}
    while (i-1) < count do
        h[i] = {}
        h[i].address = kol[i].value
        h[i].flags = 32
        i = i + 1
    end
	for i, v in ipairs(h) do
		v.name = Get_user_input[1].."(0x0)"
	end
	gg.addListItems(h)
end
function A_base_accuracy2()
    gg.setRanges(gg.REGION_ANONYMOUS | gg.REGION_C_ALLOC)
    results = gg.getListItems()
	filteredResults = {}	
	for _, v in ipairs(results) do
		if v.name == "_Qapplyfix_"..Get_user_input[1] then
			table.insert(filteredResults, v)
		end
	end
	gg.loadResults(filteredResults)   
    gg.searchPointer(offst)
    count = gg.getResultsCount()
    if count == 0 then
    found_("A_base_accuracy")
    return 0
    end
    kol = gg.getResults(count)
    i = 1
    h = {}
    while (i-1) < count do
    h[i] = {}
    h[i].address = kol[i].value
    h[i].flags = 32
    i = i + 1
    end
	for i, v in ipairs(h) do
		v.name = Get_user_input[1].."(0x0)"
	end
	gg.addListItems(h)
end
function start()
    O_dinitial_search()
    if error > 0 then
        return 0
    end
    CA_pointer_search()
    if error > 0 then
        return 0
    end
    CA_apply_offset()
    if error > 0 then
        return 0
    end
    A_base_value()
    if error > 0 then
        return 0
    end
    if offst == 0 then
        A_base_accuracy()
    end
    if error > 0 then
        return 0
    end
    loopCheck()
    if error > 0 then
        return 0
    end
end 
function second_start()
    gg.toast("🟡Second Try")
    O_dinitial_search()
    if error > 1 then
        return 0
    end
    CA_pointer_search()
    if error > 1 then
        return 0
    end
    CA_apply_offset()
    if error > 1 then
        return 0
    end
    Q_apply_fix()
    if error > 1 then
        return 0
    end
    if offst == 0 then
        A_base_accuracy2()
    end
    if error > 1 then
        return 0
    end
    loopCheck()
    if error > 1 then
        return 0
    end
end 
function third_start()
    gg.toast("🔴Third Try")
    O_dinitial_search()
    if error > 2 then
        return 0
    end
    CA_pointer_search()
    if error > 2 then
        return 0
    end
    if offst == 0 then
        CA_apply_offset()
    end
    if error > 2 then
        return 0
    end
    A_base_value()
    if error > 2 then
        return 0
    end
    if offst == 0 then
        A_base_accuracy()
    end
    if error > 2 then
    return 0
    end
    loopCheck()
    if error > 2 then
        return 0
    end
end
function fourth_start()
    gg.toast("☢️Fourth Try")
    O_dinitial_search()
    CA_pointer_search()
    CA_apply_offset()
    Q_apply_fix()
    if offst == 0 then
        A_base_accuracy2()
    end
    loopCheck()
end
function stopClose()
    while true do
        Main()
        gg.setVisible(false)
        while gg.isVisible() == false do
        end
    end
end
stopClose()
